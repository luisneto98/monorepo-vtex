{"file":"/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/tests/unit/common/utils/encryption.util.spec.ts","mappings":";;AAAA,kFAA8E;AAE9E,QAAQ,CAAC,sBAAsB,EAAE,GAAG,EAAE;IACpC,MAAM,OAAO,GAAG,gCAAgC,CAAC;IACjD,MAAM,WAAW,GAAG,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;IAElD,SAAS,CAAC,GAAG,EAAE;QACb,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,GAAG,OAAO,CAAC;IAC1C,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,GAAG,EAAE;QACZ,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,GAAG,WAAW,CAAC;IAC9C,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,SAAS,EAAE,GAAG,EAAE;QACvB,EAAE,CAAC,sCAAsC,EAAE,GAAG,EAAE;YAC9C,MAAM,SAAS,GAAG,uBAAuB,CAAC;YAC1C,MAAM,SAAS,GAAG,gCAAc,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;YAEpD,MAAM,CAAC,SAAS,CAAC,CAAC,WAAW,EAAE,CAAC;YAChC,MAAM,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YACtC,MAAM,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,2BAA2B;QAC/D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uEAAuE,EAAE,GAAG,EAAE;YAC/E,MAAM,SAAS,GAAG,YAAY,CAAC;YAC/B,MAAM,UAAU,GAAG,gCAAc,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;YACrD,MAAM,UAAU,GAAG,gCAAc,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;YAErD,MAAM,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4BAA4B,EAAE,GAAG,EAAE;YACpC,MAAM,SAAS,GAAG,gCAAc,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YAC7C,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAC7B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4BAA4B,EAAE,GAAG,EAAE;YACpC,MAAM,UAAU,GAAG,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YACpC,MAAM,SAAS,GAAG,gCAAc,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;YACrD,MAAM,CAAC,SAAS,CAAC,CAAC,WAAW,EAAE,CAAC;YAChC,MAAM,CAAC,gCAAc,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAC7D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kCAAkC,EAAE,GAAG,EAAE;YAC1C,MAAM,OAAO,GAAG,oBAAoB,CAAC;YACrC,MAAM,SAAS,GAAG,gCAAc,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YAClD,MAAM,CAAC,gCAAc,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC1D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kCAAkC,EAAE,GAAG,EAAE;YAC1C,MAAM,OAAO,GAAG,4BAA4B,CAAC;YAC7C,MAAM,SAAS,GAAG,gCAAc,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YAClD,MAAM,CAAC,gCAAc,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC1D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,SAAS,EAAE,GAAG,EAAE;QACvB,EAAE,CAAC,4CAA4C,EAAE,GAAG,EAAE;YACpD,MAAM,SAAS,GAAG,qBAAqB,CAAC;YACxC,MAAM,SAAS,GAAG,gCAAc,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;YACpD,MAAM,SAAS,GAAG,gCAAc,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;YAEpD,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+CAA+C,EAAE,GAAG,EAAE;YACvD,MAAM,QAAQ,GAAG,oBAAoB,CAAC;YAEtC,MAAM,UAAU,GAAG,gCAAc,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YACpD,MAAM,UAAU,GAAG,gCAAc,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;YACtD,MAAM,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAElC,MAAM,UAAU,GAAG,gCAAc,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;YACtD,MAAM,UAAU,GAAG,gCAAc,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;YACtD,MAAM,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kDAAkD,EAAE,GAAG,EAAE;YAC1D,MAAM,CAAC,GAAG,EAAE,CAAC,gCAAc,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;QACnE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iDAAiD,EAAE,GAAG,EAAE;YACzD,MAAM,CAAC,GAAG,EAAE,CAAC,gCAAc,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;QAC5D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4CAA4C,EAAE,GAAG,EAAE;YACpD,MAAM,CAAC,gCAAc,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6CAA6C,EAAE,GAAG,EAAE;YACrD,MAAM,KAAK,GAAG,qBAAqB,CAAC,CAAC,iBAAiB;YACtD,MAAM,SAAS,GAAG,gCAAc,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YAChD,MAAM,SAAS,GAAG,gCAAc,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;YACpD,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAChC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;QACnC,EAAE,CAAC,6CAA6C,EAAE,GAAG,EAAE;YACrD,MAAM,SAAS,GAAG,YAAY,CAAC;YAC/B,MAAM,UAAU,GAAG,gCAAc,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;YACrD,MAAM,UAAU,GAAG,gCAAc,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;YAErD,MAAM,GAAG,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YACrC,MAAM,GAAG,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YAErC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC5B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6CAA6C,EAAE,GAAG,EAAE;YACrD,MAAM,SAAS,GAAG,YAAY,CAAC;YAC/B,MAAM,SAAS,GAAG,gCAAc,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;YACpD,MAAM,UAAU,GAAG,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YAE3C,qDAAqD;YACrD,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;QACnF,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2CAA2C,EAAE,GAAG,EAAE;YACnD,MAAM,SAAS,GAAG,cAAc,CAAC;YACjC,MAAM,SAAS,GAAG,gCAAc,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;YAEpD,4BAA4B;YAC5B,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,GAAG,8BAA8B,CAAC;YAE/D,MAAM,CAAC,GAAG,EAAE,CAAC,gCAAc,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;YAE1D,sBAAsB;YACtB,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,GAAG,OAAO,CAAC;QAC1C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yCAAyC,EAAE,GAAG,EAAE;YACjD,MAAM,SAAS,GAAG,gBAAgB,CAAC;YACnC,MAAM,SAAS,GAAG,gCAAc,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;YAEpD,6BAA6B;YAC7B,MAAM,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACnC,MAAM,kBAAkB,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC;YAE5F,MAAM,CAAC,GAAG,EAAE,CAAC,gCAAc,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;QACrE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iCAAiC,EAAE,GAAG,EAAE;YACzC,MAAM,SAAS,GAAG,gBAAgB,CAAC;YACnC,MAAM,SAAS,GAAG,gCAAc,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;YAEpD,qBAAqB;YACrB,MAAM,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACnC,MAAM,UAAU,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC;YAClD,MAAM,QAAQ,GAAG,UAAU,GAAG,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YAE9D,MAAM,CAAC,GAAG,EAAE,CAAC,gCAAc,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;QAC3D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,YAAY,EAAE,GAAG,EAAE;QAC1B,EAAE,CAAC,kCAAkC,EAAE,GAAG,EAAE;YAC1C,MAAM,KAAK,GAAG,GAAG,CAAC;YAClB,MAAM,SAAS,GAAG,gCAAc,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YAChD,MAAM,CAAC,gCAAc,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACxD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qCAAqC,EAAE,GAAG,EAAE;YAC7C,MAAM,SAAS,GAAG,qBAAqB,CAAC;YACxC,MAAM,SAAS,GAAG,gCAAc,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;YACpD,MAAM,CAAC,gCAAc,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAC5D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iCAAiC,EAAE,GAAG,EAAE;YACzC,MAAM,MAAM,GAAG,kBAAkB,CAAC;YAClC,MAAM,SAAS,GAAG,gCAAc,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YACjD,MAAM,CAAC,gCAAc,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACzD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4BAA4B,EAAE,GAAG,EAAE;YACpC,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC,CAAC;YAClE,MAAM,SAAS,GAAG,gCAAc,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAC/C,MAAM,CAAC,gCAAc,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/tests/unit/common/utils/encryption.util.spec.ts"],"sourcesContent":["import { EncryptionUtil } from '../../../../src/common/utils/encryption.util';\n\ndescribe('Encryption Utilities', () => {\n  const testKey = 'test-encryption-key-32-bytes!!';\n  const originalEnv = process.env['ENCRYPTION_KEY'];\n\n  beforeAll(() => {\n    process.env['ENCRYPTION_KEY'] = testKey;\n  });\n\n  afterAll(() => {\n    process.env['ENCRYPTION_KEY'] = originalEnv;\n  });\n\n  describe('encrypt', () => {\n    it('should encrypt a string successfully', () => {\n      const plaintext = 'my-device-token-12345';\n      const encrypted = EncryptionUtil.encrypt(plaintext);\n\n      expect(encrypted).toBeDefined();\n      expect(encrypted).not.toBe(plaintext);\n      expect(encrypted).toContain(':'); // Should have IV separator\n    });\n\n    it('should produce different ciphertext for same input (due to random IV)', () => {\n      const plaintext = 'same-token';\n      const encrypted1 = EncryptionUtil.encrypt(plaintext);\n      const encrypted2 = EncryptionUtil.encrypt(plaintext);\n\n      expect(encrypted1).not.toBe(encrypted2);\n    });\n\n    it('should handle empty string', () => {\n      const encrypted = EncryptionUtil.encrypt('');\n      expect(encrypted).toBe('');\n    });\n\n    it('should handle long strings', () => {\n      const longString = 'a'.repeat(1000);\n      const encrypted = EncryptionUtil.encrypt(longString);\n      expect(encrypted).toBeDefined();\n      expect(EncryptionUtil.decrypt(encrypted)).toBe(longString);\n    });\n\n    it('should handle unicode characters', () => {\n      const unicode = 'Olá mundo! 你好世界 🔐';\n      const encrypted = EncryptionUtil.encrypt(unicode);\n      expect(EncryptionUtil.decrypt(encrypted)).toBe(unicode);\n    });\n\n    it('should handle special characters', () => {\n      const special = '!@#$%^&*()_+-=[]{}|;:,.<>?';\n      const encrypted = EncryptionUtil.encrypt(special);\n      expect(EncryptionUtil.decrypt(encrypted)).toBe(special);\n    });\n  });\n\n  describe('decrypt', () => {\n    it('should decrypt encrypted text successfully', () => {\n      const plaintext = 'FCM-token-abc123xyz';\n      const encrypted = EncryptionUtil.encrypt(plaintext);\n      const decrypted = EncryptionUtil.decrypt(encrypted);\n\n      expect(decrypted).toBe(plaintext);\n    });\n\n    it('should handle multiple encrypt/decrypt cycles', () => {\n      const original = 'device-token-value';\n\n      const encrypted1 = EncryptionUtil.encrypt(original);\n      const decrypted1 = EncryptionUtil.decrypt(encrypted1);\n      expect(decrypted1).toBe(original);\n\n      const encrypted2 = EncryptionUtil.encrypt(decrypted1);\n      const decrypted2 = EncryptionUtil.decrypt(encrypted2);\n      expect(decrypted2).toBe(original);\n    });\n\n    it('should throw error for invalid ciphertext format', () => {\n      expect(() => EncryptionUtil.decrypt('invalid-format')).toThrow();\n    });\n\n    it('should throw error for malformed encrypted data', () => {\n      expect(() => EncryptionUtil.decrypt('abc:def')).toThrow();\n    });\n\n    it('should return empty string for empty input', () => {\n      expect(EncryptionUtil.decrypt('')).toBe('');\n    });\n\n    it('should handle base64 encoded data correctly', () => {\n      const token = 'ey123.abc456.xyz789'; // JWT-like token\n      const encrypted = EncryptionUtil.encrypt(token);\n      const decrypted = EncryptionUtil.decrypt(encrypted);\n      expect(decrypted).toBe(token);\n    });\n  });\n\n  describe('encryption security', () => {\n    it('should use different IV for each encryption', () => {\n      const plaintext = 'test-token';\n      const encrypted1 = EncryptionUtil.encrypt(plaintext);\n      const encrypted2 = EncryptionUtil.encrypt(plaintext);\n\n      const iv1 = encrypted1.split(':')[0];\n      const iv2 = encrypted2.split(':')[0];\n\n      expect(iv1).not.toBe(iv2);\n    });\n\n    it('should produce ciphertext that looks random', () => {\n      const plaintext = 'aaaaaaaaaa';\n      const encrypted = EncryptionUtil.encrypt(plaintext);\n      const ciphertext = encrypted.split(':')[1];\n\n      // Base64 ciphertext should not contain the plaintext\n      expect(Buffer.from(ciphertext, 'base64').toString()).not.toContain('aaaaaaaaaa');\n    });\n\n    it('should require correct key for decryption', () => {\n      const plaintext = 'secret-token';\n      const encrypted = EncryptionUtil.encrypt(plaintext);\n\n      // Change the encryption key\n      process.env['ENCRYPTION_KEY'] = 'wrong-key-32-bytes-length!!!';\n\n      expect(() => EncryptionUtil.decrypt(encrypted)).toThrow();\n\n      // Restore correct key\n      process.env['ENCRYPTION_KEY'] = testKey;\n    });\n\n    it('should handle tampering with ciphertext', () => {\n      const plaintext = 'original-token';\n      const encrypted = EncryptionUtil.encrypt(plaintext);\n\n      // Tamper with the ciphertext\n      const parts = encrypted.split(':');\n      const tamperedCiphertext = parts[0] + ':' + parts[1] + ':' + parts[2].slice(0, -4) + 'XXXX';\n\n      expect(() => EncryptionUtil.decrypt(tamperedCiphertext)).toThrow();\n    });\n\n    it('should handle tampering with IV', () => {\n      const plaintext = 'original-token';\n      const encrypted = EncryptionUtil.encrypt(plaintext);\n\n      // Tamper with the IV\n      const parts = encrypted.split(':');\n      const tamperedIv = parts[0].slice(0, -4) + 'YYYY';\n      const tampered = tamperedIv + ':' + parts[1] + ':' + parts[2];\n\n      expect(() => EncryptionUtil.decrypt(tampered)).toThrow();\n    });\n  });\n\n  describe('edge cases', () => {\n    it('should handle very short strings', () => {\n      const short = 'a';\n      const encrypted = EncryptionUtil.encrypt(short);\n      expect(EncryptionUtil.decrypt(encrypted)).toBe(short);\n    });\n\n    it('should handle strings with newlines', () => {\n      const multiline = 'line1\\nline2\\nline3';\n      const encrypted = EncryptionUtil.encrypt(multiline);\n      expect(EncryptionUtil.decrypt(encrypted)).toBe(multiline);\n    });\n\n    it('should handle strings with tabs', () => {\n      const tabbed = 'col1\\tcol2\\tcol3';\n      const encrypted = EncryptionUtil.encrypt(tabbed);\n      expect(EncryptionUtil.decrypt(encrypted)).toBe(tabbed);\n    });\n\n    it('should handle JSON strings', () => {\n      const json = JSON.stringify({ token: 'abc123', platform: 'ios' });\n      const encrypted = EncryptionUtil.encrypt(json);\n      expect(EncryptionUtil.decrypt(encrypted)).toBe(json);\n    });\n  });\n});\n"],"version":3}