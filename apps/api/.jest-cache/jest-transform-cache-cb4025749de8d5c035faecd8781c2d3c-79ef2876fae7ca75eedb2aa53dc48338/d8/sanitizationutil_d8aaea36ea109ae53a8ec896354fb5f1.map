{"file":"/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/news-releases/utils/sanitization.util.ts","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,gEAAkD;AAElD,MAAa,gBAAgB;IAC3B,MAAM,CAAC,YAAY,CAAC,IAAY;QAC9B,OAAO,SAAS,CAAC,QAAQ,CAAC,IAAI,EAAE;YAC9B,YAAY,EAAE;gBACZ,GAAG;gBACH,IAAI;gBACJ,QAAQ;gBACR,IAAI;gBACJ,GAAG;gBACH,GAAG;gBACH,IAAI;gBACJ,IAAI;gBACJ,IAAI;gBACJ,YAAY;gBACZ,IAAI;gBACJ,IAAI;gBACJ,IAAI;gBACJ,IAAI;gBACJ,IAAI;gBACJ,IAAI;gBACJ,KAAK;gBACL,QAAQ;gBACR,KAAK;gBACL,MAAM;gBACN,OAAO;gBACP,OAAO;gBACP,OAAO;gBACP,IAAI;gBACJ,IAAI;gBACJ,IAAI;gBACJ,KAAK;gBACL,MAAM;aACP;YACD,YAAY,EAAE;gBACZ,MAAM;gBACN,QAAQ;gBACR,KAAK;gBACL,KAAK;gBACL,OAAO;gBACP,QAAQ;gBACR,aAAa;gBACb,iBAAiB;gBACjB,OAAO;gBACP,KAAK;gBACL,OAAO;aACR;YACD,kBAAkB,EAAE,6DAA6D;YACjF,eAAe,EAAE,KAAK;YACtB,YAAY,EAAE,IAAI;SACnB,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,YAAY,CAAC,IAAY;QAC9B,OAAO,IAAI,EAAE,IAAI,EAAE,CAAC,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;IAChD,CAAC;IAED,MAAM,CAAC,gBAAgB,CAAC,IAAY;QAClC,wBAAwB;QACxB,IAAI,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QAExC,sCAAsC;QACtC,SAAS,GAAG,SAAS,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QAE3C,yBAAyB;QACzB,SAAS,GAAG,SAAS,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;QAE1C,gCAAgC;QAChC,SAAS,GAAG,SAAS,CAAC,OAAO,CAAC,uBAAuB,EAAE,EAAE,CAAC,CAAC;QAE3D,qBAAqB;QACrB,SAAS,GAAG,SAAS,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;QAE3C,2CAA2C;QAC3C,IAAI,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC;YAC5D,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;QACvC,CAAC;QAED,OAAO,SAAS,CAAC;IACnB,CAAC;IAED,MAAM,CAAC,YAAY,CAAC,IAAY;QAC9B,OAAO,IAAI;aACR,WAAW,EAAE;aACb,SAAS,CAAC,KAAK,CAAC;aAChB,OAAO,CAAC,kBAAkB,EAAE,EAAE,CAAC;aAC/B,OAAO,CAAC,aAAa,EAAE,GAAG,CAAC;aAC3B,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;IAC7B,CAAC;CACF;AAxFD,4CAwFC","names":[],"sources":["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/news-releases/utils/sanitization.util.ts"],"sourcesContent":["import * as DOMPurify from 'isomorphic-dompurify';\n\nexport class SanitizationUtil {\n  static sanitizeHtml(html: string): string {\n    return DOMPurify.sanitize(html, {\n      ALLOWED_TAGS: [\n        'p',\n        'br',\n        'strong',\n        'em',\n        'u',\n        'a',\n        'ul',\n        'ol',\n        'li',\n        'blockquote',\n        'h1',\n        'h2',\n        'h3',\n        'h4',\n        'h5',\n        'h6',\n        'img',\n        'iframe',\n        'div',\n        'span',\n        'table',\n        'thead',\n        'tbody',\n        'tr',\n        'td',\n        'th',\n        'pre',\n        'code',\n      ],\n      ALLOWED_ATTR: [\n        'href',\n        'target',\n        'src',\n        'alt',\n        'width',\n        'height',\n        'frameborder',\n        'allowfullscreen',\n        'class',\n        'rel',\n        'title',\n      ],\n      ALLOWED_URI_REGEXP: /^(?:(?:https?|mailto):|[^a-z]|[a-z+.\\-]+(?:[^a-z+.\\-:]|$))/i,\n      ALLOW_DATA_ATTR: false,\n      KEEP_CONTENT: true,\n    });\n  }\n\n  static sanitizeText(text: string): string {\n    return text?.trim().replace(/<[^>]*>?/gm, '');\n  }\n\n  static sanitizeFilePath(path: string): string {\n    // Remove any null bytes\n    let sanitized = path.replace(/\\0/g, '');\n\n    // Remove directory traversal attempts\n    sanitized = sanitized.replace(/\\.\\./g, '');\n\n    // Remove leading slashes\n    sanitized = sanitized.replace(/^\\/+/, '');\n\n    // Remove any control characters\n    sanitized = sanitized.replace(/[\\x00-\\x1f\\x80-\\x9f]/g, '');\n\n    // Normalize the path\n    sanitized = sanitized.replace(/\\/+/g, '/');\n\n    // Ensure no path traversal patterns remain\n    if (sanitized.includes('../') || sanitized.includes('..\\\\')) {\n      throw new Error('Invalid file path');\n    }\n\n    return sanitized;\n  }\n\n  static sanitizeSlug(text: string): string {\n    return text\n      .toLowerCase()\n      .normalize('NFD')\n      .replace(/[\\u0300-\\u036f]/g, '')\n      .replace(/[^a-z0-9]+/g, '-')\n      .replace(/^-+|-+$/g, '');\n  }\n}\n"],"version":3}