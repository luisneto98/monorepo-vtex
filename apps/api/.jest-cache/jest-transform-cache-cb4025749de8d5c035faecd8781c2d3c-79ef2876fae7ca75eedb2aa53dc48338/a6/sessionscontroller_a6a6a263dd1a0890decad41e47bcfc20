e077881e2261c75e9612233192b4426c
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SessionsController = void 0;
const common_1 = require("@nestjs/common");
const swagger_1 = require("@nestjs/swagger");
const sessions_service_1 = require("./sessions.service");
const jwt_auth_guard_1 = require("@common/guards/jwt-auth.guard");
const roles_guard_1 = require("@common/guards/roles.guard");
const roles_decorator_1 = require("@common/decorators/roles.decorator");
const user_types_1 = require("@shared/types/user.types");
const public_decorator_1 = require("@common/decorators/public.decorator");
const create_session_dto_1 = require("./dto/create-session.dto");
const update_session_dto_1 = require("./dto/update-session.dto");
const session_filter_dto_1 = require("./dto/session-filter.dto");
const api_response_dto_1 = require("@common/dto/api-response.dto");
let SessionsController = class SessionsController {
    sessionsService;
    constructor(sessionsService) {
        this.sessionsService = sessionsService;
    }
    async create(createSessionDto) {
        const session = await this.sessionsService.create(createSessionDto);
        return api_response_dto_1.ApiResponse.success(session);
    }
    async findAll(filterDto) {
        const result = await this.sessionsService.findAll(filterDto);
        return api_response_dto_1.ApiResponse.success(result.data, result.metadata);
    }
    async findHighlights() {
        const sessions = await this.sessionsService.findHighlights();
        return api_response_dto_1.ApiResponse.success(sessions);
    }
    async findLiveSessions() {
        const sessions = await this.sessionsService.findLiveSessions();
        return api_response_dto_1.ApiResponse.success(sessions);
    }
    async findOne(id) {
        const session = await this.sessionsService.findById(id);
        return api_response_dto_1.ApiResponse.success(session);
    }
    async update(id, updateSessionDto) {
        const session = await this.sessionsService.update(id, updateSessionDto);
        return api_response_dto_1.ApiResponse.success(session);
    }
    async remove(id, req, reason) {
        const userId = req.user?.id;
        await this.sessionsService.remove(id, reason, userId);
    }
    async restore(id) {
        const session = await this.sessionsService.restore(id);
        return api_response_dto_1.ApiResponse.success(session);
    }
};
exports.SessionsController = SessionsController;
__decorate([
    (0, common_1.Post)(),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, roles_guard_1.RolesGuard),
    (0, roles_decorator_1.Roles)(user_types_1.UserRole.SUPER_ADMIN, user_types_1.UserRole.PRODUCER),
    (0, common_1.HttpCode)(common_1.HttpStatus.CREATED),
    (0, swagger_1.ApiBearerAuth)('JWT-auth'),
    (0, swagger_1.ApiOperation)({ summary: 'Create new session (Admin/Producer only)' }),
    (0, swagger_1.ApiBody)({ type: create_session_dto_1.CreateSessionDto }),
    (0, swagger_1.ApiResponse)({
        status: 201,
        description: 'Session created successfully',
        schema: {
            example: {
                success: true,
                data: {
                    _id: '507f1f77bcf86cd799439011',
                    title: { 'pt-BR': 'Keynote de Abertura', en: 'Opening Keynote' },
                    description: { 'pt-BR': 'Descrição...', en: 'Description...' },
                    startTime: '2025-11-26T09:00:00Z',
                    endTime: '2025-11-26T10:00:00Z',
                    stage: 'principal',
                    type: 'keynote',
                    speakers: ['507f1f77bcf86cd799439012'],
                    capacity: 500,
                    isHighlight: true,
                },
            },
        },
    }),
    (0, swagger_1.ApiResponse)({ status: 400, description: 'Validation error or session conflict' }),
    (0, swagger_1.ApiResponse)({ status: 401, description: 'Unauthorized' }),
    (0, swagger_1.ApiResponse)({ status: 403, description: 'Forbidden - insufficient role' }),
    __param(0, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [create_session_dto_1.CreateSessionDto]),
    __metadata("design:returntype", Promise)
], SessionsController.prototype, "create", null);
__decorate([
    (0, common_1.Get)(),
    (0, public_decorator_1.Public)(),
    (0, swagger_1.ApiOperation)({
        summary: 'List sessions with advanced filtering',
        description: 'Get event sessions filtered by date, stage, type, tags, and speakers',
    }),
    (0, swagger_1.ApiQuery)({ name: 'page', required: false, type: Number, example: 1 }),
    (0, swagger_1.ApiQuery)({ name: 'limit', required: false, type: Number, example: 20 }),
    (0, swagger_1.ApiQuery)({ name: 'sort', required: false, type: String, example: 'startTime,-priority' }),
    (0, swagger_1.ApiQuery)({
        name: 'search',
        required: false,
        type: String,
        description: 'Search in title and description',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'startDate',
        required: false,
        type: String,
        example: '2025-11-26',
        description: 'Filter sessions starting from this date',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'endDate',
        required: false,
        type: String,
        example: '2025-11-28',
        description: 'Filter sessions ending before this date',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'stage',
        required: false,
        enum: ['principal', 'inovacao', 'tech', 'startup', 'workshop_a', 'workshop_b'],
        description: 'Filter by stage/room',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'type',
        required: false,
        enum: ['keynote', 'talk', 'panel', 'workshop', 'networking', 'break'],
        description: 'Filter by session type',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'tags',
        required: false,
        type: [String],
        example: ['AI', 'B2B'],
        description: 'Filter by tags (comma-separated)',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'speakerId',
        required: false,
        type: String,
        description: 'Filter by speaker ID',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'isHighlight',
        required: false,
        type: Boolean,
        description: 'Filter highlight sessions',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'List of sessions with pagination',
        schema: {
            example: {
                success: true,
                data: [
                    {
                        _id: '507f1f77bcf86cd799439011',
                        title: { 'pt-BR': 'Keynote de Abertura', en: 'Opening Keynote' },
                        startTime: '2025-11-26T09:00:00Z',
                        endTime: '2025-11-26T10:00:00Z',
                        stage: 'principal',
                        type: 'keynote',
                        speakers: [{ _id: '507f1f77bcf86cd799439012', name: 'Carlos Silva' }],
                        capacity: 500,
                        registrationCount: 350,
                    },
                ],
                metadata: {
                    total: 45,
                    page: 1,
                    limit: 20,
                    totalPages: 3,
                    hasNext: true,
                    hasPrev: false,
                },
            },
        },
    }),
    __param(0, (0, common_1.Query)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [session_filter_dto_1.SessionFilterDto]),
    __metadata("design:returntype", Promise)
], SessionsController.prototype, "findAll", null);
__decorate([
    (0, common_1.Get)('highlights'),
    (0, public_decorator_1.Public)(),
    (0, swagger_1.ApiOperation)({ summary: 'Get highlighted sessions only' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'List of highlighted sessions',
        schema: {
            example: {
                success: true,
                data: [
                    {
                        _id: '507f1f77bcf86cd799439011',
                        title: { 'pt-BR': 'Keynote Principal', en: 'Main Keynote' },
                        startTime: '2025-11-26T09:00:00Z',
                        stage: 'principal',
                        type: 'keynote',
                        isHighlight: true,
                    },
                ],
            },
        },
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], SessionsController.prototype, "findHighlights", null);
__decorate([
    (0, common_1.Get)('live'),
    (0, public_decorator_1.Public)(),
    (0, swagger_1.ApiOperation)({ summary: 'Get currently live sessions' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'List of sessions happening now',
        schema: {
            example: {
                success: true,
                data: [
                    {
                        _id: '507f1f77bcf86cd799439011',
                        title: { 'pt-BR': 'Sessão Atual', en: 'Current Session' },
                        startTime: '2025-11-26T14:00:00Z',
                        endTime: '2025-11-26T15:00:00Z',
                        stage: 'tech',
                        isLive: true,
                    },
                ],
            },
        },
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], SessionsController.prototype, "findLiveSessions", null);
__decorate([
    (0, common_1.Get)(':id'),
    (0, public_decorator_1.Public)(),
    (0, swagger_1.ApiOperation)({ summary: 'Get session by ID' }),
    (0, swagger_1.ApiParam)({ name: 'id', description: 'Session ID', example: '507f1f77bcf86cd799439011' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Session details',
        schema: {
            example: {
                success: true,
                data: {
                    _id: '507f1f77bcf86cd799439011',
                    title: { 'pt-BR': 'Título da Sessão', en: 'Session Title' },
                    description: { 'pt-BR': 'Descrição completa...', en: 'Full description...' },
                    startTime: '2025-11-26T14:00:00Z',
                    endTime: '2025-11-26T15:00:00Z',
                    stage: 'principal',
                    type: 'talk',
                    speakers: [{ _id: '507f1f77bcf86cd799439012', name: 'Speaker Name', company: 'VTEX' }],
                    sponsors: ['507f1f77bcf86cd799439013'],
                    capacity: 200,
                    registrationCount: 150,
                    tags: ['AI', 'Innovation'],
                    materials: [{ type: 'slides', url: 'https://cdn.vtexday.com/slides.pdf' }],
                },
            },
        },
    }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Session not found' }),
    __param(0, (0, common_1.Param)('id')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], SessionsController.prototype, "findOne", null);
__decorate([
    (0, common_1.Patch)(':id'),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, roles_guard_1.RolesGuard),
    (0, roles_decorator_1.Roles)(user_types_1.UserRole.SUPER_ADMIN, user_types_1.UserRole.PRODUCER),
    (0, swagger_1.ApiBearerAuth)('JWT-auth'),
    (0, swagger_1.ApiOperation)({ summary: 'Update session (Admin/Producer only)' }),
    (0, swagger_1.ApiParam)({ name: 'id', description: 'Session ID' }),
    (0, swagger_1.ApiBody)({ type: update_session_dto_1.UpdateSessionDto }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Session updated successfully',
        schema: {
            example: {
                success: true,
                data: {
                    _id: '507f1f77bcf86cd799439011',
                    title: { 'pt-BR': 'Título Atualizado', en: 'Updated Title' },
                    updatedAt: '2025-11-26T10:00:00Z',
                },
            },
        },
    }),
    (0, swagger_1.ApiResponse)({ status: 400, description: 'Validation error or session conflict' }),
    (0, swagger_1.ApiResponse)({ status: 401, description: 'Unauthorized' }),
    (0, swagger_1.ApiResponse)({ status: 403, description: 'Forbidden' }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Session not found' }),
    __param(0, (0, common_1.Param)('id')),
    __param(1, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, update_session_dto_1.UpdateSessionDto]),
    __metadata("design:returntype", Promise)
], SessionsController.prototype, "update", null);
__decorate([
    (0, common_1.Delete)(':id'),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, roles_guard_1.RolesGuard),
    (0, roles_decorator_1.Roles)(user_types_1.UserRole.SUPER_ADMIN),
    (0, common_1.HttpCode)(common_1.HttpStatus.NO_CONTENT),
    (0, swagger_1.ApiBearerAuth)('JWT-auth'),
    (0, swagger_1.ApiOperation)({ summary: 'Soft delete session (Super Admin only)' }),
    (0, swagger_1.ApiParam)({ name: 'id', description: 'Session ID' }),
    (0, swagger_1.ApiQuery)({ name: 'reason', required: false, description: 'Reason for deletion' }),
    (0, swagger_1.ApiResponse)({ status: 204, description: 'Session deleted successfully' }),
    (0, swagger_1.ApiResponse)({ status: 401, description: 'Unauthorized' }),
    (0, swagger_1.ApiResponse)({ status: 403, description: 'Forbidden' }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Session not found' }),
    __param(0, (0, common_1.Param)('id')),
    __param(1, (0, common_1.Req)()),
    __param(2, (0, common_1.Query)('reason')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object, String]),
    __metadata("design:returntype", Promise)
], SessionsController.prototype, "remove", null);
__decorate([
    (0, common_1.Post)(':id/restore'),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, roles_guard_1.RolesGuard),
    (0, roles_decorator_1.Roles)(user_types_1.UserRole.SUPER_ADMIN),
    (0, swagger_1.ApiBearerAuth)('JWT-auth'),
    (0, swagger_1.ApiOperation)({ summary: 'Restore soft-deleted session (Super Admin only)' }),
    (0, swagger_1.ApiParam)({ name: 'id', description: 'Session ID' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Session restored successfully',
        schema: {
            example: {
                success: true,
                data: {
                    _id: '507f1f77bcf86cd799439011',
                    title: { 'pt-BR': 'Sessão Restaurada', en: 'Restored Session' },
                    deletedAt: null,
                },
            },
        },
    }),
    (0, swagger_1.ApiResponse)({ status: 401, description: 'Unauthorized' }),
    (0, swagger_1.ApiResponse)({ status: 403, description: 'Forbidden' }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Session not found' }),
    __param(0, (0, common_1.Param)('id')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], SessionsController.prototype, "restore", null);
exports.SessionsController = SessionsController = __decorate([
    (0, swagger_1.ApiTags)('Sessions'),
    (0, common_1.Controller)('sessions'),
    __metadata("design:paramtypes", [sessions_service_1.SessionsService])
], SessionsController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,