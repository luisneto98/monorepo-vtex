{"file":"/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/system-config/system-config.service.ts","mappings":"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","names":[],"sources":["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/system-config/system-config.service.ts"],"sourcesContent":["import { Injectable, NotFoundException, ConflictException, Inject } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { Cache } from 'cache-manager';\nimport { CACHE_MANAGER } from '@nestjs/cache-manager';\nimport { SystemConfig, SystemConfigDocument } from './schemas/system-config.schema';\nimport { VisibilityAudit, VisibilityAuditDocument } from './schemas/visibility-audit.schema';\nimport { UpdateSystemConfigDto } from './dto/update-config.dto';\nimport { UpdateSectionVisibilityDto } from './dto/section-visibility.dto';\nimport type { SectionName } from '@vtexday26/shared';\n\n@Injectable()\nexport class SystemConfigService {\n  private readonly CACHE_KEY = 'system-config';\n  private readonly CACHE_TTL = 60000; // 1 minute in milliseconds\n\n  constructor(\n    @InjectModel(SystemConfig.name)\n    private systemConfigModel: Model<SystemConfigDocument>,\n    @InjectModel(VisibilityAudit.name)\n    private visibilityAuditModel: Model<VisibilityAuditDocument>,\n    @Inject(CACHE_MANAGER) private cacheManager: Cache,\n  ) {}\n\n  async getConfig(): Promise<SystemConfig> {\n    // Try to get from cache first\n    const cached = await this.cacheManager.get<SystemConfig>(this.CACHE_KEY);\n    if (cached) {\n      return cached;\n    }\n\n    // Get from database\n    const config = await this.systemConfigModel.findOne().exec();\n\n    // If no config exists, create default one\n    if (!config) {\n      const newConfig = await this.createDefaultConfig();\n      // Cache the result\n      await this.cacheManager.set(this.CACHE_KEY, newConfig, this.CACHE_TTL);\n      return newConfig.toObject() as SystemConfig;\n    }\n\n    // Cache the result\n    await this.cacheManager.set(this.CACHE_KEY, config, this.CACHE_TTL);\n\n    return config.toObject() as SystemConfig;\n  }\n\n  async getSectionVisibility(section: SectionName): Promise<any> {\n    const config = await this.getConfig();\n    return config.sections[section];\n  }\n\n  async updateConfig(\n    updateDto: UpdateSystemConfigDto,\n    userId: string,\n    ipAddress?: string,\n  ): Promise<SystemConfig> {\n    const config = await this.systemConfigModel.findOne().exec();\n\n    if (!config) {\n      throw new NotFoundException('System configuration not found');\n    }\n\n    // Version check for optimistic locking\n    if (updateDto.version && config.version !== updateDto.version) {\n      throw new ConflictException('Configuration has been modified by another user');\n    }\n\n    // Process section updates and create audit logs\n    if (updateDto.sections) {\n      for (const [section, sectionUpdate] of Object.entries(updateDto.sections)) {\n        if (sectionUpdate) {\n          const previousState = config.sections[section as SectionName];\n          const newState: any = {\n            ...previousState,\n            ...sectionUpdate,\n            lastChanged: new Date(),\n            changedBy: userId,\n          };\n\n          // Convert scheduled activation date if present\n          if (sectionUpdate.scheduledActivation) {\n            newState.scheduledActivation = {\n              dateTime: new Date(sectionUpdate.scheduledActivation.dateTime),\n              timezone: sectionUpdate.scheduledActivation.timezone,\n            };\n          }\n\n          // Create audit log entry\n          await this.createAuditLog(\n            config._id.toString(),\n            section,\n            previousState,\n            newState,\n            userId,\n            sectionUpdate.changeReason,\n            ipAddress,\n          );\n\n          // Update the section\n          config.sections[section as SectionName] = newState;\n        }\n      }\n    }\n\n    // Update metadata\n    config.lastModifiedBy = userId;\n    config.version = config.version + 1;\n\n    // Save changes\n    const updatedConfig = await config.save();\n\n    // Invalidate cache\n    await this.cacheManager.del(this.CACHE_KEY);\n\n    return updatedConfig;\n  }\n\n  async updateSection(\n    section: SectionName,\n    updateDto: UpdateSectionVisibilityDto,\n    userId: string,\n    ipAddress?: string,\n  ): Promise<SystemConfig> {\n    const config = await this.systemConfigModel.findOne().exec();\n\n    if (!config) {\n      throw new NotFoundException('System configuration not found');\n    }\n\n    const previousState = config.sections[section];\n    const newState: any = {\n      ...previousState,\n      ...updateDto,\n      lastChanged: new Date(),\n      changedBy: userId,\n    };\n\n    // Convert scheduled activation date if present\n    if (updateDto.scheduledActivation) {\n      newState.scheduledActivation = {\n        dateTime: new Date(updateDto.scheduledActivation.dateTime),\n        timezone: updateDto.scheduledActivation.timezone,\n      };\n    }\n\n    // Create audit log entry\n    await this.createAuditLog(\n      config._id.toString(),\n      section,\n      previousState,\n      newState,\n      userId,\n      updateDto.changeReason,\n      ipAddress,\n    );\n\n    // Update the section\n    config.sections[section] = newState;\n    config.lastModifiedBy = userId;\n    config.version = config.version + 1;\n\n    // Save changes\n    const updatedConfig = await config.save();\n\n    // Invalidate cache\n    await this.cacheManager.del(this.CACHE_KEY);\n\n    return updatedConfig;\n  }\n\n  async getAuditLogs(\n    page = 1,\n    limit = 20,\n    section?: string,\n  ): Promise<{\n    data: VisibilityAudit[];\n    total: number;\n    page: number;\n    limit: number;\n    totalPages: number;\n  }> {\n    const query = section ? { section } : {};\n    const skip = (page - 1) * limit;\n\n    const [data, total] = await Promise.all([\n      this.visibilityAuditModel.find(query).sort({ createdAt: -1 }).skip(skip).limit(limit).exec(),\n      this.visibilityAuditModel.countDocuments(query).exec(),\n    ]);\n\n    return {\n      data,\n      total,\n      page,\n      limit,\n      totalPages: Math.ceil(total / limit),\n    };\n  }\n\n  async getScheduledChanges(): Promise<any[]> {\n    const config = await this.getConfig();\n    const scheduledChanges = [];\n\n    for (const [section, visibility] of Object.entries(config.sections)) {\n      if (visibility.scheduledActivation) {\n        const scheduledTime = new Date(visibility.scheduledActivation.dateTime);\n        if (scheduledTime > new Date()) {\n          scheduledChanges.push({\n            section,\n            scheduledTime: visibility.scheduledActivation.dateTime,\n            timezone: visibility.scheduledActivation.timezone,\n            willBeVisible: !visibility.isVisible,\n          });\n        }\n      }\n    }\n\n    return scheduledChanges;\n  }\n\n  async applyScheduledChanges(): Promise<void> {\n    const config = await this.systemConfigModel.findOne().exec();\n    if (!config) return;\n\n    const now = new Date();\n    let hasChanges = false;\n\n    for (const [section, visibility] of Object.entries(config.sections)) {\n      if (visibility.scheduledActivation) {\n        const scheduledTime = new Date(visibility.scheduledActivation.dateTime);\n        if (scheduledTime <= now) {\n          // Apply the scheduled change\n          visibility.isVisible = !visibility.isVisible;\n          visibility.scheduledActivation = undefined;\n          visibility.lastChanged = now;\n          visibility.changedBy = 'system-scheduler';\n\n          // Create audit log\n          await this.createAuditLog(\n            config._id.toString(),\n            section,\n            { ...visibility, isVisible: !visibility.isVisible },\n            visibility,\n            'system-scheduler',\n            'Scheduled activation triggered',\n          );\n\n          hasChanges = true;\n        }\n      }\n    }\n\n    if (hasChanges) {\n      config.lastModifiedBy = 'system-scheduler';\n      config.version = config.version + 1;\n      await config.save();\n\n      // Invalidate cache\n      await this.cacheManager.del(this.CACHE_KEY);\n    }\n  }\n\n  private async createDefaultConfig(): Promise<SystemConfigDocument> {\n    const defaultSection = {\n      isVisible: true,\n      lastChanged: new Date(),\n      changedBy: 'system',\n    };\n\n    const config = new this.systemConfigModel({\n      sections: {\n        speakers: { ...defaultSection },\n        sponsors: { ...defaultSection },\n        sessions: { ...defaultSection },\n        faq: { ...defaultSection },\n        registration: { ...defaultSection },\n        schedule: { ...defaultSection },\n      },\n      lastModifiedBy: 'system',\n      version: 1,\n    });\n\n    return config.save();\n  }\n\n  private async createAuditLog(\n    configId: string,\n    section: string,\n    previousState: any,\n    newState: any,\n    changedBy: string,\n    changeReason?: string,\n    ipAddress?: string,\n  ): Promise<VisibilityAuditDocument> {\n    const auditLog = new this.visibilityAuditModel({\n      configId,\n      section,\n      previousState,\n      newState,\n      changedBy,\n      changeReason,\n      ipAddress,\n    });\n\n    return auditLog.save();\n  }\n\n  async cleanupAuditLogs(cutoffDate: Date): Promise<number> {\n    const result = await this.visibilityAuditModel\n      .deleteMany({\n        createdAt: { $lt: cutoffDate },\n      })\n      .exec();\n\n    return result.deletedCount || 0;\n  }\n}\n"],"version":3}