29a5738e9b772e4a004df941c17aaf7e
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SystemConfigService = void 0;
const common_1 = require("@nestjs/common");
const mongoose_1 = require("@nestjs/mongoose");
const mongoose_2 = require("mongoose");
const cache_manager_1 = require("@nestjs/cache-manager");
const system_config_schema_1 = require("./schemas/system-config.schema");
const visibility_audit_schema_1 = require("./schemas/visibility-audit.schema");
let SystemConfigService = class SystemConfigService {
    systemConfigModel;
    visibilityAuditModel;
    cacheManager;
    CACHE_KEY = 'system-config';
    CACHE_TTL = 60000; // 1 minute in milliseconds
    constructor(systemConfigModel, visibilityAuditModel, cacheManager) {
        this.systemConfigModel = systemConfigModel;
        this.visibilityAuditModel = visibilityAuditModel;
        this.cacheManager = cacheManager;
    }
    async getConfig() {
        // Try to get from cache first
        const cached = await this.cacheManager.get(this.CACHE_KEY);
        if (cached) {
            return cached;
        }
        // Get from database
        const config = await this.systemConfigModel.findOne().exec();
        // If no config exists, create default one
        if (!config) {
            const newConfig = await this.createDefaultConfig();
            // Cache the result
            await this.cacheManager.set(this.CACHE_KEY, newConfig, this.CACHE_TTL);
            return newConfig.toObject();
        }
        // Cache the result
        await this.cacheManager.set(this.CACHE_KEY, config, this.CACHE_TTL);
        return config.toObject();
    }
    async getSectionVisibility(section) {
        const config = await this.getConfig();
        return config.sections[section];
    }
    async updateConfig(updateDto, userId, ipAddress) {
        const config = await this.systemConfigModel.findOne().exec();
        if (!config) {
            throw new common_1.NotFoundException('System configuration not found');
        }
        // Version check for optimistic locking
        if (updateDto.version && config.version !== updateDto.version) {
            throw new common_1.ConflictException('Configuration has been modified by another user');
        }
        // Process section updates and create audit logs
        if (updateDto.sections) {
            for (const [section, sectionUpdate] of Object.entries(updateDto.sections)) {
                if (sectionUpdate) {
                    const previousState = config.sections[section];
                    const newState = {
                        ...previousState,
                        ...sectionUpdate,
                        lastChanged: new Date(),
                        changedBy: userId,
                    };
                    // Convert scheduled activation date if present
                    if (sectionUpdate.scheduledActivation) {
                        newState.scheduledActivation = {
                            dateTime: new Date(sectionUpdate.scheduledActivation.dateTime),
                            timezone: sectionUpdate.scheduledActivation.timezone,
                        };
                    }
                    // Create audit log entry
                    await this.createAuditLog(config._id.toString(), section, previousState, newState, userId, sectionUpdate.changeReason, ipAddress);
                    // Update the section
                    config.sections[section] = newState;
                }
            }
        }
        // Update metadata
        config.lastModifiedBy = userId;
        config.version = config.version + 1;
        // Save changes
        const updatedConfig = await config.save();
        // Invalidate cache
        await this.cacheManager.del(this.CACHE_KEY);
        return updatedConfig;
    }
    async updateSection(section, updateDto, userId, ipAddress) {
        const config = await this.systemConfigModel.findOne().exec();
        if (!config) {
            throw new common_1.NotFoundException('System configuration not found');
        }
        const previousState = config.sections[section];
        const newState = {
            ...previousState,
            ...updateDto,
            lastChanged: new Date(),
            changedBy: userId,
        };
        // Convert scheduled activation date if present
        if (updateDto.scheduledActivation) {
            newState.scheduledActivation = {
                dateTime: new Date(updateDto.scheduledActivation.dateTime),
                timezone: updateDto.scheduledActivation.timezone,
            };
        }
        // Create audit log entry
        await this.createAuditLog(config._id.toString(), section, previousState, newState, userId, updateDto.changeReason, ipAddress);
        // Update the section
        config.sections[section] = newState;
        config.lastModifiedBy = userId;
        config.version = config.version + 1;
        // Save changes
        const updatedConfig = await config.save();
        // Invalidate cache
        await this.cacheManager.del(this.CACHE_KEY);
        return updatedConfig;
    }
    async getAuditLogs(page = 1, limit = 20, section) {
        const query = section ? { section } : {};
        const skip = (page - 1) * limit;
        const [data, total] = await Promise.all([
            this.visibilityAuditModel.find(query).sort({ createdAt: -1 }).skip(skip).limit(limit).exec(),
            this.visibilityAuditModel.countDocuments(query).exec(),
        ]);
        return {
            data,
            total,
            page,
            limit,
            totalPages: Math.ceil(total / limit),
        };
    }
    async getScheduledChanges() {
        const config = await this.getConfig();
        const scheduledChanges = [];
        for (const [section, visibility] of Object.entries(config.sections)) {
            if (visibility.scheduledActivation) {
                const scheduledTime = new Date(visibility.scheduledActivation.dateTime);
                if (scheduledTime > new Date()) {
                    scheduledChanges.push({
                        section,
                        scheduledTime: visibility.scheduledActivation.dateTime,
                        timezone: visibility.scheduledActivation.timezone,
                        willBeVisible: !visibility.isVisible,
                    });
                }
            }
        }
        return scheduledChanges;
    }
    async applyScheduledChanges() {
        const config = await this.systemConfigModel.findOne().exec();
        if (!config)
            return;
        const now = new Date();
        let hasChanges = false;
        for (const [section, visibility] of Object.entries(config.sections)) {
            if (visibility.scheduledActivation) {
                const scheduledTime = new Date(visibility.scheduledActivation.dateTime);
                if (scheduledTime <= now) {
                    // Apply the scheduled change
                    visibility.isVisible = !visibility.isVisible;
                    visibility.scheduledActivation = undefined;
                    visibility.lastChanged = now;
                    visibility.changedBy = 'system-scheduler';
                    // Create audit log
                    await this.createAuditLog(config._id.toString(), section, { ...visibility, isVisible: !visibility.isVisible }, visibility, 'system-scheduler', 'Scheduled activation triggered');
                    hasChanges = true;
                }
            }
        }
        if (hasChanges) {
            config.lastModifiedBy = 'system-scheduler';
            config.version = config.version + 1;
            await config.save();
            // Invalidate cache
            await this.cacheManager.del(this.CACHE_KEY);
        }
    }
    async createDefaultConfig() {
        const defaultSection = {
            isVisible: true,
            lastChanged: new Date(),
            changedBy: 'system',
        };
        const config = new this.systemConfigModel({
            sections: {
                speakers: { ...defaultSection },
                sponsors: { ...defaultSection },
                sessions: { ...defaultSection },
                faq: { ...defaultSection },
                registration: { ...defaultSection },
                schedule: { ...defaultSection },
            },
            lastModifiedBy: 'system',
            version: 1,
        });
        return config.save();
    }
    async createAuditLog(configId, section, previousState, newState, changedBy, changeReason, ipAddress) {
        const auditLog = new this.visibilityAuditModel({
            configId,
            section,
            previousState,
            newState,
            changedBy,
            changeReason,
            ipAddress,
        });
        return auditLog.save();
    }
    async cleanupAuditLogs(cutoffDate) {
        const result = await this.visibilityAuditModel
            .deleteMany({
            createdAt: { $lt: cutoffDate },
        })
            .exec();
        return result.deletedCount || 0;
    }
};
exports.SystemConfigService = SystemConfigService;
exports.SystemConfigService = SystemConfigService = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, mongoose_1.InjectModel)(system_config_schema_1.SystemConfig.name)),
    __param(1, (0, mongoose_1.InjectModel)(visibility_audit_schema_1.VisibilityAudit.name)),
    __param(2, (0, common_1.Inject)(cache_manager_1.CACHE_MANAGER)),
    __metadata("design:paramtypes", [mongoose_2.Model,
        mongoose_2.Model, Object])
], SystemConfigService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,