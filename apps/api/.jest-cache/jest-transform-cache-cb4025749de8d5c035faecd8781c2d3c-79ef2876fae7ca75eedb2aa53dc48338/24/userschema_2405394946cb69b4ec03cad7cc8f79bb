455422571938d02dc69f505b196df16c
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserSchema = exports.User = void 0;
const mongoose_1 = require("@nestjs/mongoose");
const mongoose_2 = require("mongoose");
const user_types_1 = require("@shared/types/user.types");
let Profile = class Profile {
    name;
    phone;
    company;
    position;
    photoUrl;
    language;
};
__decorate([
    (0, mongoose_1.Prop)({
        required: true,
        minlength: 3,
        maxlength: 100,
        trim: true,
    }),
    __metadata("design:type", String)
], Profile.prototype, "name", void 0);
__decorate([
    (0, mongoose_1.Prop)({
        match: /^[+]?[0-9]{10,15}$/,
        trim: true,
    }),
    __metadata("design:type", String)
], Profile.prototype, "phone", void 0);
__decorate([
    (0, mongoose_1.Prop)({
        maxlength: 100,
        trim: true,
    }),
    __metadata("design:type", String)
], Profile.prototype, "company", void 0);
__decorate([
    (0, mongoose_1.Prop)({
        maxlength: 50,
        trim: true,
    }),
    __metadata("design:type", String)
], Profile.prototype, "position", void 0);
__decorate([
    (0, mongoose_1.Prop)({
        match: /^https?:\/\/.+/,
    }),
    __metadata("design:type", String)
], Profile.prototype, "photoUrl", void 0);
__decorate([
    (0, mongoose_1.Prop)({
        enum: ['pt-BR', 'en'],
        default: 'pt-BR',
    }),
    __metadata("design:type", String)
], Profile.prototype, "language", void 0);
Profile = __decorate([
    (0, mongoose_1.Schema)({ _id: false })
], Profile);
let Preferences = class Preferences {
    interests;
    notificationsEnabled;
    favoriteSessionIds;
};
__decorate([
    (0, mongoose_1.Prop)({
        type: [String],
        default: [],
    }),
    __metadata("design:type", Array)
], Preferences.prototype, "interests", void 0);
__decorate([
    (0, mongoose_1.Prop)({
        default: true,
    }),
    __metadata("design:type", Boolean)
], Preferences.prototype, "notificationsEnabled", void 0);
__decorate([
    (0, mongoose_1.Prop)({
        type: [{ type: mongoose_2.Schema.Types.ObjectId, ref: 'Session' }],
        default: [],
    }),
    __metadata("design:type", Array)
], Preferences.prototype, "favoriteSessionIds", void 0);
Preferences = __decorate([
    (0, mongoose_1.Schema)({ _id: false })
], Preferences);
let User = class User {
    email;
    password;
    role;
    profile;
    preferences;
    isActive;
    isValidated;
    lastLogin;
    refreshToken;
};
exports.User = User;
__decorate([
    (0, mongoose_1.Prop)({
        required: true,
        unique: true,
        lowercase: true,
        index: true,
        trim: true,
        match: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/,
    }),
    __metadata("design:type", String)
], User.prototype, "email", void 0);
__decorate([
    (0, mongoose_1.Prop)({
        required: true,
        select: false,
    }),
    __metadata("design:type", String)
], User.prototype, "password", void 0);
__decorate([
    (0, mongoose_1.Prop)({
        required: true,
        enum: Object.values(user_types_1.UserRole),
        index: true,
    }),
    __metadata("design:type", String)
], User.prototype, "role", void 0);
__decorate([
    (0, mongoose_1.Prop)({
        type: Profile,
        required: true,
    }),
    __metadata("design:type", Object)
], User.prototype, "profile", void 0);
__decorate([
    (0, mongoose_1.Prop)({
        type: Preferences,
        required: true,
        default: {},
    }),
    __metadata("design:type", Object)
], User.prototype, "preferences", void 0);
__decorate([
    (0, mongoose_1.Prop)({
        default: true,
    }),
    __metadata("design:type", Boolean)
], User.prototype, "isActive", void 0);
__decorate([
    (0, mongoose_1.Prop)({
        default: false,
        index: true,
    }),
    __metadata("design:type", Boolean)
], User.prototype, "isValidated", void 0);
__decorate([
    (0, mongoose_1.Prop)({
        type: Date,
    }),
    __metadata("design:type", Date)
], User.prototype, "lastLogin", void 0);
__decorate([
    (0, mongoose_1.Prop)({
        select: false,
    }),
    __metadata("design:type", String)
], User.prototype, "refreshToken", void 0);
exports.User = User = __decorate([
    (0, mongoose_1.Schema)({ timestamps: true, collection: 'User' })
], User);
exports.UserSchema = mongoose_1.SchemaFactory.createForClass(User);
// Indexes
exports.UserSchema.index({ email: 1 });
exports.UserSchema.index({ role: 1 });
exports.UserSchema.index({ isValidated: 1 });
exports.UserSchema.index({ 'profile.company': 1 });
exports.UserSchema.index({ isActive: 1 });
exports.UserSchema.index({ role: 1, isValidated: 1 });
// Pre-save middleware for data normalization
exports.UserSchema.pre('save', function (next) {
    if (this.email) {
        this.email = this.email.toLowerCase().trim();
    }
    if (this.profile?.name) {
        this.profile.name = this.profile.name.trim();
    }
    if (this.profile?.company) {
        this.profile.company = this.profile.company.trim();
    }
    if (this.profile?.position) {
        this.profile.position = this.profile.position.trim();
    }
    next();
});
// Virtual fields
exports.UserSchema.virtual('displayName').get(function () {
    return this.profile?.name || this.email.split('@')[0];
});
// Schema methods
exports.UserSchema.methods['toJSON'] = function () {
    const obj = this['toObject']();
    delete obj.password;
    delete obj.refreshToken;
    return obj;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,