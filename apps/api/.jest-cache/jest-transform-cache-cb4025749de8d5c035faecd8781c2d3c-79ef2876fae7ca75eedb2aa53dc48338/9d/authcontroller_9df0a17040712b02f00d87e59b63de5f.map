{"version":3,"names":["cov_1efwlb9kli","actualCoverage","common_1","s","require","swagger_1","auth_service_1","login_dto_1","register_dto_1","jwt_auth_guard_1","public_decorator_1","current_user_decorator_1","throttler_1","AuthController","authService","constructor","f","login","loginDto","response","authResult","setRefreshTokenCookie","refreshToken","result","refresh","request","extractRefreshTokenFromCookie","b","UnauthorizedException","refreshTokens","_","logout","user","sub","clearRefreshTokenCookie","getProfile","id","email","role","register","registerDto","__","cookieOptions","httpOnly","secure","process","env","sameSite","maxAge","path","cookie","expires","Date","cookies","exports","__decorate","Public","Throttle","default","limit","ttl","HttpCode","HttpStatus","OK","Post","ApiOperation","summary","ApiBody","type","LoginDto","examples","admin","value","password","description","regular","ApiResponse","status","schema","example","accessToken","statusCode","message","error","__param","Body","Res","passthrough","Object","Req","UseGuards","JwtAuthGuard","NO_CONTENT","ApiBearerAuth","CurrentUser","Get","RegisterDto","newUser","name","company","phone","ApiTags","Controller","AuthService"],"sources":["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/auth/auth.controller.ts"],"sourcesContent":["import {\n  Controller,\n  Post,\n  Body,\n  UseGuards,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Res,\n  Req,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiResponse, ApiBody, ApiBearerAuth } from '@nestjs/swagger';\nimport { Response, Request as ExpressRequest } from 'express';\nimport { AuthService } from './auth.service';\nimport { LoginDto } from './dto/login.dto';\nimport { RegisterDto } from './dto/register.dto';\nimport { JwtAuthGuard } from '@common/guards/jwt-auth.guard';\nimport { Public } from '@common/decorators/public.decorator';\nimport { CurrentUser } from '@common/decorators/current-user.decorator';\nimport { Throttle } from '@nestjs/throttler';\n\n@ApiTags('Authentication')\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @Public()\n  @Throttle({ default: { limit: 5, ttl: 60000 } }) // 5 requests per minute\n  @HttpCode(HttpStatus.OK)\n  @Post('login')\n  @ApiOperation({ summary: 'User login' })\n  @ApiBody({\n    type: LoginDto,\n    examples: {\n      admin: {\n        value: {\n          email: 'admin@vtexday.com',\n          password: 'SecurePassword123!',\n        },\n        description: 'Admin user login',\n      },\n      regular: {\n        value: {\n          email: 'user@example.com',\n          password: 'UserPassword456!',\n        },\n        description: 'Regular user login',\n      },\n    },\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Login successful',\n    schema: {\n      example: {\n        accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...',\n        user: {\n          id: '507f1f77bcf86cd799439011',\n          email: 'admin@vtexday.com',\n          role: 'admin',\n        },\n      },\n    },\n  })\n  @ApiResponse({\n    status: 401,\n    description: 'Invalid credentials',\n    schema: {\n      example: {\n        statusCode: 401,\n        message: 'Invalid credentials',\n        error: 'Unauthorized',\n      },\n    },\n  })\n  @ApiResponse({\n    status: 429,\n    description: 'Too many requests',\n    schema: {\n      example: {\n        statusCode: 429,\n        message: 'ThrottlerException: Too Many Requests',\n        error: 'Too Many Requests',\n      },\n    },\n  })\n  async login(@Body() loginDto: LoginDto, @Res({ passthrough: true }) response: Response) {\n    const authResult = await this.authService.login(loginDto);\n\n    // Set refresh token in HttpOnly cookie\n    this.setRefreshTokenCookie(response, authResult.refreshToken);\n\n    // Return auth response without refresh token in body\n    const { refreshToken, ...result } = authResult;\n    return result;\n  }\n\n  @Public()\n  @Throttle({ default: { limit: 5, ttl: 60000 } }) // 5 requests per minute\n  @HttpCode(HttpStatus.OK)\n  @Post('refresh')\n  @ApiOperation({ summary: 'Refresh access token using refresh token from cookie' })\n  @ApiResponse({\n    status: 200,\n    description: 'Token refreshed successfully',\n    schema: {\n      example: {\n        accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...',\n        user: {\n          id: '507f1f77bcf86cd799439011',\n          email: 'admin@vtexday.com',\n          role: 'admin',\n        },\n      },\n    },\n  })\n  @ApiResponse({\n    status: 401,\n    description: 'Invalid or expired refresh token',\n    schema: {\n      example: {\n        statusCode: 401,\n        message: 'Invalid or expired refresh token',\n        error: 'Unauthorized',\n      },\n    },\n  })\n  async refresh(@Req() request: ExpressRequest, @Res({ passthrough: true }) response: Response) {\n    const refreshToken = this.extractRefreshTokenFromCookie(request);\n\n    if (!refreshToken) {\n      throw new UnauthorizedException('Refresh token not provided');\n    }\n\n    const authResult = await this.authService.refreshTokens(refreshToken);\n\n    // Set new refresh token in HttpOnly cookie\n    this.setRefreshTokenCookie(response, authResult.refreshToken);\n\n    // Return auth response without refresh token in body\n    const { refreshToken: _, ...result } = authResult;\n    return result;\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @HttpCode(HttpStatus.NO_CONTENT)\n  @Post('logout')\n  @ApiBearerAuth('JWT-auth')\n  @ApiOperation({ summary: 'Logout user and invalidate tokens' })\n  @ApiResponse({\n    status: 204,\n    description: 'Logout successful',\n  })\n  @ApiResponse({\n    status: 401,\n    description: 'Unauthorized - Invalid or missing JWT token',\n  })\n  async logout(@CurrentUser() user: any, @Res({ passthrough: true }) response: Response) {\n    await this.authService.logout(user.sub);\n\n    // Clear refresh token cookie\n    this.clearRefreshTokenCookie(response);\n\n    return;\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Get('profile')\n  @ApiBearerAuth('JWT-auth')\n  @ApiOperation({ summary: 'Get current user profile' })\n  @ApiResponse({\n    status: 200,\n    description: 'User profile retrieved successfully',\n    schema: {\n      example: {\n        id: '507f1f77bcf86cd799439011',\n        email: 'admin@vtexday.com',\n        role: 'admin',\n      },\n    },\n  })\n  @ApiResponse({\n    status: 401,\n    description: 'Unauthorized - Invalid or missing JWT token',\n  })\n  getProfile(@CurrentUser() user: any) {\n    return {\n      id: user.sub,\n      email: user.email,\n      role: user.role,\n    };\n  }\n\n  @Public()\n  @Post('register')\n  @ApiOperation({ summary: 'Register new user' })\n  @ApiBody({\n    type: RegisterDto,\n    examples: {\n      newUser: {\n        value: {\n          email: 'newuser@example.com',\n          password: 'SecurePassword123!',\n          name: 'Jo√£o Silva',\n          company: 'VTEX',\n          phone: '+5511999999999',\n        },\n        description: 'New user registration',\n      },\n    },\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'User registered successfully',\n    schema: {\n      example: {\n        accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...',\n        user: {\n          id: '507f1f77bcf86cd799439011',\n          email: 'newuser@example.com',\n          role: 'user',\n        },\n      },\n    },\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Validation error or user already exists',\n    schema: {\n      example: {\n        statusCode: 400,\n        message: ['email must be an email', 'password is too weak'],\n        error: 'Bad Request',\n      },\n    },\n  })\n  @ApiResponse({\n    status: 409,\n    description: 'Email already registered',\n    schema: {\n      example: {\n        statusCode: 409,\n        message: 'Email already registered',\n        error: 'Conflict',\n      },\n    },\n  })\n  async register(@Body() registerDto: RegisterDto, @Res({ passthrough: true }) response: Response) {\n    const authResult = await this.authService.register(registerDto);\n\n    // Set refresh token in HttpOnly cookie\n    this.setRefreshTokenCookie(response, authResult.refreshToken);\n\n    // Return auth response without refresh token in body\n    const { refreshToken: __, ...result } = authResult;\n    return result;\n  }\n\n  private setRefreshTokenCookie(response: Response, refreshToken: string) {\n    const cookieOptions = {\n      httpOnly: true,\n      secure: process.env['NODE_ENV'] === 'production',\n      sameSite: 'strict' as const,\n      maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days\n      path: '/auth/refresh',\n    };\n\n    response.cookie('refreshToken', refreshToken, cookieOptions);\n  }\n\n  private clearRefreshTokenCookie(response: Response) {\n    response.cookie('refreshToken', '', {\n      httpOnly: true,\n      secure: process.env['NODE_ENV'] === 'production',\n      sameSite: 'strict' as const,\n      expires: new Date(0),\n      path: '/auth/refresh',\n    });\n  }\n\n  private extractRefreshTokenFromCookie(request: ExpressRequest): string | null {\n    return request.cookies?.['refreshToken'] || null;\n  }\n}\n"],"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","ignoreList":[]}