{"file":"/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/tests/integration/sponsors-upload.integration.spec.ts","mappings":"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","names":[],"sources":["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/tests/integration/sponsors-upload.integration.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { INestApplication, ValidationPipe } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { MongooseModule, getModelToken } from '@nestjs/mongoose';\nimport request from 'supertest';\nimport { JwtService } from '@nestjs/jwt';\nimport { ThrottlerModule, ThrottlerGuard } from '@nestjs/throttler';\nimport { SponsorsModule } from '../../src/modules/sponsors/sponsors.module';\nimport { AuthModule } from '../../src/modules/auth/auth.module';\nimport { StorageService } from '../../src/modules/storage/services/storage.service';\nimport { Sponsor } from '../../src/modules/sponsors/schemas/sponsor.schema';\nimport { SponsorTier } from '../../src/modules/sponsors/schemas/sponsor-tier.schema';\nimport { Model } from 'mongoose';\n\ndescribe('Sponsors Logo Upload Integration Tests', () => {\n  let app: INestApplication;\n  let jwtService: JwtService;\n  let authToken: string;\n  let producerToken: string;\n  let userToken: string;\n  let sponsorModel: Model<Sponsor>;\n  let sponsorTierModel: Model<SponsorTier>;\n  let testSponsorId: string;\n  let testTierId: string;\n\n  const testAdminUser = {\n    _id: '507f1f77bcf86cd799439020',\n    email: 'admin@vtexday.com',\n    role: 'super_admin',\n  };\n\n  const testProducerUser = {\n    _id: '507f1f77bcf86cd799439021',\n    email: 'producer@vtexday.com',\n    role: 'producer',\n  };\n\n  const testRegularUser = {\n    _id: '507f1f77bcf86cd799439022',\n    email: 'user@vtexday.com',\n    role: 'user',\n  };\n\n  // Mock StorageService\n  const mockStorageService = {\n    uploadFile: jest.fn().mockResolvedValue({\n      key: 'sponsor-logos/12345-67890.jpg',\n      url: 'https://test-bucket.s3.us-east-1.amazonaws.com/sponsor-logos/12345-67890.jpg',\n    }),\n  };\n\n  beforeAll(async () => {\n    const moduleFixture: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          envFilePath: '.env.test',\n          load: [\n            () => ({\n              jwt: {\n                secret: 'test-jwt-secret-key-for-integration-tests',\n                expiresIn: '1h',\n              },\n            }),\n          ],\n        }),\n        MongooseModule.forRoot(\n          process.env['MONGODB_TEST_URI'] ||\n            'mongodb://localhost:27017/vtex-day-test-sponsor-upload',\n        ),\n        ThrottlerModule.forRoot([\n          {\n            ttl: 60000,\n            limit: 10,\n          },\n        ]),\n        AuthModule,\n        SponsorsModule,\n      ],\n    })\n      .overrideProvider(StorageService)\n      .useValue(mockStorageService)\n      .overrideGuard(ThrottlerGuard)\n      .useValue({ canActivate: () => true }) // Disable throttling for tests\n      .compile();\n\n    app = moduleFixture.createNestApplication();\n    app.useGlobalPipes(new ValidationPipe({ whitelist: true, transform: true }));\n\n    jwtService = moduleFixture.get<JwtService>(JwtService);\n    sponsorModel = moduleFixture.get<Model<Sponsor>>(getModelToken(Sponsor.name));\n    sponsorTierModel = moduleFixture.get<Model<SponsorTier>>(getModelToken(SponsorTier.name));\n\n    // Generate auth tokens\n    authToken = jwtService.sign({\n      sub: testAdminUser._id,\n      email: testAdminUser.email,\n      role: testAdminUser.role,\n    });\n\n    producerToken = jwtService.sign({\n      sub: testProducerUser._id,\n      email: testProducerUser.email,\n      role: testProducerUser.role,\n    });\n\n    userToken = jwtService.sign({\n      sub: testRegularUser._id,\n      email: testRegularUser.email,\n      role: testRegularUser.role,\n    });\n\n    await app.init();\n\n    // Create a test sponsor tier\n    const tier = await sponsorTierModel.create({\n      name: 'Gold',\n      displayName: {\n        'pt-BR': 'Patrocinador Ouro',\n        en: 'Gold Sponsor',\n      },\n      order: 1,\n      benefits: {\n        'pt-BR': ['Benefício 1'],\n        en: ['Benefit 1'],\n      },\n    });\n    testTierId = tier._id.toString();\n\n    // Create a test sponsor\n    const sponsor = await sponsorModel.create({\n      name: 'Test Sponsor',\n      slug: 'test-sponsor',\n      description: {\n        'pt-BR': 'Descrição do patrocinador',\n        en: 'Sponsor description',\n      },\n      tier: testTierId,\n      website: 'https://testsponsor.com',\n      isVisible: true,\n      orderInTier: 1,\n    });\n\n    testSponsorId = sponsor._id.toString();\n  });\n\n  afterAll(async () => {\n    // Clean up test data\n    try {\n      if (sponsorModel) {\n        await sponsorModel.deleteMany({});\n      }\n      if (sponsorTierModel) {\n        await sponsorTierModel.deleteMany({});\n      }\n    } catch (error) {\n      // Ignore cleanup errors in test environment\n      console.log('Cleanup error (can be ignored in test environment):', error);\n    } finally {\n      if (app) {\n        await app.close();\n      }\n    }\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('POST /sponsors/:id/upload-logo', () => {\n    it('should successfully upload a sponsor logo as super admin', async () => {\n      // Create a mock JPEG file\n      const jpegBuffer = Buffer.concat([Buffer.from([0xff, 0xd8, 0xff]), Buffer.alloc(1000, 'a')]);\n\n      const response = await request(app.getHttpServer())\n        .post(`/sponsors/${testSponsorId}/upload-logo`)\n        .set('Authorization', `Bearer ${authToken}`)\n        .attach('file', jpegBuffer, 'test-logo.jpg')\n        .expect(201);\n\n      expect(response.body).toHaveProperty('success', true);\n      expect(response.body.data).toHaveProperty('logoUrl');\n      expect(response.body.data.logoUrl).toContain('sponsor-logos/');\n      expect(mockStorageService.uploadFile).toHaveBeenCalled();\n\n      // Verify sponsor was updated in database\n      const updatedSponsor = await sponsorModel.findById(testSponsorId);\n      expect(updatedSponsor?.logoUrl).toContain('sponsor-logos/');\n    });\n\n    it('should successfully upload a sponsor logo as producer', async () => {\n      const jpegBuffer = Buffer.concat([Buffer.from([0xff, 0xd8, 0xff]), Buffer.alloc(1000, 'a')]);\n\n      const response = await request(app.getHttpServer())\n        .post(`/sponsors/${testSponsorId}/upload-logo`)\n        .set('Authorization', `Bearer ${producerToken}`)\n        .attach('file', jpegBuffer, 'test-logo.jpg')\n        .expect(201);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data.logoUrl).toBeDefined();\n    });\n\n    it('should reject upload without authentication', async () => {\n      const jpegBuffer = Buffer.concat([Buffer.from([0xff, 0xd8, 0xff]), Buffer.alloc(1000, 'a')]);\n\n      await request(app.getHttpServer())\n        .post(`/sponsors/${testSponsorId}/upload-logo`)\n        .attach('file', jpegBuffer, 'test-logo.jpg')\n        .expect(401);\n\n      expect(mockStorageService.uploadFile).not.toHaveBeenCalled();\n    });\n\n    it('should reject upload with insufficient role (regular user)', async () => {\n      const jpegBuffer = Buffer.concat([Buffer.from([0xff, 0xd8, 0xff]), Buffer.alloc(1000, 'a')]);\n\n      await request(app.getHttpServer())\n        .post(`/sponsors/${testSponsorId}/upload-logo`)\n        .set('Authorization', `Bearer ${userToken}`)\n        .attach('file', jpegBuffer, 'test-logo.jpg')\n        .expect(403);\n\n      expect(mockStorageService.uploadFile).not.toHaveBeenCalled();\n    });\n\n    it('should reject upload without file', async () => {\n      const response = await request(app.getHttpServer())\n        .post(`/sponsors/${testSponsorId}/upload-logo`)\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(400);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.error).toContain('No file provided');\n    });\n\n    it('should reject upload for non-existent sponsor', async () => {\n      const jpegBuffer = Buffer.concat([Buffer.from([0xff, 0xd8, 0xff]), Buffer.alloc(1000, 'a')]);\n\n      const fakeId = '507f1f77bcf86cd799439999';\n\n      const response = await request(app.getHttpServer())\n        .post(`/sponsors/${fakeId}/upload-logo`)\n        .set('Authorization', `Bearer ${authToken}`)\n        .attach('file', jpegBuffer, 'test-logo.jpg')\n        .expect(404);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.error).toContain('not found');\n    });\n\n    it('should reject upload with invalid file type', async () => {\n      // Mock StorageService to throw validation error\n      mockStorageService.uploadFile.mockRejectedValueOnce(\n        new Error('Invalid file type. Only JPEG, PNG, WEBP files are allowed.'),\n      );\n\n      const pdfBuffer = Buffer.concat([\n        Buffer.from([0x25, 0x50, 0x44, 0x46]),\n        Buffer.alloc(1000, 'a'),\n      ]);\n\n      await request(app.getHttpServer())\n        .post(`/sponsors/${testSponsorId}/upload-logo`)\n        .set('Authorization', `Bearer ${authToken}`)\n        .attach('file', pdfBuffer, 'test.pdf')\n        .expect(500); // Will be 500 because StorageService throws generic Error, not BadRequestException\n\n      // Reset mock\n      mockStorageService.uploadFile.mockResolvedValue({\n        key: 'sponsor-logos/12345-67890.jpg',\n        url: 'https://test-bucket.s3.us-east-1.amazonaws.com/sponsor-logos/12345-67890.jpg',\n      });\n    });\n\n    it('should handle invalid sponsor ID format gracefully', async () => {\n      const jpegBuffer = Buffer.concat([Buffer.from([0xff, 0xd8, 0xff]), Buffer.alloc(1000, 'a')]);\n\n      await request(app.getHttpServer())\n        .post('/sponsors/invalid-id/upload-logo')\n        .set('Authorization', `Bearer ${authToken}`)\n        .attach('file', jpegBuffer, 'test-logo.jpg')\n        .expect(500); // MongoDB will throw on invalid ObjectId format\n    });\n  });\n\n  describe('File Upload Validation Edge Cases', () => {\n    it('should accept PNG files', async () => {\n      const pngBuffer = Buffer.concat([\n        Buffer.from([0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a]),\n        Buffer.alloc(1000, 'b'),\n      ]);\n\n      const response = await request(app.getHttpServer())\n        .post(`/sponsors/${testSponsorId}/upload-logo`)\n        .set('Authorization', `Bearer ${authToken}`)\n        .attach('file', pngBuffer, 'test-logo.png')\n        .expect(201);\n\n      expect(response.body.success).toBe(true);\n    });\n\n    it('should accept WebP files', async () => {\n      const webpBuffer = Buffer.concat([\n        Buffer.from([0x52, 0x49, 0x46, 0x46]),\n        Buffer.alloc(4, 0),\n        Buffer.from('WEBP', 'ascii'),\n        Buffer.alloc(1000, 'c'),\n      ]);\n\n      const response = await request(app.getHttpServer())\n        .post(`/sponsors/${testSponsorId}/upload-logo`)\n        .set('Authorization', `Bearer ${authToken}`)\n        .attach('file', webpBuffer, 'test-logo.webp')\n        .expect(201);\n\n      expect(response.body.success).toBe(true);\n    });\n\n    it('should update existing logoUrl when uploading new logo', async () => {\n      // First upload\n      const jpegBuffer1 = Buffer.concat([Buffer.from([0xff, 0xd8, 0xff]), Buffer.alloc(1000, 'a')]);\n\n      await request(app.getHttpServer())\n        .post(`/sponsors/${testSponsorId}/upload-logo`)\n        .set('Authorization', `Bearer ${authToken}`)\n        .attach('file', jpegBuffer1, 'logo1.jpg')\n        .expect(201);\n\n      const sponsor1 = await sponsorModel.findById(testSponsorId);\n      expect(sponsor1?.logoUrl).toBeDefined();\n\n      // Second upload (should replace)\n      mockStorageService.uploadFile.mockResolvedValueOnce({\n        key: 'sponsor-logos/new-12345.jpg',\n        url: 'https://test-bucket.s3.us-east-1.amazonaws.com/sponsor-logos/new-12345.jpg',\n      });\n\n      const jpegBuffer2 = Buffer.concat([Buffer.from([0xff, 0xd8, 0xff]), Buffer.alloc(2000, 'b')]);\n\n      await request(app.getHttpServer())\n        .post(`/sponsors/${testSponsorId}/upload-logo`)\n        .set('Authorization', `Bearer ${authToken}`)\n        .attach('file', jpegBuffer2, 'logo2.jpg')\n        .expect(201);\n\n      const sponsor2 = await sponsorModel.findById(testSponsorId);\n      const secondLogoUrl = sponsor2?.logoUrl;\n\n      expect(secondLogoUrl).toBeDefined();\n      expect(secondLogoUrl).toContain('sponsor-logos/new-12345.jpg');\n\n      // Reset mock\n      mockStorageService.uploadFile.mockResolvedValue({\n        key: 'sponsor-logos/12345-67890.jpg',\n        url: 'https://test-bucket.s3.us-east-1.amazonaws.com/sponsor-logos/12345-67890.jpg',\n      });\n    });\n  });\n\n  describe('Security and Authorization Tests', () => {\n    it('should require valid JWT token', async () => {\n      const jpegBuffer = Buffer.concat([Buffer.from([0xff, 0xd8, 0xff]), Buffer.alloc(1000, 'a')]);\n\n      await request(app.getHttpServer())\n        .post(`/sponsors/${testSponsorId}/upload-logo`)\n        .set('Authorization', 'Bearer invalid-token')\n        .attach('file', jpegBuffer, 'test-logo.jpg')\n        .expect(401);\n    });\n\n    it('should require authorization header', async () => {\n      const jpegBuffer = Buffer.concat([Buffer.from([0xff, 0xd8, 0xff]), Buffer.alloc(1000, 'a')]);\n\n      await request(app.getHttpServer())\n        .post(`/sponsors/${testSponsorId}/upload-logo`)\n        .attach('file', jpegBuffer, 'test-logo.jpg')\n        .expect(401);\n    });\n\n    it('should enforce role-based access control (SUPER_ADMIN or PRODUCER only)', async () => {\n      const jpegBuffer = Buffer.concat([Buffer.from([0xff, 0xd8, 0xff]), Buffer.alloc(1000, 'a')]);\n\n      // Regular user should be forbidden\n      await request(app.getHttpServer())\n        .post(`/sponsors/${testSponsorId}/upload-logo`)\n        .set('Authorization', `Bearer ${userToken}`)\n        .attach('file', jpegBuffer, 'test-logo.jpg')\n        .expect(403);\n\n      // Producer should succeed\n      await request(app.getHttpServer())\n        .post(`/sponsors/${testSponsorId}/upload-logo`)\n        .set('Authorization', `Bearer ${producerToken}`)\n        .attach('file', jpegBuffer, 'test-logo.jpg')\n        .expect(201);\n\n      // Super admin should succeed\n      await request(app.getHttpServer())\n        .post(`/sponsors/${testSponsorId}/upload-logo`)\n        .set('Authorization', `Bearer ${authToken}`)\n        .attach('file', jpegBuffer, 'test-logo.jpg')\n        .expect(201);\n    });\n  });\n\n  describe('Database Integration Tests', () => {\n    it('should persist logoUrl to database after successful upload', async () => {\n      const jpegBuffer = Buffer.concat([Buffer.from([0xff, 0xd8, 0xff]), Buffer.alloc(1000, 'a')]);\n\n      mockStorageService.uploadFile.mockResolvedValueOnce({\n        key: 'sponsor-logos/test-persist.jpg',\n        url: 'https://test-bucket.s3.us-east-1.amazonaws.com/sponsor-logos/test-persist.jpg',\n      });\n\n      await request(app.getHttpServer())\n        .post(`/sponsors/${testSponsorId}/upload-logo`)\n        .set('Authorization', `Bearer ${authToken}`)\n        .attach('file', jpegBuffer, 'test-logo.jpg')\n        .expect(201);\n\n      const afterSponsor = await sponsorModel.findById(testSponsorId);\n      const afterLogoUrl = afterSponsor?.logoUrl;\n\n      expect(afterLogoUrl).toBeDefined();\n      expect(afterLogoUrl).toContain('test-persist.jpg');\n\n      // Reset mock\n      mockStorageService.uploadFile.mockResolvedValue({\n        key: 'sponsor-logos/12345-67890.jpg',\n        url: 'https://test-bucket.s3.us-east-1.amazonaws.com/sponsor-logos/12345-67890.jpg',\n      });\n    });\n\n    it('should not modify sponsor document if upload fails', async () => {\n      const jpegBuffer = Buffer.concat([Buffer.from([0xff, 0xd8, 0xff]), Buffer.alloc(1000, 'a')]);\n\n      const beforeSponsor = await sponsorModel.findById(testSponsorId);\n      const beforeLogoUrl = beforeSponsor?.logoUrl;\n\n      // Mock upload failure\n      mockStorageService.uploadFile.mockRejectedValueOnce(new Error('S3 upload failed'));\n\n      await request(app.getHttpServer())\n        .post(`/sponsors/${testSponsorId}/upload-logo`)\n        .set('Authorization', `Bearer ${authToken}`)\n        .attach('file', jpegBuffer, 'test-logo.jpg')\n        .expect(500);\n\n      const afterSponsor = await sponsorModel.findById(testSponsorId);\n      const afterLogoUrl = afterSponsor?.logoUrl;\n\n      // LogoUrl should remain unchanged\n      expect(afterLogoUrl).toBe(beforeLogoUrl);\n\n      // Reset mock\n      mockStorageService.uploadFile.mockResolvedValue({\n        key: 'sponsor-logos/12345-67890.jpg',\n        url: 'https://test-bucket.s3.us-east-1.amazonaws.com/sponsor-logos/12345-67890.jpg',\n      });\n    });\n  });\n});\n"],"version":3}