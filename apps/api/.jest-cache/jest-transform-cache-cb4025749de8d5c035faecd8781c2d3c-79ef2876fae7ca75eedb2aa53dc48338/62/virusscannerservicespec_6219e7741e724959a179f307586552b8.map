{"file":"/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/tests/unit/modules/storage/virus-scanner.service.spec.ts","mappings":"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","names":[],"sources":["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/tests/unit/modules/storage/virus-scanner.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { BadRequestException } from '@nestjs/common';\nimport { VirusScannerService } from '../../../../src/modules/storage/services/virus-scanner.service';\nimport { StorageConfigService } from '../../../../src/modules/storage/services/storage-config.service';\n\ndescribe('VirusScannerService', () => {\n  let service: VirusScannerService;\n\n  const mockStorageConfigService = {\n    isVirusScanningEnabled: jest.fn().mockReturnValue(true),\n    getClamAvHost: jest.fn().mockReturnValue(null),\n    getClamAvPort: jest.fn().mockReturnValue(3310),\n  };\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        VirusScannerService,\n        {\n          provide: StorageConfigService,\n          useValue: mockStorageConfigService,\n        },\n      ],\n    }).compile();\n\n    service = module.get<VirusScannerService>(VirusScannerService);\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('scanFile', () => {\n    it('should skip scanning when virus scanning is disabled', async () => {\n      mockStorageConfigService.isVirusScanningEnabled.mockReturnValueOnce(false);\n\n      const cleanFile = Buffer.alloc(1000, 'a');\n      const result = await service.scanFile(cleanFile, 'clean.jpg', 'image/jpeg');\n\n      expect(result).toBe(true);\n    });\n\n    it('should pass a clean JPEG file through heuristic scanning', async () => {\n      // JPEG magic bytes + clean content\n      const cleanJpeg = Buffer.concat([\n        Buffer.from([0xff, 0xd8, 0xff]),\n        Buffer.alloc(1000, 'a'),\n      ]);\n\n      const result = await service.scanFile(cleanJpeg, 'clean.jpg', 'image/jpeg');\n\n      expect(result).toBe(true);\n    });\n\n    it('should pass a clean PNG file through heuristic scanning', async () => {\n      // PNG magic bytes + clean content\n      const cleanPng = Buffer.concat([\n        Buffer.from([0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a]),\n        Buffer.alloc(1000, 'b'),\n      ]);\n\n      const result = await service.scanFile(cleanPng, 'clean.png', 'image/png');\n\n      expect(result).toBe(true);\n    });\n\n    it('should pass a clean PDF file through heuristic scanning', async () => {\n      // PDF magic bytes + clean content\n      const cleanPdf = Buffer.concat([\n        Buffer.from([0x25, 0x50, 0x44, 0x46]), // %PDF\n        Buffer.alloc(2000, 'c'),\n      ]);\n\n      const result = await service.scanFile(cleanPdf, 'clean.pdf', 'application/pdf');\n\n      expect(result).toBe(true);\n    });\n\n    it('should reject a file that is too small (<100 bytes)', async () => {\n      const tinyFile = Buffer.alloc(50, 'a');\n\n      await expect(service.scanFile(tinyFile, 'tiny.jpg', 'image/jpeg')).rejects.toThrow(\n        BadRequestException,\n      );\n      await expect(service.scanFile(tinyFile, 'tiny.jpg', 'image/jpeg')).rejects.toThrow(\n        'File tiny.jpg is too small to be valid',\n      );\n    });\n\n    it('should reject an image with embedded script tags', async () => {\n      const maliciousImage = Buffer.concat([\n        Buffer.from([0xff, 0xd8, 0xff]), // JPEG magic bytes\n        Buffer.from('<script>alert(\"xss\")</script>'),\n        Buffer.alloc(500, 'a'),\n      ]);\n\n      await expect(\n        service.scanFile(maliciousImage, 'malicious.jpg', 'image/jpeg'),\n      ).rejects.toThrow(BadRequestException);\n      await expect(\n        service.scanFile(maliciousImage, 'malicious.jpg', 'image/jpeg'),\n      ).rejects.toThrow('contains suspicious content and was rejected');\n    });\n\n    it('should reject an image with javascript: protocol', async () => {\n      const maliciousImage = Buffer.concat([\n        Buffer.from([0xff, 0xd8, 0xff]),\n        Buffer.from('javascript:void(0)'),\n        Buffer.alloc(500, 'a'),\n      ]);\n\n      await expect(\n        service.scanFile(maliciousImage, 'malicious.jpg', 'image/jpeg'),\n      ).rejects.toThrow(BadRequestException);\n    });\n\n    it('should reject an image with onerror= attribute', async () => {\n      const maliciousImage = Buffer.concat([\n        Buffer.from([0xff, 0xd8, 0xff]),\n        Buffer.from('<img onerror=\"alert(1)\">'),\n        Buffer.alloc(500, 'a'),\n      ]);\n\n      await expect(\n        service.scanFile(maliciousImage, 'malicious.jpg', 'image/jpeg'),\n      ).rejects.toThrow(BadRequestException);\n    });\n\n    it('should reject an image with onload= attribute', async () => {\n      const maliciousImage = Buffer.concat([\n        Buffer.from([0xff, 0xd8, 0xff]),\n        Buffer.from('<body onload=\"evil()\">'),\n        Buffer.alloc(500, 'a'),\n      ]);\n\n      await expect(\n        service.scanFile(maliciousImage, 'malicious.jpg', 'image/jpeg'),\n      ).rejects.toThrow(BadRequestException);\n    });\n\n    it('should reject an image with iframe tag', async () => {\n      const maliciousImage = Buffer.concat([\n        Buffer.from([0xff, 0xd8, 0xff]),\n        Buffer.from('<iframe src=\"evil.com\"></iframe>'),\n        Buffer.alloc(500, 'a'),\n      ]);\n\n      await expect(\n        service.scanFile(maliciousImage, 'malicious.jpg', 'image/jpeg'),\n      ).rejects.toThrow(BadRequestException);\n    });\n\n    it('should reject an image with object tag', async () => {\n      const maliciousImage = Buffer.concat([\n        Buffer.from([0xff, 0xd8, 0xff]),\n        Buffer.from('<object data=\"evil.swf\"></object>'),\n        Buffer.alloc(500, 'a'),\n      ]);\n\n      await expect(\n        service.scanFile(maliciousImage, 'malicious.jpg', 'image/jpeg'),\n      ).rejects.toThrow(BadRequestException);\n    });\n\n    it('should reject an image with embed tag', async () => {\n      const maliciousImage = Buffer.concat([\n        Buffer.from([0xff, 0xd8, 0xff]),\n        Buffer.from('<embed src=\"evil.swf\">'),\n        Buffer.alloc(500, 'a'),\n      ]);\n\n      await expect(\n        service.scanFile(maliciousImage, 'malicious.jpg', 'image/jpeg'),\n      ).rejects.toThrow(BadRequestException);\n    });\n\n    it('should reject an image with excessive metadata (>100 Exif markers)', async () => {\n      const exifRepeat = 'Exif'.repeat(101);\n      const maliciousImage = Buffer.concat([\n        Buffer.from([0xff, 0xd8, 0xff]),\n        Buffer.from(exifRepeat),\n        Buffer.alloc(500, 'a'),\n      ]);\n\n      await expect(\n        service.scanFile(maliciousImage, 'malicious.jpg', 'image/jpeg'),\n      ).rejects.toThrow(BadRequestException);\n      await expect(\n        service.scanFile(maliciousImage, 'malicious.jpg', 'image/jpeg'),\n      ).rejects.toThrow('contains suspicious metadata');\n    });\n\n    it('should reject a PDF that is too small (<1024 bytes)', async () => {\n      const tinyPdf = Buffer.concat([\n        Buffer.from([0x25, 0x50, 0x44, 0x46]),\n        Buffer.alloc(500, 'a'),\n      ]);\n\n      await expect(service.scanFile(tinyPdf, 'tiny.pdf', 'application/pdf')).rejects.toThrow(\n        BadRequestException,\n      );\n      await expect(service.scanFile(tinyPdf, 'tiny.pdf', 'application/pdf')).rejects.toThrow(\n        'File tiny.pdf is too small to be a valid PDF',\n      );\n    });\n\n    it('should reject a PDF with invalid magic bytes', async () => {\n      const fakePdf = Buffer.concat([\n        Buffer.from([0x00, 0x00, 0x00, 0x00]), // Wrong magic bytes\n        Buffer.alloc(2000, 'a'),\n      ]);\n\n      await expect(service.scanFile(fakePdf, 'fake.pdf', 'application/pdf')).rejects.toThrow(\n        BadRequestException,\n      );\n      await expect(service.scanFile(fakePdf, 'fake.pdf', 'application/pdf')).rejects.toThrow(\n        'File fake.pdf is not a valid PDF file',\n      );\n    });\n\n    it('should accept a PDF with /JavaScript (log warning but allow)', async () => {\n      const pdfWithJs = Buffer.concat([\n        Buffer.from([0x25, 0x50, 0x44, 0x46]),\n        Buffer.from('/JavaScript '),\n        Buffer.alloc(2000, 'a'),\n      ]);\n\n      // Should not throw, just log warning\n      const result = await service.scanFile(pdfWithJs, 'jswarning.pdf', 'application/pdf');\n      expect(result).toBe(true);\n    });\n\n    it('should reject a file with excessive obfuscation patterns', async () => {\n      const obfuscatedContent =\n        'eval(unescape(\"%74%68%69%73\")) ' +\n        'String.fromCharCode(97,98,99) ' +\n        'eval(unescape(\"%74%68%69%73\")) ' +\n        'String.fromCharCode(97,98,99) ' +\n        'eval(unescape(\"%74%68%69%73\")) ' +\n        'String.fromCharCode(97,98,99) ' +\n        'eval(unescape(\"%74%68%69%73\")) ' +\n        'String.fromCharCode(97,98,99) ' +\n        'eval(unescape(\"%74%68%69%73\")) ' +\n        'String.fromCharCode(97,98,99) ' +\n        'eval(unescape(\"%74%68%69%73\")) ' +\n        'String.fromCharCode(97,98,99) ';\n\n      const maliciousFile = Buffer.concat([\n        Buffer.from([0xff, 0xd8, 0xff]),\n        Buffer.from(obfuscatedContent),\n        Buffer.alloc(500, 'a'),\n      ]);\n\n      await expect(\n        service.scanFile(maliciousFile, 'obfuscated.jpg', 'image/jpeg'),\n      ).rejects.toThrow(BadRequestException);\n      await expect(\n        service.scanFile(maliciousFile, 'obfuscated.jpg', 'image/jpeg'),\n      ).rejects.toThrow('File failed security scan and was rejected');\n    });\n\n    it('should reject a file with excessive external references (>20)', async () => {\n      const externalRefs = 'http://example.com '.repeat(21);\n      const suspiciousFile = Buffer.concat([\n        Buffer.from([0xff, 0xd8, 0xff]),\n        Buffer.from(externalRefs),\n        Buffer.alloc(500, 'a'),\n      ]);\n\n      await expect(\n        service.scanFile(suspiciousFile, 'phishing.jpg', 'image/jpeg'),\n      ).rejects.toThrow(BadRequestException);\n      await expect(\n        service.scanFile(suspiciousFile, 'phishing.jpg', 'image/jpeg'),\n      ).rejects.toThrow('File contains too many external references');\n    });\n\n    it('should handle scanning error gracefully and fail-safe (reject)', async () => {\n      // Force an error by providing invalid data to trigger catch block\n      const invalidFile = Buffer.alloc(200, 'a');\n\n      // Mock a thrown error during scanning\n      jest\n        .spyOn(service as any, 'performBasicChecks')\n        .mockRejectedValueOnce(new Error('Unexpected scanning error'));\n\n      await expect(service.scanFile(invalidFile, 'error.jpg', 'image/jpeg')).rejects.toThrow(\n        BadRequestException,\n      );\n      await expect(service.scanFile(invalidFile, 'error.jpg', 'image/jpeg')).rejects.toThrow(\n        'File scanning failed. Please try again or contact support',\n      );\n    });\n  });\n\n  describe('ClamAV integration', () => {\n    it('should attempt ClamAV scan when host is configured', async () => {\n      mockStorageConfigService.getClamAvHost.mockReturnValueOnce('localhost');\n\n      // Create a mock net.Socket\n      const mockSocket = {\n        connect: jest.fn((_port, _host, callback) => callback()),\n        write: jest.fn(),\n        on: jest.fn((event, handler) => {\n          if (event === 'data') {\n            // Simulate clean response\n            setTimeout(() => handler(Buffer.from('stream: OK')), 10);\n          }\n        }),\n        setTimeout: jest.fn(),\n        destroy: jest.fn(),\n      };\n\n      // Mock require for net module\n      jest.doMock('net', () => ({\n        Socket: jest.fn(() => mockSocket),\n      }));\n\n      const cleanFile = Buffer.alloc(1000, 'a');\n\n      // Note: This test is complex because it requires mocking Node.js net module\n      // In a real scenario, you might want to test ClamAV separately or use integration tests\n      // For now, we test that the method is called correctly\n      const scanWithClamAVSpy = jest.spyOn(service as any, 'scanWithClamAV');\n\n      try {\n        await service.scanFile(cleanFile, 'clean.jpg', 'image/jpeg');\n      } catch (error) {\n        // Expected if ClamAV mock doesn't work perfectly\n      }\n\n      expect(scanWithClamAVSpy).toHaveBeenCalled();\n    });\n  });\n\n  describe('quarantineFile', () => {\n    it('should log quarantine event for suspicious file', async () => {\n      const loggerWarnSpy = jest.spyOn((service as any).logger, 'warn');\n\n      const suspiciousFile = Buffer.alloc(1000, 'x');\n      await service.quarantineFile(suspiciousFile, 'suspicious.exe', 'Detected malware');\n\n      expect(loggerWarnSpy).toHaveBeenCalledWith(\n        expect.stringContaining('Quarantining file suspicious.exe'),\n      );\n      expect(loggerWarnSpy).toHaveBeenCalledWith(\n        expect.objectContaining({\n          event: 'FILE_QUARANTINED',\n          filename: 'suspicious.exe',\n          reason: 'Detected malware',\n        }),\n      );\n    });\n  });\n\n  describe('heuristic scanning edge cases', () => {\n    it('should pass a file with few obfuscation patterns (<3 types)', async () => {\n      const slightlyObfuscated = Buffer.concat([\n        Buffer.from([0xff, 0xd8, 0xff]),\n        Buffer.from('eval(something) eval(another) String.fromCharCode(97)'),\n        Buffer.alloc(500, 'a'),\n      ]);\n\n      const result = await service.scanFile(\n        slightlyObfuscated,\n        'slight.jpg',\n        'image/jpeg',\n      );\n\n      expect(result).toBe(true);\n    });\n\n    it('should pass a file with moderate external references (<=20)', async () => {\n      const moderateRefs = 'http://example.com '.repeat(20);\n      const normalFile = Buffer.concat([\n        Buffer.from([0xff, 0xd8, 0xff]),\n        Buffer.from(moderateRefs),\n        Buffer.alloc(500, 'a'),\n      ]);\n\n      const result = await service.scanFile(normalFile, 'normal.jpg', 'image/jpeg');\n\n      expect(result).toBe(true);\n    });\n\n    it('should pass an image with reasonable metadata (<100 Exif markers)', async () => {\n      const exifRepeat = 'Exif'.repeat(50);\n      const normalImage = Buffer.concat([\n        Buffer.from([0xff, 0xd8, 0xff]),\n        Buffer.from(exifRepeat),\n        Buffer.alloc(500, 'a'),\n      ]);\n\n      const result = await service.scanFile(normalImage, 'normal.jpg', 'image/jpeg');\n\n      expect(result).toBe(true);\n    });\n  });\n});\n"],"version":3}