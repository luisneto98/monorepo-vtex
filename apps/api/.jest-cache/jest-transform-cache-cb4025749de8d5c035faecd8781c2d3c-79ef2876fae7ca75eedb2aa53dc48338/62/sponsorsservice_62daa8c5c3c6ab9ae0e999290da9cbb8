498c9ef2842c972bfd3567155d05c75b
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SponsorsService = void 0;
const common_1 = require("@nestjs/common");
const mongoose_1 = require("@nestjs/mongoose");
const mongoose_2 = require("mongoose");
const sponsor_schema_1 = require("./schemas/sponsor.schema");
const sponsor_tier_schema_1 = require("./schemas/sponsor-tier.schema");
const storage_service_1 = require("../storage/services/storage.service");
const storage_types_1 = require("../storage/types/storage.types");
let SponsorsService = class SponsorsService {
    sponsorModel;
    sponsorTierModel;
    storageService;
    constructor(sponsorModel, sponsorTierModel, storageService) {
        this.sponsorModel = sponsorModel;
        this.sponsorTierModel = sponsorTierModel;
        this.storageService = storageService;
    }
    // Sponsor CRUD
    async createSponsor(createSponsorDto) {
        const existingSponsor = await this.sponsorModel.findOne({
            $or: [
                { name: createSponsorDto.name, deletedAt: null },
                { slug: createSponsorDto.slug, deletedAt: null },
            ],
        });
        if (existingSponsor) {
            throw new common_1.ConflictException('Sponsor with this name or slug already exists');
        }
        // Verify tier exists
        const tier = await this.sponsorTierModel.findById(createSponsorDto.tier);
        if (!tier) {
            throw new common_1.NotFoundException(`Sponsor tier with ID ${createSponsorDto.tier} not found`);
        }
        const createdSponsor = new this.sponsorModel(createSponsorDto);
        return createdSponsor.save();
    }
    async findAllSponsors(filterDto) {
        const { page = 1, limit = 20, sort, search, tier, tags, isVisible, standLocation } = filterDto;
        const query = { deletedAt: null };
        if (search) {
            query.$or = [
                { name: { $regex: search, $options: 'i' } },
                { 'description.pt-BR': { $regex: search, $options: 'i' } },
                { 'description.en': { $regex: search, $options: 'i' } },
            ];
        }
        if (tier) {
            query.tier = tier;
        }
        if (tags && tags.length > 0) {
            query.tags = { $in: tags };
        }
        if (typeof isVisible !== 'undefined') {
            query.isVisible = isVisible;
        }
        if (standLocation) {
            query.standLocation = { $regex: standLocation, $options: 'i' };
        }
        const skip = (page - 1) * limit;
        let sortOptions = { 'tier.order': 1, orderInTier: 1 };
        if (sort) {
            sortOptions = {};
            const sortFields = sort.split(',');
            for (const field of sortFields) {
                if (field.startsWith('-')) {
                    sortOptions[field.substring(1)] = -1;
                }
                else {
                    sortOptions[field] = 1;
                }
            }
        }
        const [data, total] = await Promise.all([
            this.sponsorModel
                .find(query)
                .populate('tier')
                .sort(sortOptions)
                .skip(skip)
                .limit(limit)
                .exec(),
            this.sponsorModel.countDocuments(query),
        ]);
        return {
            success: true,
            data,
            metadata: {
                total,
                page,
                limit,
                hasNext: skip + data.length < total,
                hasPrev: page > 1,
            },
        };
    }
    async findSponsorById(id) {
        const sponsor = await this.sponsorModel
            .findOne({
            _id: id,
            deletedAt: null,
        })
            .populate('tier')
            .exec();
        if (!sponsor) {
            throw new common_1.NotFoundException(`Sponsor with ID ${id} not found`);
        }
        return sponsor;
    }
    async findSponsorsByTier() {
        const sponsors = await this.sponsorModel
            .find({
            isVisible: true,
            deletedAt: null,
        })
            .populate('tier')
            .sort({ 'tier.order': 1, orderInTier: 1 })
            .exec();
        const groupedSponsors = {};
        sponsors.forEach((sponsor) => {
            const tierName = sponsor.tier.name;
            if (!groupedSponsors[tierName]) {
                groupedSponsors[tierName] = [];
            }
            groupedSponsors[tierName].push(sponsor);
        });
        return groupedSponsors;
    }
    async updateSponsor(id, updateSponsorDto) {
        const sponsor = await this.sponsorModel.findOne({
            _id: id,
            deletedAt: null,
        });
        if (!sponsor) {
            throw new common_1.NotFoundException(`Sponsor with ID ${id} not found`);
        }
        // Check for name/slug conflicts if being updated
        if (updateSponsorDto.name || updateSponsorDto.slug) {
            const conflictQuery = {
                _id: { $ne: id },
                deletedAt: null,
                $or: [],
            };
            if (updateSponsorDto.name) {
                conflictQuery.$or.push({ name: updateSponsorDto.name });
            }
            if (updateSponsorDto.slug) {
                conflictQuery.$or.push({ slug: updateSponsorDto.slug });
            }
            const existingSponsor = await this.sponsorModel.findOne(conflictQuery);
            if (existingSponsor) {
                throw new common_1.ConflictException('Another sponsor with this name or slug already exists');
            }
        }
        // Verify tier exists if being updated
        if (updateSponsorDto.tier) {
            const tier = await this.sponsorTierModel.findById(updateSponsorDto.tier);
            if (!tier) {
                throw new common_1.NotFoundException(`Sponsor tier with ID ${updateSponsorDto.tier} not found`);
            }
        }
        // Use findByIdAndUpdate to avoid validation issues with required fields
        const updatedSponsor = await this.sponsorModel.findByIdAndUpdate(id, { $set: updateSponsorDto }, {
            new: true,
            runValidators: true,
            context: 'query'
        });
        return updatedSponsor;
    }
    async removeSponsor(id, reason, userId) {
        const sponsor = await this.sponsorModel.findOne({
            _id: id,
            deletedAt: null,
        });
        if (!sponsor) {
            throw new common_1.NotFoundException(`Sponsor with ID ${id} not found`);
        }
        sponsor.deletedAt = new Date();
        sponsor.deleteReason = reason;
        if (userId) {
            sponsor.deletedBy = userId;
        }
        await sponsor.save();
    }
    async restoreSponsor(id) {
        const sponsor = await this.sponsorModel.findOne({
            _id: id,
            deletedAt: { $ne: null },
        });
        if (!sponsor) {
            throw new common_1.NotFoundException(`Deleted sponsor with ID ${id} not found`);
        }
        sponsor.deletedAt = null;
        sponsor.deletedBy = null;
        sponsor.deleteReason = null;
        return sponsor.save();
    }
    // SponsorTier CRUD
    async createTier(createTierDto) {
        const existingTier = await this.sponsorTierModel.findOne({
            $or: [{ name: createTierDto.name }, { order: createTierDto.order }],
        });
        if (existingTier) {
            throw new common_1.ConflictException('Sponsor tier with this name or order already exists');
        }
        const createdTier = new this.sponsorTierModel(createTierDto);
        return createdTier.save();
    }
    async findAllTiers() {
        return this.sponsorTierModel.find().sort({ order: 1 }).exec();
    }
    async findTierById(id) {
        const tier = await this.sponsorTierModel.findById(id);
        if (!tier) {
            throw new common_1.NotFoundException(`Sponsor tier with ID ${id} not found`);
        }
        return tier;
    }
    async updateTier(id, updateTierDto) {
        const tier = await this.sponsorTierModel.findById(id);
        if (!tier) {
            throw new common_1.NotFoundException(`Sponsor tier with ID ${id} not found`);
        }
        // Check for conflicts if name or order is being updated
        if (updateTierDto.name || updateTierDto.order) {
            const conflictQuery = {
                _id: { $ne: id },
                $or: [],
            };
            if (updateTierDto.name) {
                conflictQuery.$or.push({ name: updateTierDto.name });
            }
            if (updateTierDto.order) {
                conflictQuery.$or.push({ order: updateTierDto.order });
            }
            const existingTier = await this.sponsorTierModel.findOne(conflictQuery);
            if (existingTier) {
                throw new common_1.ConflictException('Another tier with this name or order already exists');
            }
        }
        Object.assign(tier, updateTierDto);
        return tier.save();
    }
    async removeTier(id) {
        // Check if any sponsors are using this tier
        const sponsorsWithTier = await this.sponsorModel.findOne({
            tier: id,
            deletedAt: null,
        });
        if (sponsorsWithTier) {
            throw new common_1.ConflictException('Cannot delete tier: sponsors are still assigned to this tier');
        }
        const result = await this.sponsorTierModel.deleteOne({ _id: id });
        if (result.deletedCount === 0) {
            throw new common_1.NotFoundException(`Sponsor tier with ID ${id} not found`);
        }
    }
    async reorderTiers(tierIds) {
        // Validate all tiers exist
        const tiers = await this.sponsorTierModel.find({ _id: { $in: tierIds } });
        if (tiers.length !== tierIds.length) {
            throw new common_1.NotFoundException('One or more tier IDs not found');
        }
        // First, set all orders to negative values to avoid unique constraint conflicts
        const tempUpdatePromises = tierIds.map((tierId, index) => this.sponsorTierModel.updateOne({ _id: tierId }, { $set: { order: -(index + 1) } }));
        await Promise.all(tempUpdatePromises);
        // Then update to final positive values
        const finalUpdatePromises = tierIds.map((tierId, index) => this.sponsorTierModel.updateOne({ _id: tierId }, { $set: { order: index + 1 } }));
        await Promise.all(finalUpdatePromises);
    }
    async uploadLogo(id, file) {
        // Verify sponsor exists
        const sponsor = await this.sponsorModel.findOne({
            _id: id,
            deletedAt: null,
        });
        if (!sponsor) {
            throw new common_1.NotFoundException(`Sponsor with ID ${id} not found`);
        }
        // Upload file to S3
        const uploadResult = await this.storageService.uploadFile(file, storage_types_1.FileCategory.SPONSOR_LOGOS);
        // Update sponsor logoUrl
        sponsor.logoUrl = uploadResult.url;
        await sponsor.save();
        return uploadResult.url;
    }
    // Public methods for mobile app
    async findPublicSponsors(page = 1, limit = 20) {
        const query = { isVisible: true, deletedAt: null };
        const skip = (page - 1) * limit;
        const [data, total] = await Promise.all([
            this.sponsorModel
                .find(query)
                .populate('tier')
                .sort({ 'tier.order': 1, orderInTier: 1 })
                .skip(skip)
                .limit(limit)
                .select('-maxPosts -postsUsed -adminEmail -deletedAt -deletedBy -deleteReason -__v')
                .lean()
                .exec(),
            this.sponsorModel.countDocuments(query),
        ]);
        return {
            success: true,
            data,
            metadata: {
                total,
                page,
                limit,
                hasNext: skip + data.length < total,
                hasPrev: page > 1,
            },
        };
    }
    async findPublicSponsorsByTier() {
        const sponsors = await this.sponsorModel
            .find({
            isVisible: true,
            deletedAt: null,
        })
            .populate('tier')
            .sort({ 'tier.order': 1, orderInTier: 1 })
            .select('-maxPosts -postsUsed -adminEmail -deletedAt -deletedBy -deleteReason -__v')
            .lean()
            .exec();
        // Group sponsors by tier
        const tierMap = new Map();
        sponsors.forEach((sponsor) => {
            const tierId = sponsor.tier._id.toString();
            if (!tierMap.has(tierId)) {
                tierMap.set(tierId, {
                    tier: {
                        _id: sponsor.tier._id,
                        name: sponsor.tier.name,
                        displayName: sponsor.tier.displayName,
                        order: sponsor.tier.order,
                    },
                    sponsors: [],
                });
            }
            tierMap.get(tierId).sponsors.push(sponsor);
        });
        // Convert map to array and sort by tier order
        return Array.from(tierMap.values()).sort((a, b) => a.tier.order - b.tier.order);
    }
};
exports.SponsorsService = SponsorsService;
exports.SponsorsService = SponsorsService = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, mongoose_1.InjectModel)(sponsor_schema_1.Sponsor.name)),
    __param(1, (0, mongoose_1.InjectModel)(sponsor_tier_schema_1.SponsorTier.name)),
    __metadata("design:paramtypes", [mongoose_2.Model,
        mongoose_2.Model,
        storage_service_1.StorageService])
], SponsorsService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,