{"version":3,"names":["common_1","cov_21jttcfqpj","s","require","mongoose_1","mongoose_2","press_material_schema_1","file_upload_service_1","thumbnail_service_1","download_tracking_service_1","sanitization_util_1","PressMaterialsService","pressMaterialModel","fileUploadService","thumbnailService","downloadTrackingService","constructor","f","create","dto","file","uploadedBy","sanitizedDto","title","SanitizationUtil","sanitizeLocalizedString","description","b","undefined","tags","sanitizeTags","uploadResponse","uploadFile","type","thumbnailUrl","generateThumbnail","fileUrl","buffer","sharp","Promise","resolve","then","__importStar","metadata","default","width","height","error","console","pressMaterial","pt","en","es","status","accessLevel","downloadCount","save","findAll","query","page","limit","sortBy","sortOrder","search","filter","length","$in","sanitizedSearch","sanitizeText","replace","$or","$regex","$options","skip","sortOptions","items","total","all","find","sort","lean","countDocuments","totalPages","Math","ceil","findPublic","createdAt","select","findOne","id","material","findById","NotFoundException","update","_userId","Object","assign","remove","deleteFile","deleteOne","materialType","BadRequestException","getDownloadUrl","ipAddress","userAgent","userId","ForbiddenException","trackDownload","generateSignedUrl","getStatistics","getDownloadStatistics","getTopDownloaded","getTopDownloadedMaterials","exports","__decorate","Injectable","__param","InjectModel","PressMaterial","name","Model","FileUploadService","ThumbnailService","DownloadTrackingService"],"sources":["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/press-materials/press-materials.service.ts"],"sourcesContent":["import {\n  Injectable,\n  NotFoundException,\n  BadRequestException,\n  ForbiddenException,\n} from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, FilterQuery } from 'mongoose';\nimport { PressMaterial, PressMaterialDocument } from './schemas/press-material.schema';\nimport { FileUploadService } from './services/file-upload.service';\nimport { ThumbnailService } from './services/thumbnail.service';\nimport { DownloadTrackingService } from './services/download-tracking.service';\nimport { CreatePressMaterialDto } from './dto/create-press-material.dto';\nimport { UpdatePressMaterialDto } from './dto/update-press-material.dto';\nimport { QueryPressMaterialDto } from './dto/query-press-material.dto';\nimport { SanitizationUtil } from '../../common/utils/sanitization.util';\nimport { FileUploadResponse } from '@vtexday26/shared';\n\n@Injectable()\nexport class PressMaterialsService {\n  constructor(\n    @InjectModel(PressMaterial.name)\n    private pressMaterialModel: Model<PressMaterialDocument>,\n    private fileUploadService: FileUploadService,\n    private thumbnailService: ThumbnailService,\n    private downloadTrackingService: DownloadTrackingService,\n  ) {}\n\n  async create(\n    dto: CreatePressMaterialDto,\n    file: Express.Multer.File,\n    uploadedBy: string,\n  ): Promise<any> {\n    // Sanitize input data\n    const sanitizedDto = {\n      ...dto,\n      title: SanitizationUtil.sanitizeLocalizedString(dto.title),\n      description: dto.description\n        ? SanitizationUtil.sanitizeLocalizedString(dto.description)\n        : undefined,\n      tags: dto.tags ? SanitizationUtil.sanitizeTags(dto.tags) : undefined,\n    };\n\n    // Upload file to S3\n    const uploadResponse = await this.fileUploadService.uploadFile(\n      file,\n      sanitizedDto.type,\n      uploadedBy,\n    );\n\n    // Generate thumbnail if applicable\n    const thumbnailUrl = await this.thumbnailService.generateThumbnail(\n      file,\n      dto.type,\n      uploadResponse.fileUrl,\n    );\n\n    // Add dimensions for images\n    if (dto.type === 'photo' && file.buffer) {\n      try {\n        const sharp = await import('sharp');\n        const metadata = await sharp.default(file.buffer).metadata();\n        uploadResponse.metadata.width = metadata.width;\n        uploadResponse.metadata.height = metadata.height;\n      } catch (error) {\n        console.error('Error extracting image metadata:', error);\n      }\n    }\n\n    // Create press material document\n    const pressMaterial = new this.pressMaterialModel({\n      ...sanitizedDto,\n      fileUrl: uploadResponse.fileUrl,\n      thumbnailUrl,\n      metadata: uploadResponse.metadata,\n      uploadedBy,\n      description: sanitizedDto.description || {\n        pt: '',\n        en: '',\n        es: '',\n      },\n      tags: sanitizedDto.tags || [],\n      status: sanitizedDto.status || 'draft',\n      accessLevel: sanitizedDto.accessLevel || 'public',\n      downloadCount: 0,\n    });\n\n    return pressMaterial.save();\n  }\n\n  async findAll(query: QueryPressMaterialDto): Promise<{\n    items: any[];\n    total: number;\n    page: number;\n    totalPages: number;\n  }> {\n    const {\n      page = 1,\n      limit = 20,\n      sortBy = 'createdAt',\n      sortOrder = 'desc',\n      type,\n      status,\n      accessLevel,\n      tags,\n      search,\n    } = query;\n\n    const filter: FilterQuery<PressMaterialDocument> = {};\n\n    if (type) filter.type = type;\n    if (status) filter.status = status;\n    if (accessLevel) filter.accessLevel = accessLevel;\n    if (tags?.length) filter.tags = { $in: tags };\n    if (search) {\n      // Sanitize search input to prevent regex injection\n      const sanitizedSearch = SanitizationUtil.sanitizeText(search).replace(\n        /[.*+?^${}()|[\\]\\\\]/g,\n        '\\\\$&',\n      );\n      filter.$or = [\n        { 'title.pt': { $regex: sanitizedSearch, $options: 'i' } },\n        { 'title.en': { $regex: sanitizedSearch, $options: 'i' } },\n        { 'title.es': { $regex: sanitizedSearch, $options: 'i' } },\n        { tags: { $regex: sanitizedSearch, $options: 'i' } },\n      ];\n    }\n\n    const skip = (page - 1) * limit;\n    const sortOptions: Record<string, 1 | -1> = {\n      [sortBy]: sortOrder === 'asc' ? 1 : -1,\n    };\n\n    const [items, total] = await Promise.all([\n      this.pressMaterialModel.find(filter).sort(sortOptions).skip(skip).limit(limit).lean(),\n      this.pressMaterialModel.countDocuments(filter),\n    ]);\n\n    return {\n      items,\n      total,\n      page,\n      totalPages: Math.ceil(total / limit),\n    };\n  }\n\n  async findPublic(): Promise<any[]> {\n    return this.pressMaterialModel\n      .find({\n        status: 'published',\n        accessLevel: 'public',\n      })\n      .sort({ createdAt: -1 })\n      .select('-uploadedBy')\n      .lean();\n  }\n\n  async findOne(id: string): Promise<any> {\n    const material = await this.pressMaterialModel.findById(id).lean();\n    if (!material) {\n      throw new NotFoundException(`Press material with ID ${id} not found`);\n    }\n    return material;\n  }\n\n  async update(id: string, dto: UpdatePressMaterialDto, _userId: string): Promise<any> {\n    const material = await this.pressMaterialModel.findById(id);\n    if (!material) {\n      throw new NotFoundException(`Press material with ID ${id} not found`);\n    }\n\n    // Sanitize input data\n    const sanitizedDto = {\n      ...dto,\n      title: dto.title ? SanitizationUtil.sanitizeLocalizedString(dto.title) : undefined,\n      description: dto.description\n        ? SanitizationUtil.sanitizeLocalizedString(dto.description)\n        : undefined,\n      tags: dto.tags ? SanitizationUtil.sanitizeTags(dto.tags) : undefined,\n    };\n\n    // Update fields\n    Object.assign(material, sanitizedDto);\n\n    return material.save();\n  }\n\n  async remove(id: string): Promise<void> {\n    const material = await this.pressMaterialModel.findById(id);\n    if (!material) {\n      throw new NotFoundException(`Press material with ID ${id} not found`);\n    }\n\n    // Delete file from S3\n    try {\n      await this.fileUploadService.deleteFile(material.fileUrl);\n      if (material.thumbnailUrl) {\n        await this.fileUploadService.deleteFile(material.thumbnailUrl);\n      }\n    } catch (error) {\n      console.error('Error deleting files from S3:', error);\n    }\n\n    await material.deleteOne();\n  }\n\n  async uploadFile(\n    file: Express.Multer.File,\n    materialType: string,\n    uploadedBy: string,\n  ): Promise<FileUploadResponse> {\n    if (!materialType) {\n      throw new BadRequestException('Material type is required');\n    }\n\n    const uploadResponse = await this.fileUploadService.uploadFile(\n      file,\n      materialType as any,\n      uploadedBy,\n    );\n\n    const thumbnailUrl = await this.thumbnailService.generateThumbnail(\n      file,\n      materialType as any,\n      uploadResponse.fileUrl,\n    );\n\n    return {\n      ...uploadResponse,\n      thumbnailUrl,\n    };\n  }\n\n  async getDownloadUrl(\n    id: string,\n    ipAddress: string,\n    userAgent: string,\n    userId?: string,\n  ): Promise<string> {\n    const material = await this.pressMaterialModel.findById(id);\n    if (!material) {\n      throw new NotFoundException(`Press material with ID ${id} not found`);\n    }\n\n    // Check access level\n    if (material.accessLevel === 'restricted' && !userId) {\n      throw new ForbiddenException('Authentication required to download this material');\n    }\n\n    // Track download\n    await this.downloadTrackingService.trackDownload(id, ipAddress, userAgent, userId);\n\n    // Generate signed URL if restricted\n    if (material.accessLevel === 'restricted') {\n      return this.fileUploadService.generateSignedUrl(material.fileUrl);\n    }\n\n    return material.fileUrl;\n  }\n\n  async getStatistics(id: string): Promise<any> {\n    await this.findOne(id); // Validate material exists\n    return this.downloadTrackingService.getDownloadStatistics(id);\n  }\n\n  async getTopDownloaded(limit = 10): Promise<any[]> {\n    return this.downloadTrackingService.getTopDownloadedMaterials(limit);\n  }\n}\n"],"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","ignoreList":[]}