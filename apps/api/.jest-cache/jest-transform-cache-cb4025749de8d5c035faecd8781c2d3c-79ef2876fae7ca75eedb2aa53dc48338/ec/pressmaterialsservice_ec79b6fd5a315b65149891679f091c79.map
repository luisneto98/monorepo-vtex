{"file":"/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/press-materials/press-materials.service.ts","mappings":"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","names":[],"sources":["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/press-materials/press-materials.service.ts"],"sourcesContent":["import {\n  Injectable,\n  NotFoundException,\n  BadRequestException,\n  ForbiddenException,\n} from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, FilterQuery } from 'mongoose';\nimport { PressMaterial, PressMaterialDocument } from './schemas/press-material.schema';\nimport { FileUploadService } from './services/file-upload.service';\nimport { ThumbnailService } from './services/thumbnail.service';\nimport { DownloadTrackingService } from './services/download-tracking.service';\nimport { CreatePressMaterialDto } from './dto/create-press-material.dto';\nimport { UpdatePressMaterialDto } from './dto/update-press-material.dto';\nimport { QueryPressMaterialDto } from './dto/query-press-material.dto';\nimport { SanitizationUtil } from '../../common/utils/sanitization.util';\nimport { FileUploadResponse } from '@vtexday26/shared';\n\n@Injectable()\nexport class PressMaterialsService {\n  constructor(\n    @InjectModel(PressMaterial.name)\n    private pressMaterialModel: Model<PressMaterialDocument>,\n    private fileUploadService: FileUploadService,\n    private thumbnailService: ThumbnailService,\n    private downloadTrackingService: DownloadTrackingService,\n  ) {}\n\n  async create(\n    dto: CreatePressMaterialDto,\n    file: Express.Multer.File,\n    uploadedBy: string,\n  ): Promise<any> {\n    // Sanitize input data\n    const sanitizedDto = {\n      ...dto,\n      title: SanitizationUtil.sanitizeLocalizedString(dto.title),\n      description: dto.description\n        ? SanitizationUtil.sanitizeLocalizedString(dto.description)\n        : undefined,\n      tags: dto.tags ? SanitizationUtil.sanitizeTags(dto.tags) : undefined,\n    };\n\n    // Upload file to S3\n    const uploadResponse = await this.fileUploadService.uploadFile(\n      file,\n      sanitizedDto.type,\n      uploadedBy,\n    );\n\n    // Generate thumbnail if applicable\n    const thumbnailUrl = await this.thumbnailService.generateThumbnail(\n      file,\n      dto.type,\n      uploadResponse.fileUrl,\n    );\n\n    // Add dimensions for images\n    if (dto.type === 'photo' && file.buffer) {\n      try {\n        const sharp = await import('sharp');\n        const metadata = await sharp.default(file.buffer).metadata();\n        uploadResponse.metadata.width = metadata.width;\n        uploadResponse.metadata.height = metadata.height;\n      } catch (error) {\n        console.error('Error extracting image metadata:', error);\n      }\n    }\n\n    // Create press material document\n    const pressMaterial = new this.pressMaterialModel({\n      ...sanitizedDto,\n      fileUrl: uploadResponse.fileUrl,\n      thumbnailUrl,\n      metadata: uploadResponse.metadata,\n      uploadedBy,\n      description: sanitizedDto.description || {\n        pt: '',\n        en: '',\n        es: '',\n      },\n      tags: sanitizedDto.tags || [],\n      status: sanitizedDto.status || 'draft',\n      accessLevel: sanitizedDto.accessLevel || 'public',\n      downloadCount: 0,\n    });\n\n    return pressMaterial.save();\n  }\n\n  async findAll(query: QueryPressMaterialDto): Promise<{\n    items: any[];\n    total: number;\n    page: number;\n    totalPages: number;\n  }> {\n    const {\n      page = 1,\n      limit = 20,\n      sortBy = 'createdAt',\n      sortOrder = 'desc',\n      type,\n      status,\n      accessLevel,\n      tags,\n      search,\n    } = query;\n\n    const filter: FilterQuery<PressMaterialDocument> = {};\n\n    if (type) filter.type = type;\n    if (status) filter.status = status;\n    if (accessLevel) filter.accessLevel = accessLevel;\n    if (tags?.length) filter.tags = { $in: tags };\n    if (search) {\n      // Sanitize search input to prevent regex injection\n      const sanitizedSearch = SanitizationUtil.sanitizeText(search).replace(\n        /[.*+?^${}()|[\\]\\\\]/g,\n        '\\\\$&',\n      );\n      filter.$or = [\n        { 'title.pt': { $regex: sanitizedSearch, $options: 'i' } },\n        { 'title.en': { $regex: sanitizedSearch, $options: 'i' } },\n        { 'title.es': { $regex: sanitizedSearch, $options: 'i' } },\n        { tags: { $regex: sanitizedSearch, $options: 'i' } },\n      ];\n    }\n\n    const skip = (page - 1) * limit;\n    const sortOptions: Record<string, 1 | -1> = {\n      [sortBy]: sortOrder === 'asc' ? 1 : -1,\n    };\n\n    const [items, total] = await Promise.all([\n      this.pressMaterialModel.find(filter).sort(sortOptions).skip(skip).limit(limit).lean(),\n      this.pressMaterialModel.countDocuments(filter),\n    ]);\n\n    return {\n      items,\n      total,\n      page,\n      totalPages: Math.ceil(total / limit),\n    };\n  }\n\n  async findPublic(): Promise<any[]> {\n    return this.pressMaterialModel\n      .find({\n        status: 'published',\n        accessLevel: 'public',\n      })\n      .sort({ createdAt: -1 })\n      .select('-uploadedBy')\n      .lean();\n  }\n\n  async findOne(id: string): Promise<any> {\n    const material = await this.pressMaterialModel.findById(id).lean();\n    if (!material) {\n      throw new NotFoundException(`Press material with ID ${id} not found`);\n    }\n    return material;\n  }\n\n  async update(id: string, dto: UpdatePressMaterialDto, _userId: string): Promise<any> {\n    const material = await this.pressMaterialModel.findById(id);\n    if (!material) {\n      throw new NotFoundException(`Press material with ID ${id} not found`);\n    }\n\n    // Sanitize input data\n    const sanitizedDto = {\n      ...dto,\n      title: dto.title ? SanitizationUtil.sanitizeLocalizedString(dto.title) : undefined,\n      description: dto.description\n        ? SanitizationUtil.sanitizeLocalizedString(dto.description)\n        : undefined,\n      tags: dto.tags ? SanitizationUtil.sanitizeTags(dto.tags) : undefined,\n    };\n\n    // Update fields\n    Object.assign(material, sanitizedDto);\n\n    return material.save();\n  }\n\n  async remove(id: string): Promise<void> {\n    const material = await this.pressMaterialModel.findById(id);\n    if (!material) {\n      throw new NotFoundException(`Press material with ID ${id} not found`);\n    }\n\n    // Delete file from S3\n    try {\n      await this.fileUploadService.deleteFile(material.fileUrl);\n      if (material.thumbnailUrl) {\n        await this.fileUploadService.deleteFile(material.thumbnailUrl);\n      }\n    } catch (error) {\n      console.error('Error deleting files from S3:', error);\n    }\n\n    await material.deleteOne();\n  }\n\n  async uploadFile(\n    file: Express.Multer.File,\n    materialType: string,\n    uploadedBy: string,\n  ): Promise<FileUploadResponse> {\n    if (!materialType) {\n      throw new BadRequestException('Material type is required');\n    }\n\n    const uploadResponse = await this.fileUploadService.uploadFile(\n      file,\n      materialType as any,\n      uploadedBy,\n    );\n\n    const thumbnailUrl = await this.thumbnailService.generateThumbnail(\n      file,\n      materialType as any,\n      uploadResponse.fileUrl,\n    );\n\n    return {\n      ...uploadResponse,\n      thumbnailUrl,\n    };\n  }\n\n  async getDownloadUrl(\n    id: string,\n    ipAddress: string,\n    userAgent: string,\n    userId?: string,\n  ): Promise<string> {\n    const material = await this.pressMaterialModel.findById(id);\n    if (!material) {\n      throw new NotFoundException(`Press material with ID ${id} not found`);\n    }\n\n    // Check access level\n    if (material.accessLevel === 'restricted' && !userId) {\n      throw new ForbiddenException('Authentication required to download this material');\n    }\n\n    // Track download\n    await this.downloadTrackingService.trackDownload(id, ipAddress, userAgent, userId);\n\n    // Generate signed URL if restricted\n    if (material.accessLevel === 'restricted') {\n      return this.fileUploadService.generateSignedUrl(material.fileUrl);\n    }\n\n    return material.fileUrl;\n  }\n\n  async getStatistics(id: string): Promise<any> {\n    await this.findOne(id); // Validate material exists\n    return this.downloadTrackingService.getDownloadStatistics(id);\n  }\n\n  async getTopDownloaded(limit = 10): Promise<any[]> {\n    return this.downloadTrackingService.getTopDownloadedMaterials(limit);\n  }\n}\n"],"version":3}