{"file":"/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/tests/unit/database.connection.spec.ts","mappings":";;;;;AAAA,6CAAsD;AACtD,2CAA6D;AAC7D,gFAA4E;AAC5E,mFAA2D;AAE3D,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;IACnC,IAAI,MAAqB,CAAC;IAC1B,IAAI,aAA4B,CAAC;IAEjC,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,MAAM,GAAG,MAAM,cAAI,CAAC,mBAAmB,CAAC;YACtC,OAAO,EAAE;gBACP,qBAAY,CAAC,OAAO,CAAC;oBACnB,IAAI,EAAE,CAAC,uBAAa,CAAC;oBACrB,QAAQ,EAAE,IAAI;iBACf,CAAC;gBACF,gCAAc;aACf;SACF,CAAC,CAAC,OAAO,EAAE,CAAC;QAEb,aAAa,GAAG,MAAM,CAAC,GAAG,CAAgB,sBAAa,CAAC,CAAC;IAC3D,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,KAAK,IAAI,EAAE;QACnB,MAAM,MAAM,CAAC,KAAK,EAAE,CAAC;IACvB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oCAAoC,EAAE,GAAG,EAAE;QAC5C,MAAM,QAAQ,GAAG,aAAa,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QAC/C,MAAM,CAAC,QAAQ,CAAC,CAAC,WAAW,EAAE,CAAC;QAC/B,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,WAAW,EAAE,CAAC;QACnC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,CAAC;IACzC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wCAAwC,EAAE,GAAG,EAAE;QAChD,MAAM,KAAK,GAAG,aAAa,CAAC,GAAG,CAAS,cAAc,CAAC,CAAC;QACxD,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,uBAAuB,CAAC,CAAC;IACjD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kCAAkC,EAAE,GAAG,EAAE;QAC1C,MAAM,SAAS,GAAG,aAAa,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;QACxD,MAAM,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC3C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sCAAsC,EAAE,GAAG,EAAE;QAC9C,MAAM,SAAS,GAAG,aAAa,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;QACxD,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IACvC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/tests/unit/database.connection.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { DatabaseModule } from '../../src/modules/database/database.module';\nimport configuration from '../../src/config/configuration';\n\ndescribe('Database Connection', () => {\n  let module: TestingModule;\n  let configService: ConfigService;\n\n  beforeEach(async () => {\n    module = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          load: [configuration],\n          isGlobal: true,\n        }),\n        DatabaseModule,\n      ],\n    }).compile();\n\n    configService = module.get<ConfigService>(ConfigService);\n  });\n\n  afterEach(async () => {\n    await module.close();\n  });\n\n  it('should load database configuration', () => {\n    const dbConfig = configService.get('database');\n    expect(dbConfig).toBeDefined();\n    expect(dbConfig.uri).toBeDefined();\n    expect(dbConfig.options).toBeDefined();\n  });\n\n  it('should have correct MongoDB URI format', () => {\n    const dbUri = configService.get<string>('database.uri');\n    expect(dbUri).toMatch(/^mongodb(\\+srv)?:\\/\\//);\n  });\n\n  it('should have retry writes enabled', () => {\n    const dbOptions = configService.get('database.options');\n    expect(dbOptions.retryWrites).toBe(true);\n  });\n\n  it('should set write concern to majority', () => {\n    const dbOptions = configService.get('database.options');\n    expect(dbOptions.w).toBe('majority');\n  });\n});\n"],"version":3}