{"file":"/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/tests/unit/modules/storage/storage.service.spec.ts","mappings":"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","names":[],"sources":["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/tests/unit/modules/storage/storage.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { BadRequestException, InternalServerErrorException } from '@nestjs/common';\nimport { StorageService } from '../../../../src/modules/storage/services/storage.service';\nimport { StorageConfigService } from '../../../../src/modules/storage/services/storage-config.service';\nimport { VirusScannerService } from '../../../../src/modules/storage/services/virus-scanner.service';\nimport { FileCategory } from '../../../../src/modules/storage/types/storage.types';\nimport { S3Client, PutObjectCommand, GetObjectCommand, DeleteObjectCommand, HeadObjectCommand } from '@aws-sdk/client-s3';\nimport { getSignedUrl } from '@aws-sdk/s3-request-presigner';\nimport { Readable } from 'stream';\n\n// Mock AWS SDK\njest.mock('@aws-sdk/client-s3');\njest.mock('@aws-sdk/s3-request-presigner');\n\ndescribe('StorageService', () => {\n  let service: StorageService;\n  let virusScannerService: VirusScannerService;\n  let mockS3Send: jest.Mock;\n\n  const mockStorageConfigService = {\n    getAwsRegion: jest.fn().mockReturnValue('us-east-1'),\n    getAwsBucket: jest.fn().mockReturnValue('test-bucket'),\n    getAwsAccessKeyId: jest.fn().mockReturnValue('test-access-key'),\n    getAwsSecretAccessKey: jest.fn().mockReturnValue('test-secret-key'),\n  };\n\n  const mockVirusScannerService = {\n    scanFile: jest.fn().mockResolvedValue(undefined),\n  };\n\n  // Helper to create mock file\n  const createMockFile = (\n    buffer: Buffer,\n    mimetype: string,\n    size: number,\n    originalname = 'test.jpg',\n  ): Express.Multer.File => ({\n    buffer,\n    mimetype,\n    size,\n    originalname,\n    fieldname: 'file',\n    encoding: '7bit',\n    destination: '',\n    filename: '',\n    path: '',\n    stream: new Readable(),\n  });\n\n  beforeEach(async () => {\n    // Mock S3Client\n    mockS3Send = jest.fn().mockResolvedValue({});\n    (S3Client as jest.Mock).mockImplementation(() => ({\n      send: mockS3Send,\n    }));\n\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        StorageService,\n        {\n          provide: StorageConfigService,\n          useValue: mockStorageConfigService,\n        },\n        {\n          provide: VirusScannerService,\n          useValue: mockVirusScannerService,\n        },\n      ],\n    }).compile();\n\n    service = module.get<StorageService>(StorageService);\n    virusScannerService = module.get<VirusScannerService>(VirusScannerService);\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('uploadFile', () => {\n    it('should successfully upload a valid JPEG image', async () => {\n      // JPEG magic bytes: FF D8 FF\n      const jpegBuffer = Buffer.concat([\n        Buffer.from([0xff, 0xd8, 0xff]),\n        Buffer.alloc(100, 'a'),\n      ]);\n      const file = createMockFile(jpegBuffer, 'image/jpeg', jpegBuffer.length);\n\n      const result = await service.uploadFile(file, FileCategory.SPEAKER_PHOTOS);\n\n      expect(result).toHaveProperty('key');\n      expect(result).toHaveProperty('url');\n      expect(result.key).toContain('speaker-photos/');\n      expect(result.url).toContain('https://test-bucket.s3.us-east-1.amazonaws.com');\n      expect(virusScannerService.scanFile).toHaveBeenCalledWith(\n        file.buffer,\n        file.originalname,\n        file.mimetype,\n      );\n      expect(mockS3Send).toHaveBeenCalledWith(expect.any(PutObjectCommand));\n    });\n\n    it('should successfully upload a valid PNG image', async () => {\n      // PNG magic bytes: 89 50 4E 47 0D 0A 1A 0A\n      const pngBuffer = Buffer.concat([\n        Buffer.from([0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a]),\n        Buffer.alloc(100, 'b'),\n      ]);\n      const file = createMockFile(pngBuffer, 'image/png', pngBuffer.length, 'test.png');\n\n      const result = await service.uploadFile(file, FileCategory.SPEAKER_PHOTOS);\n\n      expect(result).toBeDefined();\n      expect(result.key).toContain('speaker-photos/');\n      expect(mockS3Send).toHaveBeenCalled();\n    });\n\n    it('should successfully upload a valid WebP image', async () => {\n      // WebP magic bytes: RIFF [4 bytes] WEBP\n      const webpBuffer = Buffer.concat([\n        Buffer.from([0x52, 0x49, 0x46, 0x46]), // RIFF\n        Buffer.alloc(4, 0), // File size placeholder\n        Buffer.from('WEBP', 'ascii'), // WEBP marker\n        Buffer.alloc(100, 'c'),\n      ]);\n      const file = createMockFile(webpBuffer, 'image/webp', webpBuffer.length, 'test.webp');\n\n      const result = await service.uploadFile(file, FileCategory.SPEAKER_PHOTOS);\n\n      expect(result).toBeDefined();\n      expect(result.key).toContain('speaker-photos/');\n    });\n\n    it('should successfully upload a valid PDF for legal documents', async () => {\n      // PDF magic bytes: %PDF\n      const pdfBuffer = Buffer.concat([\n        Buffer.from([0x25, 0x50, 0x44, 0x46]),\n        Buffer.alloc(100, 'd'),\n      ]);\n      const file = createMockFile(pdfBuffer, 'application/pdf', pdfBuffer.length, 'legal.pdf');\n\n      const result = await service.uploadFile(file, FileCategory.LEGAL_DOCUMENTS);\n\n      expect(result).toBeDefined();\n      expect(result.key).toContain('legal-documents/');\n    });\n\n    it('should skip virus scanning when scanForVirus is false', async () => {\n      const jpegBuffer = Buffer.concat([\n        Buffer.from([0xff, 0xd8, 0xff]),\n        Buffer.alloc(100, 'a'),\n      ]);\n      const file = createMockFile(jpegBuffer, 'image/jpeg', jpegBuffer.length);\n\n      await service.uploadFile(file, FileCategory.SPEAKER_PHOTOS, { scanForVirus: false });\n\n      expect(virusScannerService.scanFile).not.toHaveBeenCalled();\n    });\n\n    it('should throw BadRequestException when file is empty', async () => {\n      const file = createMockFile(Buffer.alloc(0), 'image/jpeg', 0);\n\n      await expect(service.uploadFile(file, FileCategory.SPEAKER_PHOTOS)).rejects.toThrow(\n        BadRequestException,\n      );\n      await expect(service.uploadFile(file, FileCategory.SPEAKER_PHOTOS)).rejects.toThrow(\n        'No file provided or file is empty',\n      );\n    });\n\n    it('should throw BadRequestException when file size exceeds limit', async () => {\n      const largeBuffer = Buffer.alloc(6 * 1024 * 1024, 'x'); // 6MB\n      const file = createMockFile(largeBuffer, 'image/jpeg', largeBuffer.length);\n\n      await expect(service.uploadFile(file, FileCategory.SPEAKER_PHOTOS)).rejects.toThrow(\n        BadRequestException,\n      );\n      await expect(service.uploadFile(file, FileCategory.SPEAKER_PHOTOS)).rejects.toThrow(\n        'File size exceeds maximum allowed size of 5MB',\n      );\n    });\n\n    it('should throw BadRequestException for invalid file type', async () => {\n      const pdfBuffer = Buffer.concat([\n        Buffer.from([0x25, 0x50, 0x44, 0x46]),\n        Buffer.alloc(100, 'd'),\n      ]);\n      const file = createMockFile(pdfBuffer, 'application/pdf', pdfBuffer.length, 'doc.pdf');\n\n      await expect(service.uploadFile(file, FileCategory.SPEAKER_PHOTOS)).rejects.toThrow(\n        BadRequestException,\n      );\n      await expect(service.uploadFile(file, FileCategory.SPEAKER_PHOTOS)).rejects.toThrow(\n        'Invalid file type. Only JPEG, PNG, WEBP files are allowed',\n      );\n    });\n\n    it('should throw BadRequestException when magic bytes do not match MIME type', async () => {\n      // PNG magic bytes but claiming to be JPEG\n      const fakeMagicBytes = Buffer.concat([\n        Buffer.from([0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a]),\n        Buffer.alloc(100, 'b'),\n      ]);\n      const file = createMockFile(fakeMagicBytes, 'image/jpeg', fakeMagicBytes.length);\n\n      await expect(service.uploadFile(file, FileCategory.SPEAKER_PHOTOS)).rejects.toThrow(\n        BadRequestException,\n      );\n      await expect(service.uploadFile(file, FileCategory.SPEAKER_PHOTOS)).rejects.toThrow(\n        'File content does not match declared file type',\n      );\n    });\n\n    it('should throw BadRequestException when virus is detected', async () => {\n      const jpegBuffer = Buffer.concat([\n        Buffer.from([0xff, 0xd8, 0xff]),\n        Buffer.alloc(100, 'a'),\n      ]);\n      const file = createMockFile(jpegBuffer, 'image/jpeg', jpegBuffer.length);\n\n      mockVirusScannerService.scanFile.mockRejectedValueOnce(\n        new BadRequestException('File failed security scan and was rejected'),\n      );\n\n      await expect(service.uploadFile(file, FileCategory.SPEAKER_PHOTOS)).rejects.toThrow(\n        BadRequestException,\n      );\n      await expect(service.uploadFile(file, FileCategory.SPEAKER_PHOTOS)).rejects.toThrow(\n        'File failed security scan and was rejected',\n      );\n    });\n\n    it('should throw InternalServerErrorException when S3 upload fails', async () => {\n      const jpegBuffer = Buffer.concat([\n        Buffer.from([0xff, 0xd8, 0xff]),\n        Buffer.alloc(100, 'a'),\n      ]);\n      const file = createMockFile(jpegBuffer, 'image/jpeg', jpegBuffer.length);\n\n      mockS3Send.mockRejectedValue(new Error('S3 connection error'));\n\n      await expect(service.uploadFile(file, FileCategory.SPEAKER_PHOTOS)).rejects.toThrow(\n        'Failed to upload file to storage',\n      );\n    });\n\n    it('should include custom metadata in S3 upload', async () => {\n      const jpegBuffer = Buffer.concat([\n        Buffer.from([0xff, 0xd8, 0xff]),\n        Buffer.alloc(100, 'a'),\n      ]);\n      const file = createMockFile(jpegBuffer, 'image/jpeg', jpegBuffer.length);\n      const metadata = { uploadedBy: 'user123', category: 'profile' };\n\n      await service.uploadFile(file, FileCategory.SPEAKER_PHOTOS, { metadata });\n\n      expect(mockS3Send).toHaveBeenCalledWith(expect.any(PutObjectCommand));\n    });\n  });\n\n  describe('validateFile', () => {\n    it('should validate a correct file successfully', async () => {\n      const jpegBuffer = Buffer.concat([\n        Buffer.from([0xff, 0xd8, 0xff]),\n        Buffer.alloc(100, 'a'),\n      ]);\n      const file = createMockFile(jpegBuffer, 'image/jpeg', jpegBuffer.length);\n\n      const result = await service.validateFile(file, {\n        maxSizeBytes: 5 * 1024 * 1024,\n        allowedMimeTypes: ['image/jpeg'],\n        validateMagicBytes: true,\n      });\n\n      expect(result).toBe(true);\n    });\n\n    it('should throw error for missing file', async () => {\n      await expect(\n        service.validateFile(null as any, {\n          maxSizeBytes: 5 * 1024 * 1024,\n          allowedMimeTypes: ['image/jpeg'],\n          validateMagicBytes: true,\n        }),\n      ).rejects.toThrow('No file provided or file is empty');\n    });\n\n    it('should throw error for file exceeding size limit', async () => {\n      const largeBuffer = Buffer.alloc(6 * 1024 * 1024, 'x');\n      const file = createMockFile(largeBuffer, 'image/jpeg', largeBuffer.length);\n\n      await expect(\n        service.validateFile(file, {\n          maxSizeBytes: 5 * 1024 * 1024,\n          allowedMimeTypes: ['image/jpeg'],\n          validateMagicBytes: false,\n        }),\n      ).rejects.toThrow('File size exceeds maximum allowed size of 5MB');\n    });\n\n    it('should throw error for disallowed MIME type', async () => {\n      const buffer = Buffer.alloc(100, 'a');\n      const file = createMockFile(buffer, 'application/pdf', buffer.length);\n\n      await expect(\n        service.validateFile(file, {\n          maxSizeBytes: 5 * 1024 * 1024,\n          allowedMimeTypes: ['image/jpeg', 'image/png'],\n          validateMagicBytes: false,\n        }),\n      ).rejects.toThrow('Invalid file type. Only JPEG, PNG files are allowed');\n    });\n\n    it('should throw error when magic bytes validation fails', async () => {\n      // Wrong magic bytes for JPEG\n      const wrongMagicBytes = Buffer.concat([Buffer.from([0x00, 0x00, 0x00]), Buffer.alloc(100, 'a')]);\n      const file = createMockFile(wrongMagicBytes, 'image/jpeg', wrongMagicBytes.length);\n\n      await expect(\n        service.validateFile(file, {\n          maxSizeBytes: 5 * 1024 * 1024,\n          allowedMimeTypes: ['image/jpeg'],\n          validateMagicBytes: true,\n        }),\n      ).rejects.toThrow('File content does not match declared file type');\n    });\n  });\n\n  describe('deleteFile', () => {\n    it('should successfully delete a file from S3', async () => {\n      const key = 'speaker-photos/12345-67890.jpg';\n\n      await service.deleteFile(key);\n\n      expect(mockS3Send).toHaveBeenCalledWith(expect.any(DeleteObjectCommand));\n    });\n\n    it('should not throw error when S3 delete fails (swallow error)', async () => {\n      const key = 'speaker-photos/nonexistent.jpg';\n      mockS3Send.mockRejectedValueOnce(new Error('File not found'));\n\n      await expect(service.deleteFile(key)).resolves.not.toThrow();\n    });\n  });\n\n  describe('getSignedUrl', () => {\n    it('should generate a signed URL for a file', async () => {\n      const key = 'speaker-photos/12345-67890.jpg';\n      const mockSignedUrl = 'https://test-bucket.s3.amazonaws.com/signed-url';\n\n      (getSignedUrl as jest.Mock).mockResolvedValue(mockSignedUrl);\n\n      const result = await service.getSignedUrl(key);\n\n      expect(result).toBe(mockSignedUrl);\n      expect(getSignedUrl).toHaveBeenCalledWith(\n        expect.anything(), // S3Client instance\n        expect.any(GetObjectCommand),\n        { expiresIn: 3600 },\n      );\n    });\n\n    it('should use custom expiration time', async () => {\n      const key = 'speaker-photos/12345-67890.jpg';\n      const mockSignedUrl = 'https://test-bucket.s3.amazonaws.com/signed-url';\n      const customExpiry = 7200;\n\n      (getSignedUrl as jest.Mock).mockResolvedValue(mockSignedUrl);\n\n      await service.getSignedUrl(key, customExpiry);\n\n      expect(getSignedUrl).toHaveBeenCalledWith(\n        expect.anything(), // S3Client instance\n        expect.any(GetObjectCommand),\n        { expiresIn: customExpiry },\n      );\n    });\n\n    it('should throw InternalServerErrorException when signing fails', async () => {\n      const key = 'speaker-photos/12345-67890.jpg';\n\n      (getSignedUrl as jest.Mock).mockRejectedValue(new Error('Signing failed'));\n\n      await expect(service.getSignedUrl(key)).rejects.toThrow(InternalServerErrorException);\n      await expect(service.getSignedUrl(key)).rejects.toThrow('Failed to generate download URL');\n    });\n  });\n\n  describe('getFile', () => {\n    it('should retrieve a file from S3', async () => {\n      const key = 'speaker-photos/12345-67890.jpg';\n      const mockStream = new Readable();\n\n      mockS3Send.mockResolvedValueOnce({ Body: mockStream });\n\n      const result = await service.getFile(key);\n\n      expect(result).toBe(mockStream);\n      expect(mockS3Send).toHaveBeenCalledWith(expect.any(GetObjectCommand));\n    });\n\n    it('should throw InternalServerErrorException when retrieval fails', async () => {\n      const key = 'speaker-photos/nonexistent.jpg';\n\n      mockS3Send.mockRejectedValue(new Error('File not found'));\n\n      await expect(service.getFile(key)).rejects.toThrow('Failed to retrieve file from storage');\n    });\n  });\n\n  describe('getFileMetadata', () => {\n    it('should retrieve file metadata from S3', async () => {\n      const key = 'speaker-photos/12345-67890.jpg';\n\n      mockS3Send.mockResolvedValueOnce({\n        ContentLength: 1024,\n        ContentType: 'image/jpeg',\n      });\n\n      const result = await service.getFileMetadata(key);\n\n      expect(result).toEqual({\n        size: 1024,\n        contentType: 'image/jpeg',\n      });\n      expect(mockS3Send).toHaveBeenCalledWith(expect.any(HeadObjectCommand));\n    });\n\n    it('should use default values when metadata is missing', async () => {\n      const key = 'speaker-photos/12345-67890.jpg';\n\n      mockS3Send.mockResolvedValueOnce({});\n\n      const result = await service.getFileMetadata(key);\n\n      expect(result).toEqual({\n        size: 0,\n        contentType: 'application/octet-stream',\n      });\n    });\n\n    it('should throw InternalServerErrorException when metadata retrieval fails', async () => {\n      const key = 'speaker-photos/nonexistent.jpg';\n\n      mockS3Send.mockRejectedValue(new Error('File not found'));\n\n      await expect(service.getFileMetadata(key)).rejects.toThrow('Failed to retrieve file metadata');\n    });\n  });\n});\n"],"version":3}