62f7b2ef08f25274a3328da3a93bed63
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SessionSchema = exports.Session = void 0;
const mongoose_1 = require("@nestjs/mongoose");
const mongoose_2 = require("mongoose");
const session_types_1 = require("@shared/types/session.types");
let Title = class Title {
    'pt-BR';
    'en';
};
__decorate([
    (0, mongoose_1.Prop)({
        required: true,
        maxlength: 150,
        trim: true,
    }),
    __metadata("design:type", String)
], Title.prototype, "pt-BR", void 0);
__decorate([
    (0, mongoose_1.Prop)({
        required: true,
        maxlength: 150,
        trim: true,
    }),
    __metadata("design:type", String)
], Title.prototype, "en", void 0);
Title = __decorate([
    (0, mongoose_1.Schema)({ _id: false })
], Title);
let Description = class Description {
    'pt-BR';
    'en';
};
__decorate([
    (0, mongoose_1.Prop)({
        required: true,
        minlength: 100,
        maxlength: 1000,
        trim: true,
    }),
    __metadata("design:type", String)
], Description.prototype, "pt-BR", void 0);
__decorate([
    (0, mongoose_1.Prop)({
        required: true,
        minlength: 100,
        maxlength: 1000,
        trim: true,
    }),
    __metadata("design:type", String)
], Description.prototype, "en", void 0);
Description = __decorate([
    (0, mongoose_1.Schema)({ _id: false })
], Description);
let Session = class Session {
    title;
    description;
    type;
    startTime;
    endTime;
    stage;
    speakerIds;
    sponsorIds;
    tags;
    capacity;
    registeredCount;
    isHighlight;
    isVisible;
    deletedAt;
    deletedBy;
    deleteReason;
};
exports.Session = Session;
__decorate([
    (0, mongoose_1.Prop)({
        type: Title,
        required: true,
    }),
    __metadata("design:type", Object)
], Session.prototype, "title", void 0);
__decorate([
    (0, mongoose_1.Prop)({
        type: Description,
        required: true,
    }),
    __metadata("design:type", Object)
], Session.prototype, "description", void 0);
__decorate([
    (0, mongoose_1.Prop)({
        required: true,
        enum: Object.values(session_types_1.SessionType),
    }),
    __metadata("design:type", String)
], Session.prototype, "type", void 0);
__decorate([
    (0, mongoose_1.Prop)({
        required: true,
        type: Date,
        index: true,
    }),
    __metadata("design:type", Date)
], Session.prototype, "startTime", void 0);
__decorate([
    (0, mongoose_1.Prop)({
        required: true,
        type: Date,
    }),
    __metadata("design:type", Date)
], Session.prototype, "endTime", void 0);
__decorate([
    (0, mongoose_1.Prop)({
        required: true,
        enum: Object.values(session_types_1.SessionStage),
        index: true,
    }),
    __metadata("design:type", String)
], Session.prototype, "stage", void 0);
__decorate([
    (0, mongoose_1.Prop)({
        type: [{ type: mongoose_2.Schema.Types.ObjectId, ref: 'Speaker' }],
        default: [],
    }),
    __metadata("design:type", Array)
], Session.prototype, "speakerIds", void 0);
__decorate([
    (0, mongoose_1.Prop)({
        type: [{ type: mongoose_2.Schema.Types.ObjectId, ref: 'Sponsor' }],
        default: [],
    }),
    __metadata("design:type", Array)
], Session.prototype, "sponsorIds", void 0);
__decorate([
    (0, mongoose_1.Prop)({
        type: [String],
        default: [],
        index: true,
    }),
    __metadata("design:type", Array)
], Session.prototype, "tags", void 0);
__decorate([
    (0, mongoose_1.Prop)({
        min: 0,
    }),
    __metadata("design:type", Number)
], Session.prototype, "capacity", void 0);
__decorate([
    (0, mongoose_1.Prop)({
        min: 0,
        default: 0,
    }),
    __metadata("design:type", Number)
], Session.prototype, "registeredCount", void 0);
__decorate([
    (0, mongoose_1.Prop)({
        default: false,
    }),
    __metadata("design:type", Boolean)
], Session.prototype, "isHighlight", void 0);
__decorate([
    (0, mongoose_1.Prop)({
        default: true,
        index: true,
    }),
    __metadata("design:type", Boolean)
], Session.prototype, "isVisible", void 0);
__decorate([
    (0, mongoose_1.Prop)({
        type: Date,
        default: null,
    }),
    __metadata("design:type", Date)
], Session.prototype, "deletedAt", void 0);
__decorate([
    (0, mongoose_1.Prop)({
        type: mongoose_2.Schema.Types.ObjectId,
        ref: 'User',
    }),
    __metadata("design:type", mongoose_2.Schema.Types.ObjectId)
], Session.prototype, "deletedBy", void 0);
__decorate([
    (0, mongoose_1.Prop)({
        type: String,
    }),
    __metadata("design:type", String)
], Session.prototype, "deleteReason", void 0);
exports.Session = Session = __decorate([
    (0, mongoose_1.Schema)({ timestamps: true, collection: 'Session' })
], Session);
exports.SessionSchema = mongoose_1.SchemaFactory.createForClass(Session);
// Indexes
exports.SessionSchema.index({ startTime: 1 });
exports.SessionSchema.index({ stage: 1 });
exports.SessionSchema.index({ tags: 1 });
exports.SessionSchema.index({ startTime: 1, stage: 1 });
exports.SessionSchema.index({ type: 1 });
exports.SessionSchema.index({ isHighlight: 1 });
exports.SessionSchema.index({ isVisible: 1 });
exports.SessionSchema.index({ deletedAt: 1 });
exports.SessionSchema.index({
    'title.pt-BR': 'text',
    'title.en': 'text',
    'description.pt-BR': 'text',
    'description.en': 'text',
});
// Pre-save middleware for data normalization
exports.SessionSchema.pre('save', function (next) {
    if (this.title) {
        if (this.title['pt-BR']) {
            this.title['pt-BR'] = this.title['pt-BR'].trim();
        }
        if (this.title['en']) {
            this.title['en'] = this.title['en'].trim();
        }
    }
    if (this.description) {
        if (this.description['pt-BR']) {
            this.description['pt-BR'] = this.description['pt-BR'].trim();
        }
        if (this.description['en']) {
            this.description['en'] = this.description['en'].trim();
        }
    }
    if (this.tags && Array.isArray(this.tags)) {
        this.tags = this.tags.map((tag) => tag.toLowerCase().trim());
    }
    next();
});
// Validation middleware
exports.SessionSchema.pre('save', function (next) {
    if (this.startTime && this.endTime) {
        if (this.endTime <= this.startTime) {
            next(new Error('End time must be after start time'));
            return;
        }
    }
    next();
});
// Virtual fields
exports.SessionSchema.virtual('duration').get(function () {
    if (this.startTime && this.endTime) {
        return Math.round((this.endTime.getTime() - this.startTime.getTime()) / 60000);
    }
    return 0;
});
exports.SessionSchema.virtual('isFull').get(function () {
    if (this.capacity && this.registeredCount) {
        return this.registeredCount >= this.capacity;
    }
    return false;
});
// Schema methods
exports.SessionSchema.methods['getLocalizedTitle'] = function (language) {
    return this['title'][language] || this['title']['pt-BR'];
};
exports.SessionSchema.methods['getLocalizedDescription'] = function (language) {
    return this['description'][language] || this['description']['pt-BR'];
};
exports.SessionSchema.methods['isLive'] = function () {
    const now = new Date();
    return this['startTime'] <= now && this['endTime'] > now;
};
exports.SessionSchema.methods['isUpcoming'] = function () {
    const now = new Date();
    return this['startTime'] > now;
};
exports.SessionSchema.methods['isPast'] = function () {
    const now = new Date();
    return this['endTime'] < now;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,