{"file":"/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/news-releases/services/image-processing.service.ts","mappings":"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","names":[],"sources":["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/news-releases/services/image-processing.service.ts"],"sourcesContent":["import { Injectable, BadRequestException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport sharp from 'sharp';\nimport * as AWS from 'aws-sdk';\nimport { v4 as uuidv4 } from 'uuid';\n\n@Injectable()\nexport class ImageProcessingService {\n  private s3: AWS.S3;\n  private bucketName: string;\n\n  constructor(private configService: ConfigService) {\n    this.s3 = new AWS.S3({\n      accessKeyId: this.configService.get('AWS_ACCESS_KEY_ID'),\n      secretAccessKey: this.configService.get('AWS_SECRET_ACCESS_KEY'),\n      region: this.configService.get('AWS_REGION'),\n    });\n    this.bucketName = this.configService.get('AWS_S3_NEWS_BUCKET') || 'vtex-day-news-images';\n  }\n\n  async uploadImage(file: Express.Multer.File): Promise<{ url: string; thumbnailUrl: string }> {\n    if (!file) {\n      throw new BadRequestException('No file provided');\n    }\n\n    const maxSize = parseInt(this.configService.get('NEWS_IMAGE_MAX_SIZE') || '10485760', 10);\n    if (file.size > maxSize) {\n      throw new BadRequestException(`File size exceeds maximum allowed size of ${maxSize} bytes`);\n    }\n\n    const allowedMimeTypes = ['image/jpeg', 'image/png', 'image/webp', 'image/gif'];\n    if (!allowedMimeTypes.includes(file.mimetype)) {\n      throw new BadRequestException('Invalid file type. Only JPEG, PNG, WebP, and GIF are allowed');\n    }\n\n    try {\n      const fileName = `${uuidv4()}-${Date.now()}`;\n      const originalKey = `news-releases/original/${fileName}`;\n      const thumbnailKey = `news-releases/thumbnail/${fileName}`;\n\n      const optimizedImage = await sharp(file.buffer)\n        .resize(1920, 1080, {\n          fit: 'inside',\n          withoutEnlargement: true,\n        })\n        .jpeg({ quality: 85, progressive: true })\n        .toBuffer();\n\n      const thumbnail = await sharp(file.buffer)\n        .resize(400, 300, {\n          fit: 'cover',\n        })\n        .jpeg({ quality: 80 })\n        .toBuffer();\n\n      await this.s3\n        .putObject({\n          Bucket: this.bucketName,\n          Key: originalKey,\n          Body: optimizedImage,\n          ContentType: 'image/jpeg',\n          CacheControl: 'max-age=31536000',\n        })\n        .promise();\n\n      await this.s3\n        .putObject({\n          Bucket: this.bucketName,\n          Key: thumbnailKey,\n          Body: thumbnail,\n          ContentType: 'image/jpeg',\n          CacheControl: 'max-age=31536000',\n        })\n        .promise();\n\n      const cloudFrontUrl = this.configService.get('CLOUDFRONT_URL');\n      const baseUrl = cloudFrontUrl || `https://${this.bucketName}.s3.amazonaws.com`;\n\n      return {\n        url: `${baseUrl}/${originalKey}`,\n        thumbnailUrl: `${baseUrl}/${thumbnailKey}`,\n      };\n    } catch (error: any) {\n      throw new BadRequestException(\n        `Failed to process image: ${error?.message || 'Unknown error'}`,\n      );\n    }\n  }\n\n  async deleteImage(imageUrl: string): Promise<void> {\n    try {\n      // Properly parse the URL to extract the key\n      const url = new URL(imageUrl);\n      let key = url.pathname.substring(1); // Remove leading slash\n\n      // Validate the key doesn't contain path traversal attempts\n      if (key.includes('../') || key.includes('..\\\\')) {\n        throw new BadRequestException('Invalid image URL');\n      }\n\n      // Sanitize the key\n      key = key.replace(/\\.\\./g, '').replace(/\\/+/g, '/');\n\n      if (key) {\n        await this.s3\n          .deleteObject({\n            Bucket: this.bucketName,\n            Key: key,\n          })\n          .promise();\n\n        const thumbnailKey = key.replace('/original/', '/thumbnail/');\n        await this.s3\n          .deleteObject({\n            Bucket: this.bucketName,\n            Key: thumbnailKey,\n          })\n          .promise();\n      }\n    } catch (error: any) {\n      if (error?.message === 'Invalid URL') {\n        throw new BadRequestException('Invalid image URL format');\n      }\n      console.error('Failed to delete image from S3:', error);\n    }\n  }\n\n  async generateResponsiveImages(file: Express.Multer.File): Promise<{\n    original: string;\n    large: string;\n    medium: string;\n    small: string;\n    thumbnail: string;\n  }> {\n    const fileName = `${uuidv4()}-${Date.now()}`;\n    const sizes = {\n      original: { width: null, quality: 95 },\n      large: { width: 1920, quality: 85 },\n      medium: { width: 1024, quality: 80 },\n      small: { width: 640, quality: 75 },\n      thumbnail: { width: 320, quality: 70 },\n    };\n\n    const urls: any = {};\n\n    for (const [size, config] of Object.entries(sizes)) {\n      const key = `news-releases/${size}/${fileName}`;\n\n      let processedImage = sharp(file.buffer);\n\n      if (config.width) {\n        processedImage = processedImage.resize(config.width, null, {\n          fit: 'inside',\n          withoutEnlargement: true,\n        });\n      }\n\n      const buffer = await processedImage\n        .jpeg({ quality: config.quality, progressive: true })\n        .toBuffer();\n\n      await this.s3\n        .putObject({\n          Bucket: this.bucketName,\n          Key: key,\n          Body: buffer,\n          ContentType: 'image/jpeg',\n          CacheControl: 'max-age=31536000',\n        })\n        .promise();\n\n      const cloudFrontUrl = this.configService.get('CLOUDFRONT_URL');\n      const baseUrl = cloudFrontUrl || `https://${this.bucketName}.s3.amazonaws.com`;\n      urls[size] = `${baseUrl}/${key}`;\n    }\n\n    return urls;\n  }\n}\n"],"version":3}