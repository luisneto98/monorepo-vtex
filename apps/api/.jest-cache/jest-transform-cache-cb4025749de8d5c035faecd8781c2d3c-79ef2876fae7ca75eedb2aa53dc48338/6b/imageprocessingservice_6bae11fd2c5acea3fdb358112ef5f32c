f897b1f10cc87be4eb59d812e245f3ef
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImageProcessingService = void 0;
const common_1 = require("@nestjs/common");
const config_1 = require("@nestjs/config");
const sharp_1 = __importDefault(require("sharp"));
const AWS = __importStar(require("aws-sdk"));
const uuid_1 = require("uuid");
let ImageProcessingService = class ImageProcessingService {
    configService;
    s3;
    bucketName;
    constructor(configService) {
        this.configService = configService;
        this.s3 = new AWS.S3({
            accessKeyId: this.configService.get('AWS_ACCESS_KEY_ID'),
            secretAccessKey: this.configService.get('AWS_SECRET_ACCESS_KEY'),
            region: this.configService.get('AWS_REGION'),
        });
        this.bucketName = this.configService.get('AWS_S3_NEWS_BUCKET') || 'vtex-day-news-images';
    }
    async uploadImage(file) {
        if (!file) {
            throw new common_1.BadRequestException('No file provided');
        }
        const maxSize = parseInt(this.configService.get('NEWS_IMAGE_MAX_SIZE') || '10485760', 10);
        if (file.size > maxSize) {
            throw new common_1.BadRequestException(`File size exceeds maximum allowed size of ${maxSize} bytes`);
        }
        const allowedMimeTypes = ['image/jpeg', 'image/png', 'image/webp', 'image/gif'];
        if (!allowedMimeTypes.includes(file.mimetype)) {
            throw new common_1.BadRequestException('Invalid file type. Only JPEG, PNG, WebP, and GIF are allowed');
        }
        try {
            const fileName = `${(0, uuid_1.v4)()}-${Date.now()}`;
            const originalKey = `news-releases/original/${fileName}`;
            const thumbnailKey = `news-releases/thumbnail/${fileName}`;
            const optimizedImage = await (0, sharp_1.default)(file.buffer)
                .resize(1920, 1080, {
                fit: 'inside',
                withoutEnlargement: true,
            })
                .jpeg({ quality: 85, progressive: true })
                .toBuffer();
            const thumbnail = await (0, sharp_1.default)(file.buffer)
                .resize(400, 300, {
                fit: 'cover',
            })
                .jpeg({ quality: 80 })
                .toBuffer();
            await this.s3
                .putObject({
                Bucket: this.bucketName,
                Key: originalKey,
                Body: optimizedImage,
                ContentType: 'image/jpeg',
                CacheControl: 'max-age=31536000',
            })
                .promise();
            await this.s3
                .putObject({
                Bucket: this.bucketName,
                Key: thumbnailKey,
                Body: thumbnail,
                ContentType: 'image/jpeg',
                CacheControl: 'max-age=31536000',
            })
                .promise();
            const cloudFrontUrl = this.configService.get('CLOUDFRONT_URL');
            const baseUrl = cloudFrontUrl || `https://${this.bucketName}.s3.amazonaws.com`;
            return {
                url: `${baseUrl}/${originalKey}`,
                thumbnailUrl: `${baseUrl}/${thumbnailKey}`,
            };
        }
        catch (error) {
            throw new common_1.BadRequestException(`Failed to process image: ${error?.message || 'Unknown error'}`);
        }
    }
    async deleteImage(imageUrl) {
        try {
            // Properly parse the URL to extract the key
            const url = new URL(imageUrl);
            let key = url.pathname.substring(1); // Remove leading slash
            // Validate the key doesn't contain path traversal attempts
            if (key.includes('../') || key.includes('..\\')) {
                throw new common_1.BadRequestException('Invalid image URL');
            }
            // Sanitize the key
            key = key.replace(/\.\./g, '').replace(/\/+/g, '/');
            if (key) {
                await this.s3
                    .deleteObject({
                    Bucket: this.bucketName,
                    Key: key,
                })
                    .promise();
                const thumbnailKey = key.replace('/original/', '/thumbnail/');
                await this.s3
                    .deleteObject({
                    Bucket: this.bucketName,
                    Key: thumbnailKey,
                })
                    .promise();
            }
        }
        catch (error) {
            if (error?.message === 'Invalid URL') {
                throw new common_1.BadRequestException('Invalid image URL format');
            }
            console.error('Failed to delete image from S3:', error);
        }
    }
    async generateResponsiveImages(file) {
        const fileName = `${(0, uuid_1.v4)()}-${Date.now()}`;
        const sizes = {
            original: { width: null, quality: 95 },
            large: { width: 1920, quality: 85 },
            medium: { width: 1024, quality: 80 },
            small: { width: 640, quality: 75 },
            thumbnail: { width: 320, quality: 70 },
        };
        const urls = {};
        for (const [size, config] of Object.entries(sizes)) {
            const key = `news-releases/${size}/${fileName}`;
            let processedImage = (0, sharp_1.default)(file.buffer);
            if (config.width) {
                processedImage = processedImage.resize(config.width, null, {
                    fit: 'inside',
                    withoutEnlargement: true,
                });
            }
            const buffer = await processedImage
                .jpeg({ quality: config.quality, progressive: true })
                .toBuffer();
            await this.s3
                .putObject({
                Bucket: this.bucketName,
                Key: key,
                Body: buffer,
                ContentType: 'image/jpeg',
                CacheControl: 'max-age=31536000',
            })
                .promise();
            const cloudFrontUrl = this.configService.get('CLOUDFRONT_URL');
            const baseUrl = cloudFrontUrl || `https://${this.bucketName}.s3.amazonaws.com`;
            urls[size] = `${baseUrl}/${key}`;
        }
        return urls;
    }
};
exports.ImageProcessingService = ImageProcessingService;
exports.ImageProcessingService = ImageProcessingService = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [config_1.ConfigService])
], ImageProcessingService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,