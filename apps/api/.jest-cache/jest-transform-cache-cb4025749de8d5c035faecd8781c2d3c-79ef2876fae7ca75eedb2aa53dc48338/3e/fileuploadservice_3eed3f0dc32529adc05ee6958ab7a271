f98b00d1fe8bea8ec785668dcc373709
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileUploadService = void 0;
const common_1 = require("@nestjs/common");
const s3_config_1 = require("../../../config/s3.config");
const sanitization_util_1 = require("../../../common/utils/sanitization.util");
const storage_service_1 = require("../../storage/services/storage.service");
const storage_types_1 = require("../../storage/types/storage.types");
let FileUploadService = class FileUploadService {
    storageService;
    constructor(storageService) {
        this.storageService = storageService;
    }
    async uploadFile(file, materialType, uploadedBy) {
        this.validateFile(file, materialType);
        const fileExtension = file.originalname.split('.').pop()?.toLowerCase();
        try {
            // Use StorageService for upload (includes validation and virus scanning)
            const uploadResult = await this.storageService.uploadFile(file, storage_types_1.FileCategory.PRESS_MATERIALS, {
                metadata: {
                    uploadedBy,
                    originalName: sanitization_util_1.SanitizationUtil.sanitizeFilePath(file.originalname),
                    materialType,
                },
            });
            const metadata = {
                size: file.size,
                format: fileExtension || '',
            };
            return {
                fileUrl: uploadResult.url,
                metadata,
            };
        }
        catch (error) {
            console.error('S3 upload error:', error);
            throw new common_1.BadRequestException('Failed to upload file to S3');
        }
    }
    async deleteFile(fileUrl) {
        try {
            const fileKey = this.extractKeyFromUrl(fileUrl);
            await this.storageService.deleteFile(fileKey);
        }
        catch (error) {
            console.error('S3 delete error:', error);
            throw new common_1.BadRequestException('Failed to delete file from S3');
        }
    }
    async generateSignedUrl(fileUrl, expiresIn = s3_config_1.S3_CONFIG.URL_EXPIRY) {
        try {
            const fileKey = this.extractKeyFromUrl(fileUrl);
            return await this.storageService.getSignedUrl(fileKey, expiresIn);
        }
        catch (error) {
            console.error('S3 signed URL error:', error);
            throw new common_1.BadRequestException('Failed to generate signed URL');
        }
    }
    validateFile(file, materialType) {
        if (!file) {
            throw new common_1.BadRequestException('No file provided');
        }
        // Sanitize filename to prevent path traversal
        const sanitizedFilename = sanitization_util_1.SanitizationUtil.sanitizeFilePath(file.originalname);
        const fileExtension = sanitizedFilename.split('.').pop()?.toLowerCase();
        const allowedFormats = s3_config_1.S3_CONFIG.ALLOWED_FORMATS[materialType];
        if (!fileExtension || !allowedFormats.includes(fileExtension)) {
            throw new common_1.BadRequestException(`Invalid file format for ${materialType}. Allowed formats: ${allowedFormats.join(', ')}`);
        }
        const maxSize = materialType === 'video' ? s3_config_1.S3_CONFIG.MAX_FILE_SIZE.video : s3_config_1.S3_CONFIG.MAX_FILE_SIZE.default;
        if (file.size > maxSize) {
            throw new common_1.BadRequestException(`File size exceeds maximum allowed size of ${maxSize / (1024 * 1024)}MB`);
        }
    }
    extractKeyFromUrl(fileUrl) {
        // Sanitize file URL to prevent path traversal
        const sanitizedUrl = sanitization_util_1.SanitizationUtil.sanitizeFilePath(fileUrl);
        const urlParts = sanitizedUrl.split('.amazonaws.com/');
        if (urlParts.length !== 2) {
            const pathParts = sanitizedUrl.split('/');
            const key = pathParts.slice(3).join('/');
            // Additional validation to ensure key doesn't contain path traversal
            return sanitization_util_1.SanitizationUtil.sanitizeFilePath(key);
        }
        return sanitization_util_1.SanitizationUtil.sanitizeFilePath(urlParts[1]);
    }
};
exports.FileUploadService = FileUploadService;
exports.FileUploadService = FileUploadService = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [storage_service_1.StorageService])
], FileUploadService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,