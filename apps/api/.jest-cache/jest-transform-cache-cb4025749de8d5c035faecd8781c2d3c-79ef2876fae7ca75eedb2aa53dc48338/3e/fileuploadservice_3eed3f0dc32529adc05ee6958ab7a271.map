{"file":"/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/press-materials/services/file-upload.service.ts","mappings":"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","names":[],"sources":["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/press-materials/services/file-upload.service.ts"],"sourcesContent":["import { Injectable, BadRequestException } from '@nestjs/common';\nimport { S3_CONFIG } from '../../../config/s3.config';\nimport { SanitizationUtil } from '../../../common/utils/sanitization.util';\nimport { FileMetadata, FileUploadResponse, PressMaterialType } from '@vtexday26/shared';\nimport { StorageService } from '../../storage/services/storage.service';\nimport { FileCategory } from '../../storage/types/storage.types';\n\n@Injectable()\nexport class FileUploadService {\n  constructor(private storageService: StorageService) {}\n\n  async uploadFile(\n    file: Express.Multer.File,\n    materialType: PressMaterialType,\n    uploadedBy: string,\n  ): Promise<FileUploadResponse> {\n    this.validateFile(file, materialType);\n\n    const fileExtension = file.originalname.split('.').pop()?.toLowerCase();\n\n    try {\n      // Use StorageService for upload (includes validation and virus scanning)\n      const uploadResult = await this.storageService.uploadFile(\n        file,\n        FileCategory.PRESS_MATERIALS,\n        {\n          metadata: {\n            uploadedBy,\n            originalName: SanitizationUtil.sanitizeFilePath(file.originalname),\n            materialType,\n          },\n        },\n      );\n\n      const metadata: FileMetadata = {\n        size: file.size,\n        format: fileExtension || '',\n      };\n\n      return {\n        fileUrl: uploadResult.url,\n        metadata,\n      };\n    } catch (error) {\n      console.error('S3 upload error:', error);\n      throw new BadRequestException('Failed to upload file to S3');\n    }\n  }\n\n  async deleteFile(fileUrl: string): Promise<void> {\n    try {\n      const fileKey = this.extractKeyFromUrl(fileUrl);\n      await this.storageService.deleteFile(fileKey);\n    } catch (error) {\n      console.error('S3 delete error:', error);\n      throw new BadRequestException('Failed to delete file from S3');\n    }\n  }\n\n  async generateSignedUrl(fileUrl: string, expiresIn = S3_CONFIG.URL_EXPIRY): Promise<string> {\n    try {\n      const fileKey = this.extractKeyFromUrl(fileUrl);\n      return await this.storageService.getSignedUrl(fileKey, expiresIn);\n    } catch (error) {\n      console.error('S3 signed URL error:', error);\n      throw new BadRequestException('Failed to generate signed URL');\n    }\n  }\n\n  private validateFile(file: Express.Multer.File, materialType: PressMaterialType): void {\n    if (!file) {\n      throw new BadRequestException('No file provided');\n    }\n\n    // Sanitize filename to prevent path traversal\n    const sanitizedFilename = SanitizationUtil.sanitizeFilePath(file.originalname);\n    const fileExtension = sanitizedFilename.split('.').pop()?.toLowerCase();\n    const allowedFormats = S3_CONFIG.ALLOWED_FORMATS[materialType];\n\n    if (!fileExtension || !allowedFormats.includes(fileExtension)) {\n      throw new BadRequestException(\n        `Invalid file format for ${materialType}. Allowed formats: ${allowedFormats.join(', ')}`,\n      );\n    }\n\n    const maxSize =\n      materialType === 'video' ? S3_CONFIG.MAX_FILE_SIZE.video : S3_CONFIG.MAX_FILE_SIZE.default;\n\n    if (file.size > maxSize) {\n      throw new BadRequestException(\n        `File size exceeds maximum allowed size of ${maxSize / (1024 * 1024)}MB`,\n      );\n    }\n  }\n\n  private extractKeyFromUrl(fileUrl: string): string {\n    // Sanitize file URL to prevent path traversal\n    const sanitizedUrl = SanitizationUtil.sanitizeFilePath(fileUrl);\n\n    const urlParts = sanitizedUrl.split('.amazonaws.com/');\n    if (urlParts.length !== 2) {\n      const pathParts = sanitizedUrl.split('/');\n      const key = pathParts.slice(3).join('/');\n      // Additional validation to ensure key doesn't contain path traversal\n      return SanitizationUtil.sanitizeFilePath(key);\n    }\n    return SanitizationUtil.sanitizeFilePath(urlParts[1]);\n  }\n}\n"],"version":3}