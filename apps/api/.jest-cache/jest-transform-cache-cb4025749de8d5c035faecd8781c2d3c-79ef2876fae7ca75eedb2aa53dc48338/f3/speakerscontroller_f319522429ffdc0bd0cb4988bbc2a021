ae44cf5f03b27e99fd92e48035f07464
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SpeakersController = void 0;
const common_1 = require("@nestjs/common");
const platform_express_1 = require("@nestjs/platform-express");
const throttler_1 = require("@nestjs/throttler");
const swagger_1 = require("@nestjs/swagger");
const speakers_service_1 = require("./speakers.service");
const jwt_auth_guard_1 = require("@common/guards/jwt-auth.guard");
const roles_guard_1 = require("@common/guards/roles.guard");
const roles_decorator_1 = require("@common/decorators/roles.decorator");
const user_types_1 = require("@shared/types/user.types");
const public_decorator_1 = require("@common/decorators/public.decorator");
const create_speaker_dto_1 = require("./dto/create-speaker.dto");
const update_speaker_dto_1 = require("./dto/update-speaker.dto");
const speaker_filter_dto_1 = require("./dto/speaker-filter.dto");
const api_response_dto_1 = require("@common/dto/api-response.dto");
let SpeakersController = class SpeakersController {
    speakersService;
    constructor(speakersService) {
        this.speakersService = speakersService;
    }
    async create(createSpeakerDto) {
        const speaker = await this.speakersService.create(createSpeakerDto);
        return api_response_dto_1.ApiResponse.success(speaker);
    }
    async findAll(filterDto) {
        const result = await this.speakersService.findAll(filterDto);
        return api_response_dto_1.ApiResponse.success(result.data, result.metadata);
    }
    async findHighlights() {
        const speakers = await this.speakersService.findHighlights();
        return api_response_dto_1.ApiResponse.success(speakers);
    }
    async findOne(id) {
        const speaker = await this.speakersService.findById(id);
        return api_response_dto_1.ApiResponse.success(speaker);
    }
    async update(id, updateSpeakerDto) {
        const speaker = await this.speakersService.update(id, updateSpeakerDto);
        return api_response_dto_1.ApiResponse.success(speaker);
    }
    async uploadPhoto(id, file, req) {
        console.log('üéØ Upload endpoint hit');
        console.log('üë§ User:', req.user);
        console.log('üìÅ File:', file ? 'present' : 'missing');
        console.log('üÜî Speaker ID:', id);
        if (!file) {
            throw new common_1.BadRequestException('No file provided');
        }
        const photoUrl = await this.speakersService.uploadPhoto(id, file);
        return api_response_dto_1.ApiResponse.success({ photoUrl });
    }
    async remove(id, req, reason) {
        const userId = req.user?.id;
        await this.speakersService.remove(id, reason, userId);
    }
    async restore(id) {
        const speaker = await this.speakersService.restore(id);
        return api_response_dto_1.ApiResponse.success(speaker);
    }
};
exports.SpeakersController = SpeakersController;
__decorate([
    (0, common_1.Post)(),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, roles_guard_1.RolesGuard),
    (0, roles_decorator_1.Roles)(user_types_1.UserRole.SUPER_ADMIN, user_types_1.UserRole.PRODUCER),
    (0, common_1.HttpCode)(common_1.HttpStatus.CREATED),
    (0, swagger_1.ApiBearerAuth)('JWT-auth'),
    (0, swagger_1.ApiOperation)({ summary: 'Create new speaker (Admin/Producer only)' }),
    (0, swagger_1.ApiBody)({ type: create_speaker_dto_1.CreateSpeakerDto }),
    (0, swagger_1.ApiResponse)({
        status: 201,
        description: 'Speaker created successfully',
        schema: {
            example: {
                success: true,
                data: {
                    _id: '507f1f77bcf86cd799439011',
                    name: 'Carlos Eduardo Silva',
                    bio: { 'pt-BR': 'Biografia...', en: 'Biography...' },
                    photoUrl: 'https://cdn.vtexday.com/speakers/carlos.jpg',
                    company: 'VTEX',
                    socialLinks: { linkedin: 'https://linkedin.com/in/carlos' },
                    isHighlight: true,
                },
            },
        },
    }),
    (0, swagger_1.ApiResponse)({ status: 400, description: 'Validation error' }),
    (0, swagger_1.ApiResponse)({ status: 401, description: 'Unauthorized' }),
    (0, swagger_1.ApiResponse)({ status: 403, description: 'Forbidden - insufficient role' }),
    __param(0, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [create_speaker_dto_1.CreateSpeakerDto]),
    __metadata("design:returntype", Promise)
], SpeakersController.prototype, "create", null);
__decorate([
    (0, common_1.Get)(),
    (0, public_decorator_1.Public)(),
    (0, swagger_1.ApiOperation)({ summary: 'List all speakers with filters and pagination' }),
    (0, swagger_1.ApiQuery)({ name: 'page', required: false, type: Number, example: 1, description: 'Page number' }),
    (0, swagger_1.ApiQuery)({
        name: 'limit',
        required: false,
        type: Number,
        example: 20,
        description: 'Items per page',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'sort',
        required: false,
        type: String,
        example: '-priority,name',
        description: 'Sort fields',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'search',
        required: false,
        type: String,
        description: 'Search in name, bio, company',
    }),
    (0, swagger_1.ApiQuery)({ name: 'company', required: false, type: String, description: 'Filter by company' }),
    (0, swagger_1.ApiQuery)({
        name: 'isHighlight',
        required: false,
        type: Boolean,
        description: 'Filter highlight speakers',
    }),
    (0, swagger_1.ApiQuery)({ name: 'tags', required: false, type: [String], description: 'Filter by tags' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'List of speakers with pagination',
        schema: {
            example: {
                success: true,
                data: [
                    {
                        _id: '507f1f77bcf86cd799439011',
                        name: 'Carlos Silva',
                        bio: { 'pt-BR': 'Bio...', en: 'Bio...' },
                        photoUrl: 'https://cdn.vtexday.com/speakers/carlos.jpg',
                        company: 'VTEX',
                        position: { 'pt-BR': 'CTO', en: 'CTO' },
                        socialLinks: { linkedin: 'https://linkedin.com' },
                        isHighlight: true,
                    },
                ],
                metadata: {
                    total: 50,
                    page: 1,
                    limit: 20,
                    totalPages: 3,
                    hasNext: true,
                    hasPrev: false,
                },
            },
        },
    }),
    __param(0, (0, common_1.Query)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [speaker_filter_dto_1.SpeakerFilterDto]),
    __metadata("design:returntype", Promise)
], SpeakersController.prototype, "findAll", null);
__decorate([
    (0, common_1.Get)('highlights'),
    (0, public_decorator_1.Public)(),
    (0, swagger_1.ApiOperation)({ summary: 'Get highlighted speakers only' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'List of highlighted speakers',
        schema: {
            example: {
                success: true,
                data: [
                    {
                        _id: '507f1f77bcf86cd799439011',
                        name: 'Carlos Silva',
                        bio: { 'pt-BR': 'Bio...', en: 'Bio...' },
                        photoUrl: 'https://cdn.vtexday.com/speakers/carlos.jpg',
                        company: 'VTEX',
                        isHighlight: true,
                    },
                ],
            },
        },
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], SpeakersController.prototype, "findHighlights", null);
__decorate([
    (0, common_1.Get)(':id'),
    (0, public_decorator_1.Public)(),
    (0, swagger_1.ApiOperation)({ summary: 'Get speaker by ID' }),
    (0, swagger_1.ApiParam)({ name: 'id', description: 'Speaker ID', example: '507f1f77bcf86cd799439011' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Speaker details',
        schema: {
            example: {
                success: true,
                data: {
                    _id: '507f1f77bcf86cd799439011',
                    name: 'Carlos Silva',
                    bio: { 'pt-BR': 'Biografia completa...', en: 'Full biography...' },
                    photoUrl: 'https://cdn.vtexday.com/speakers/carlos.jpg',
                    company: 'VTEX',
                    position: { 'pt-BR': 'CTO', en: 'CTO' },
                    socialLinks: { linkedin: 'https://linkedin.com/in/carlos', twitter: '@carlos' },
                    isHighlight: true,
                    sessions: ['507f1f77bcf86cd799439012'],
                },
            },
        },
    }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Speaker not found' }),
    __param(0, (0, common_1.Param)('id')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], SpeakersController.prototype, "findOne", null);
__decorate([
    (0, common_1.Patch)(':id'),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, roles_guard_1.RolesGuard),
    (0, roles_decorator_1.Roles)(user_types_1.UserRole.SUPER_ADMIN, user_types_1.UserRole.PRODUCER),
    (0, swagger_1.ApiBearerAuth)('JWT-auth'),
    (0, swagger_1.ApiOperation)({ summary: 'Update speaker (Admin/Producer only)' }),
    (0, swagger_1.ApiParam)({ name: 'id', description: 'Speaker ID' }),
    (0, swagger_1.ApiBody)({ type: update_speaker_dto_1.UpdateSpeakerDto }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Speaker updated successfully',
        schema: {
            example: {
                success: true,
                data: {
                    _id: '507f1f77bcf86cd799439011',
                    name: 'Carlos Silva Updated',
                    updatedAt: '2025-11-26T10:00:00Z',
                },
            },
        },
    }),
    (0, swagger_1.ApiResponse)({ status: 400, description: 'Validation error' }),
    (0, swagger_1.ApiResponse)({ status: 401, description: 'Unauthorized' }),
    (0, swagger_1.ApiResponse)({ status: 403, description: 'Forbidden' }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Speaker not found' }),
    __param(0, (0, common_1.Param)('id')),
    __param(1, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, update_speaker_dto_1.UpdateSpeakerDto]),
    __metadata("design:returntype", Promise)
], SpeakersController.prototype, "update", null);
__decorate([
    (0, common_1.Post)(':id/upload-photo'),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, roles_guard_1.RolesGuard),
    (0, roles_decorator_1.Roles)(user_types_1.UserRole.SUPER_ADMIN, user_types_1.UserRole.PRODUCER),
    (0, common_1.UseInterceptors)((0, platform_express_1.FileInterceptor)('file')),
    (0, throttler_1.Throttle)({ default: { limit: 5, ttl: 60000 } }),
    (0, swagger_1.ApiBearerAuth)('JWT-auth'),
    (0, swagger_1.ApiConsumes)('multipart/form-data'),
    (0, swagger_1.ApiOperation)({ summary: 'Upload speaker photo (Admin/Producer only)' }),
    (0, swagger_1.ApiParam)({ name: 'id', description: 'Speaker ID', example: '507f1f77bcf86cd799439011' }),
    (0, swagger_1.ApiBody)({
        schema: {
            type: 'object',
            properties: {
                file: {
                    type: 'string',
                    format: 'binary',
                    description: 'Speaker photo (JPEG, PNG, or WebP, max 5MB)',
                },
            },
        },
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Photo uploaded successfully',
        schema: {
            example: {
                success: true,
                data: {
                    photoUrl: 'https://bucket.s3.region.amazonaws.com/speaker-photos/1234567890-abc123.jpg',
                },
            },
        },
    }),
    (0, swagger_1.ApiResponse)({
        status: 400,
        description: 'Invalid file type or size, or virus detected',
        schema: {
            example: {
                success: false,
                error: 'Invalid file type. Only JPEG, PNG, WEBP files are allowed.',
            },
        },
    }),
    (0, swagger_1.ApiResponse)({ status: 401, description: 'Unauthorized' }),
    (0, swagger_1.ApiResponse)({ status: 403, description: 'Forbidden - insufficient role' }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Speaker not found' }),
    (0, swagger_1.ApiResponse)({
        status: 429,
        description: 'Rate limit exceeded',
        schema: {
            example: {
                success: false,
                error: 'Upload rate limit exceeded. Please try again later.',
            },
        },
    }),
    __param(0, (0, common_1.Param)('id')),
    __param(1, (0, common_1.UploadedFile)()),
    __param(2, (0, common_1.Req)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object, Object]),
    __metadata("design:returntype", Promise)
], SpeakersController.prototype, "uploadPhoto", null);
__decorate([
    (0, common_1.Delete)(':id'),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, roles_guard_1.RolesGuard),
    (0, roles_decorator_1.Roles)(user_types_1.UserRole.SUPER_ADMIN),
    (0, common_1.HttpCode)(common_1.HttpStatus.NO_CONTENT),
    (0, swagger_1.ApiBearerAuth)('JWT-auth'),
    (0, swagger_1.ApiOperation)({ summary: 'Soft delete speaker (Super Admin only)' }),
    (0, swagger_1.ApiParam)({ name: 'id', description: 'Speaker ID' }),
    (0, swagger_1.ApiQuery)({ name: 'reason', required: false, description: 'Reason for deletion' }),
    (0, swagger_1.ApiResponse)({ status: 204, description: 'Speaker deleted successfully' }),
    (0, swagger_1.ApiResponse)({ status: 401, description: 'Unauthorized' }),
    (0, swagger_1.ApiResponse)({ status: 403, description: 'Forbidden' }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Speaker not found' }),
    __param(0, (0, common_1.Param)('id')),
    __param(1, (0, common_1.Req)()),
    __param(2, (0, common_1.Query)('reason')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object, String]),
    __metadata("design:returntype", Promise)
], SpeakersController.prototype, "remove", null);
__decorate([
    (0, common_1.Post)(':id/restore'),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, roles_guard_1.RolesGuard),
    (0, roles_decorator_1.Roles)(user_types_1.UserRole.SUPER_ADMIN),
    (0, swagger_1.ApiBearerAuth)('JWT-auth'),
    (0, swagger_1.ApiOperation)({ summary: 'Restore soft-deleted speaker (Super Admin only)' }),
    (0, swagger_1.ApiParam)({ name: 'id', description: 'Speaker ID' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Speaker restored successfully',
        schema: {
            example: {
                success: true,
                data: {
                    _id: '507f1f77bcf86cd799439011',
                    name: 'Carlos Silva',
                    deletedAt: null,
                },
            },
        },
    }),
    (0, swagger_1.ApiResponse)({ status: 401, description: 'Unauthorized' }),
    (0, swagger_1.ApiResponse)({ status: 403, description: 'Forbidden' }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Speaker not found' }),
    __param(0, (0, common_1.Param)('id')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], SpeakersController.prototype, "restore", null);
exports.SpeakersController = SpeakersController = __decorate([
    (0, swagger_1.ApiTags)('Speakers'),
    (0, common_1.Controller)('speakers'),
    __metadata("design:paramtypes", [speakers_service_1.SpeakersService])
], SpeakersController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,