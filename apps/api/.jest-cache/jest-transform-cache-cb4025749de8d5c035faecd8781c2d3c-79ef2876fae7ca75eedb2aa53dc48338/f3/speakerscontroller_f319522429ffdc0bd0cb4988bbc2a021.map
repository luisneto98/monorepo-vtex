{"file":"/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/speakers/speakers.controller.ts","mappings":"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","names":[],"sources":["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/speakers/speakers.controller.ts"],"sourcesContent":["import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseGuards,\n  Query,\n  HttpCode,\n  HttpStatus,\n  Req,\n  UseInterceptors,\n  UploadedFile,\n  BadRequestException,\n} from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { Throttle } from '@nestjs/throttler';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse as SwaggerApiResponse,\n  ApiBearerAuth,\n  ApiParam,\n  ApiQuery,\n  ApiBody,\n  ApiConsumes,\n} from '@nestjs/swagger';\nimport { SpeakersService } from './speakers.service';\nimport { JwtAuthGuard } from '@common/guards/jwt-auth.guard';\nimport { RolesGuard } from '@common/guards/roles.guard';\nimport { Roles } from '@common/decorators/roles.decorator';\nimport { UserRole } from '@shared/types/user.types';\nimport { Public } from '@common/decorators/public.decorator';\nimport { CreateSpeakerDto } from './dto/create-speaker.dto';\nimport { UpdateSpeakerDto } from './dto/update-speaker.dto';\nimport { SpeakerFilterDto } from './dto/speaker-filter.dto';\nimport { ApiResponse } from '@common/dto/api-response.dto';\nimport { Request } from 'express';\n\n@ApiTags('Speakers')\n@Controller('speakers')\nexport class SpeakersController {\n  constructor(private readonly speakersService: SpeakersService) {}\n\n  @Post()\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(UserRole.SUPER_ADMIN, UserRole.PRODUCER)\n  @HttpCode(HttpStatus.CREATED)\n  @ApiBearerAuth('JWT-auth')\n  @ApiOperation({ summary: 'Create new speaker (Admin/Producer only)' })\n  @ApiBody({ type: CreateSpeakerDto })\n  @SwaggerApiResponse({\n    status: 201,\n    description: 'Speaker created successfully',\n    schema: {\n      example: {\n        success: true,\n        data: {\n          _id: '507f1f77bcf86cd799439011',\n          name: 'Carlos Eduardo Silva',\n          bio: { 'pt-BR': 'Biografia...', en: 'Biography...' },\n          photoUrl: 'https://cdn.vtexday.com/speakers/carlos.jpg',\n          company: 'VTEX',\n          socialLinks: { linkedin: 'https://linkedin.com/in/carlos' },\n          isHighlight: true,\n        },\n      },\n    },\n  })\n  @SwaggerApiResponse({ status: 400, description: 'Validation error' })\n  @SwaggerApiResponse({ status: 401, description: 'Unauthorized' })\n  @SwaggerApiResponse({ status: 403, description: 'Forbidden - insufficient role' })\n  async create(@Body() createSpeakerDto: CreateSpeakerDto) {\n    const speaker = await this.speakersService.create(createSpeakerDto);\n    return ApiResponse.success(speaker);\n  }\n\n  @Get()\n  @Public()\n  @ApiOperation({ summary: 'List all speakers with filters and pagination' })\n  @ApiQuery({ name: 'page', required: false, type: Number, example: 1, description: 'Page number' })\n  @ApiQuery({\n    name: 'limit',\n    required: false,\n    type: Number,\n    example: 20,\n    description: 'Items per page',\n  })\n  @ApiQuery({\n    name: 'sort',\n    required: false,\n    type: String,\n    example: '-priority,name',\n    description: 'Sort fields',\n  })\n  @ApiQuery({\n    name: 'search',\n    required: false,\n    type: String,\n    description: 'Search in name, bio, company',\n  })\n  @ApiQuery({ name: 'company', required: false, type: String, description: 'Filter by company' })\n  @ApiQuery({\n    name: 'isHighlight',\n    required: false,\n    type: Boolean,\n    description: 'Filter highlight speakers',\n  })\n  @ApiQuery({ name: 'tags', required: false, type: [String], description: 'Filter by tags' })\n  @SwaggerApiResponse({\n    status: 200,\n    description: 'List of speakers with pagination',\n    schema: {\n      example: {\n        success: true,\n        data: [\n          {\n            _id: '507f1f77bcf86cd799439011',\n            name: 'Carlos Silva',\n            bio: { 'pt-BR': 'Bio...', en: 'Bio...' },\n            photoUrl: 'https://cdn.vtexday.com/speakers/carlos.jpg',\n            company: 'VTEX',\n            position: { 'pt-BR': 'CTO', en: 'CTO' },\n            socialLinks: { linkedin: 'https://linkedin.com' },\n            isHighlight: true,\n          },\n        ],\n        metadata: {\n          total: 50,\n          page: 1,\n          limit: 20,\n          totalPages: 3,\n          hasNext: true,\n          hasPrev: false,\n        },\n      },\n    },\n  })\n  async findAll(@Query() filterDto: SpeakerFilterDto) {\n    const result = await this.speakersService.findAll(filterDto);\n    return ApiResponse.success(result.data, result.metadata);\n  }\n\n  @Get('highlights')\n  @Public()\n  @ApiOperation({ summary: 'Get highlighted speakers only' })\n  @SwaggerApiResponse({\n    status: 200,\n    description: 'List of highlighted speakers',\n    schema: {\n      example: {\n        success: true,\n        data: [\n          {\n            _id: '507f1f77bcf86cd799439011',\n            name: 'Carlos Silva',\n            bio: { 'pt-BR': 'Bio...', en: 'Bio...' },\n            photoUrl: 'https://cdn.vtexday.com/speakers/carlos.jpg',\n            company: 'VTEX',\n            isHighlight: true,\n          },\n        ],\n      },\n    },\n  })\n  async findHighlights() {\n    const speakers = await this.speakersService.findHighlights();\n    return ApiResponse.success(speakers);\n  }\n\n  @Get(':id')\n  @Public()\n  @ApiOperation({ summary: 'Get speaker by ID' })\n  @ApiParam({ name: 'id', description: 'Speaker ID', example: '507f1f77bcf86cd799439011' })\n  @SwaggerApiResponse({\n    status: 200,\n    description: 'Speaker details',\n    schema: {\n      example: {\n        success: true,\n        data: {\n          _id: '507f1f77bcf86cd799439011',\n          name: 'Carlos Silva',\n          bio: { 'pt-BR': 'Biografia completa...', en: 'Full biography...' },\n          photoUrl: 'https://cdn.vtexday.com/speakers/carlos.jpg',\n          company: 'VTEX',\n          position: { 'pt-BR': 'CTO', en: 'CTO' },\n          socialLinks: { linkedin: 'https://linkedin.com/in/carlos', twitter: '@carlos' },\n          isHighlight: true,\n          sessions: ['507f1f77bcf86cd799439012'],\n        },\n      },\n    },\n  })\n  @SwaggerApiResponse({ status: 404, description: 'Speaker not found' })\n  async findOne(@Param('id') id: string) {\n    const speaker = await this.speakersService.findById(id);\n    return ApiResponse.success(speaker);\n  }\n\n  @Patch(':id')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(UserRole.SUPER_ADMIN, UserRole.PRODUCER)\n  @ApiBearerAuth('JWT-auth')\n  @ApiOperation({ summary: 'Update speaker (Admin/Producer only)' })\n  @ApiParam({ name: 'id', description: 'Speaker ID' })\n  @ApiBody({ type: UpdateSpeakerDto })\n  @SwaggerApiResponse({\n    status: 200,\n    description: 'Speaker updated successfully',\n    schema: {\n      example: {\n        success: true,\n        data: {\n          _id: '507f1f77bcf86cd799439011',\n          name: 'Carlos Silva Updated',\n          updatedAt: '2025-11-26T10:00:00Z',\n        },\n      },\n    },\n  })\n  @SwaggerApiResponse({ status: 400, description: 'Validation error' })\n  @SwaggerApiResponse({ status: 401, description: 'Unauthorized' })\n  @SwaggerApiResponse({ status: 403, description: 'Forbidden' })\n  @SwaggerApiResponse({ status: 404, description: 'Speaker not found' })\n  async update(@Param('id') id: string, @Body() updateSpeakerDto: UpdateSpeakerDto) {\n    const speaker = await this.speakersService.update(id, updateSpeakerDto);\n    return ApiResponse.success(speaker);\n  }\n\n  @Post(':id/upload-photo')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(UserRole.SUPER_ADMIN, UserRole.PRODUCER)\n  @UseInterceptors(FileInterceptor('file'))\n  @Throttle({ default: { limit: 5, ttl: 60000 } })\n  @ApiBearerAuth('JWT-auth')\n  @ApiConsumes('multipart/form-data')\n  @ApiOperation({ summary: 'Upload speaker photo (Admin/Producer only)' })\n  @ApiParam({ name: 'id', description: 'Speaker ID', example: '507f1f77bcf86cd799439011' })\n  @ApiBody({\n    schema: {\n      type: 'object',\n      properties: {\n        file: {\n          type: 'string',\n          format: 'binary',\n          description: 'Speaker photo (JPEG, PNG, or WebP, max 5MB)',\n        },\n      },\n    },\n  })\n  @SwaggerApiResponse({\n    status: 200,\n    description: 'Photo uploaded successfully',\n    schema: {\n      example: {\n        success: true,\n        data: {\n          photoUrl: 'https://bucket.s3.region.amazonaws.com/speaker-photos/1234567890-abc123.jpg',\n        },\n      },\n    },\n  })\n  @SwaggerApiResponse({\n    status: 400,\n    description: 'Invalid file type or size, or virus detected',\n    schema: {\n      example: {\n        success: false,\n        error: 'Invalid file type. Only JPEG, PNG, WEBP files are allowed.',\n      },\n    },\n  })\n  @SwaggerApiResponse({ status: 401, description: 'Unauthorized' })\n  @SwaggerApiResponse({ status: 403, description: 'Forbidden - insufficient role' })\n  @SwaggerApiResponse({ status: 404, description: 'Speaker not found' })\n  @SwaggerApiResponse({\n    status: 429,\n    description: 'Rate limit exceeded',\n    schema: {\n      example: {\n        success: false,\n        error: 'Upload rate limit exceeded. Please try again later.',\n      },\n    },\n  })\n  async uploadPhoto(\n    @Param('id') id: string,\n    @UploadedFile() file: Express.Multer.File,\n    @Req() req: Request,\n  ) {\n    console.log('🎯 Upload endpoint hit');\n    console.log('👤 User:', req.user);\n    console.log('📁 File:', file ? 'present' : 'missing');\n    console.log('🆔 Speaker ID:', id);\n\n    if (!file) {\n      throw new BadRequestException('No file provided');\n    }\n\n    const photoUrl = await this.speakersService.uploadPhoto(id, file);\n    return ApiResponse.success({ photoUrl });\n  }\n\n  @Delete(':id')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(UserRole.SUPER_ADMIN)\n  @HttpCode(HttpStatus.NO_CONTENT)\n  @ApiBearerAuth('JWT-auth')\n  @ApiOperation({ summary: 'Soft delete speaker (Super Admin only)' })\n  @ApiParam({ name: 'id', description: 'Speaker ID' })\n  @ApiQuery({ name: 'reason', required: false, description: 'Reason for deletion' })\n  @SwaggerApiResponse({ status: 204, description: 'Speaker deleted successfully' })\n  @SwaggerApiResponse({ status: 401, description: 'Unauthorized' })\n  @SwaggerApiResponse({ status: 403, description: 'Forbidden' })\n  @SwaggerApiResponse({ status: 404, description: 'Speaker not found' })\n  async remove(@Param('id') id: string, @Req() req: Request, @Query('reason') reason?: string) {\n    const userId = (req as any).user?.id;\n    await this.speakersService.remove(id, reason, userId);\n  }\n\n  @Post(':id/restore')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(UserRole.SUPER_ADMIN)\n  @ApiBearerAuth('JWT-auth')\n  @ApiOperation({ summary: 'Restore soft-deleted speaker (Super Admin only)' })\n  @ApiParam({ name: 'id', description: 'Speaker ID' })\n  @SwaggerApiResponse({\n    status: 200,\n    description: 'Speaker restored successfully',\n    schema: {\n      example: {\n        success: true,\n        data: {\n          _id: '507f1f77bcf86cd799439011',\n          name: 'Carlos Silva',\n          deletedAt: null,\n        },\n      },\n    },\n  })\n  @SwaggerApiResponse({ status: 401, description: 'Unauthorized' })\n  @SwaggerApiResponse({ status: 403, description: 'Forbidden' })\n  @SwaggerApiResponse({ status: 404, description: 'Speaker not found' })\n  async restore(@Param('id') id: string) {\n    const speaker = await this.speakersService.restore(id);\n    return ApiResponse.success(speaker);\n  }\n}\n"],"version":3}