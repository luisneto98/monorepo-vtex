{"file":"/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/event-settings/event-settings.controller.ts","mappings":"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","names":[],"sources":["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/event-settings/event-settings.controller.ts"],"sourcesContent":["import { Controller, Get, Put, Body, UseGuards, Request, HttpStatus } from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiResponse, ApiBearerAuth } from '@nestjs/swagger';\nimport { Throttle } from '@nestjs/throttler';\nimport { EventSettingsService } from './event-settings.service';\nimport { UpdateEventSettingsDto } from './dto/update-event-settings.dto';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\nimport { RolesGuard } from '../auth/guards/roles.guard';\nimport { Roles } from '../auth/decorators/roles.decorator';\nimport { Public } from '../../common/decorators/public.decorator';\nimport { UserRole } from '@vtexday26/shared';\n\n@ApiTags('event-settings')\n@Controller('event-settings')\nexport class EventSettingsController {\n  constructor(private readonly eventSettingsService: EventSettingsService) {}\n\n  @Get()\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Get event settings' })\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'Returns the current event settings',\n  })\n  @ApiResponse({\n    status: HttpStatus.UNAUTHORIZED,\n    description: 'Unauthorized',\n  })\n  async getSettings() {\n    return await this.eventSettingsService.getSettings();\n  }\n\n  @Put()\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(UserRole.SUPER_ADMIN)\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Update event settings (Admin only)' })\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'Event settings have been successfully updated',\n  })\n  @ApiResponse({\n    status: HttpStatus.UNAUTHORIZED,\n    description: 'Unauthorized',\n  })\n  @ApiResponse({\n    status: HttpStatus.FORBIDDEN,\n    description: 'Forbidden - Admin role required',\n  })\n  @ApiResponse({\n    status: HttpStatus.BAD_REQUEST,\n    description: 'Invalid data provided',\n  })\n  async updateSettings(\n    @Body() updateEventSettingsDto: UpdateEventSettingsDto,\n    @Request() req: any,\n  ) {\n    return await this.eventSettingsService.updateSettings(updateEventSettingsDto, req.user.userId);\n  }\n\n  @Get('public')\n  @Public() // No authentication required\n  @Throttle({ default: { limit: 30, ttl: 60000 } }) // 30 requests per minute per IP\n  @ApiOperation({ summary: 'Get public event settings (no auth required)' })\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'Returns the public event settings',\n  })\n  @ApiResponse({\n    status: HttpStatus.TOO_MANY_REQUESTS,\n    description: 'Too many requests - rate limit exceeded',\n  })\n  async getPublicSettings() {\n    return await this.eventSettingsService.getPublicSettings();\n  }\n}\n"],"version":3}