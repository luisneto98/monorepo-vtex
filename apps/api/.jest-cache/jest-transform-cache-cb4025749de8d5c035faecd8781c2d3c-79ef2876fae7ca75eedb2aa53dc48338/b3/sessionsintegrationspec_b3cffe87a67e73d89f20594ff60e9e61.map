{"file":"/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/tests/integration/sessions.integration.spec.ts","mappings":"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","names":[],"sources":["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/tests/integration/sessions.integration.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { INestApplication } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport request from 'supertest';\nimport { SessionsModule } from '../../src/modules/sessions/sessions.module';\nimport { SpeakersModule } from '../../src/modules/speakers/speakers.module';\nimport { SponsorsModule } from '../../src/modules/sponsors/sponsors.module';\nimport { AuthModule } from '../../src/modules/auth/auth.module';\nimport { DatabaseModule } from '../../src/modules/database/database.module';\nimport { JwtService } from '@nestjs/jwt';\n\ndescribe('Sessions Integration Tests', () => {\n  let app: INestApplication;\n  let jwtService: JwtService;\n  let authToken: string;\n  let speakerId: string;\n  let sponsorId: string;\n\n  const testUser = {\n    _id: '507f1f77bcf86cd799439020',\n    email: 'admin@vtexday.com',\n    role: 'super_admin',\n  };\n\n  const createSessionDto = {\n    title: {\n      'pt-BR': 'Palestra sobre IA',\n      en: 'AI Presentation',\n    },\n    description: {\n      'pt-BR': 'Descrição detalhada da palestra sobre inteligência artificial',\n      en: 'Detailed description of artificial intelligence presentation',\n    },\n    startTime: new Date('2025-11-26T10:00:00Z'),\n    endTime: new Date('2025-11-26T11:00:00Z'),\n    stage: 'principal',\n    sessionType: 'talk',\n    tags: ['AI', 'Technology'],\n  };\n\n  beforeAll(async () => {\n    const moduleFixture: TestingModule = await Test.createTestingModule({\n      imports: [\n        MongooseModule.forRoot(\n          process.env['MONGODB_TEST_URI'] || 'mongodb://localhost:27017/vtex-day-test',\n        ),\n        DatabaseModule,\n        AuthModule,\n        SpeakersModule,\n        SponsorsModule,\n        SessionsModule,\n      ],\n    }).compile();\n\n    app = moduleFixture.createNestApplication();\n    jwtService = moduleFixture.get<JwtService>(JwtService);\n\n    authToken = jwtService.sign({\n      sub: testUser._id,\n      email: testUser.email,\n      role: testUser.role,\n    });\n\n    await app.init();\n\n    // Create test speaker and sponsor\n    const speakerResponse = await request(app.getHttpServer())\n      .post('/speakers')\n      .set('Authorization', `Bearer ${authToken}`)\n      .send({\n        name: 'Test Speaker',\n        bio: {\n          'pt-BR':\n            'Biografia do palestrante para teste com mais de cem caracteres necessários para validação',\n          en: 'Speaker biography for testing with more than one hundred characters required for validation',\n        },\n        photoUrl: 'https://example.com/speaker.jpg',\n        company: 'Test Company',\n        position: {\n          'pt-BR': 'Palestrante',\n          en: 'Speaker',\n        },\n      });\n    speakerId = speakerResponse.body.data._id;\n\n    // Create sponsor tier first\n    const tierResponse = await request(app.getHttpServer())\n      .post('/sponsors/tiers')\n      .set('Authorization', `Bearer ${authToken}`)\n      .send({\n        name: 'Test Tier',\n        description: {\n          'pt-BR': 'Nível de teste',\n          en: 'Test tier',\n        },\n        priority: 1,\n        benefits: ['Logo display'],\n        maxSponsors: 5,\n        price: 10000,\n      });\n\n    const sponsorResponse = await request(app.getHttpServer())\n      .post('/sponsors')\n      .set('Authorization', `Bearer ${authToken}`)\n      .send({\n        name: 'Test Sponsor',\n        description: {\n          'pt-BR': 'Patrocinador de teste',\n          en: 'Test sponsor',\n        },\n        logoUrl: 'https://example.com/sponsor.png',\n        websiteUrl: 'https://testsponsor.com',\n        tier: tierResponse.body.data._id,\n        contactInfo: {\n          email: 'contact@testsponsor.com',\n        },\n      });\n    sponsorId = sponsorResponse.body.data._id;\n  });\n\n  afterAll(async () => {\n    await app.close();\n  });\n\n  describe('GET /sessions', () => {\n    it('should return paginated sessions list (public endpoint)', async () => {\n      const response = await request(app.getHttpServer()).get('/sessions').expect(200);\n\n      expect(response.body).toHaveProperty('success', true);\n      expect(response.body).toHaveProperty('data');\n      expect(response.body).toHaveProperty('metadata');\n      expect(response.body.metadata).toHaveProperty('total');\n      expect(response.body.metadata).toHaveProperty('page');\n      expect(response.body.metadata).toHaveProperty('limit');\n    });\n\n    it('should apply date filters correctly', async () => {\n      const response = await request(app.getHttpServer())\n        .get('/sessions?startDate=2025-11-26&endDate=2025-11-28')\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n    });\n\n    it('should apply stage filter correctly', async () => {\n      const response = await request(app.getHttpServer())\n        .get('/sessions?stage=principal')\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n    });\n\n    it('should apply tags filter correctly', async () => {\n      const response = await request(app.getHttpServer())\n        .get('/sessions?tags=AI,Technology')\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n    });\n\n    it('should apply speaker filter correctly', async () => {\n      const response = await request(app.getHttpServer())\n        .get(`/sessions?speakerId=${speakerId}`)\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n    });\n  });\n\n  describe('POST /sessions', () => {\n    it('should create a new session (admin only)', async () => {\n      const sessionDto = {\n        ...createSessionDto,\n        speakers: [speakerId],\n        sponsors: [sponsorId],\n      };\n\n      const response = await request(app.getHttpServer())\n        .post('/sessions')\n        .set('Authorization', `Bearer ${authToken}`)\n        .send(sessionDto)\n        .expect(201);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data).toHaveProperty('_id');\n      expect(response.body.data.title).toEqual(sessionDto.title);\n      expect(response.body.data.stage).toBe(sessionDto.stage);\n    });\n\n    it('should reject request without authentication', async () => {\n      await request(app.getHttpServer()).post('/sessions').send(createSessionDto).expect(401);\n    });\n\n    it('should validate required fields', async () => {\n      const invalidDto = {\n        title: {\n          'pt-BR': '', // Empty title\n        },\n        startTime: 'invalid-date',\n      };\n\n      await request(app.getHttpServer())\n        .post('/sessions')\n        .set('Authorization', `Bearer ${authToken}`)\n        .send(invalidDto)\n        .expect(400);\n    });\n\n    it('should detect session conflicts', async () => {\n      const conflictingDto = {\n        ...createSessionDto,\n        title: {\n          'pt-BR': 'Palestra Conflitante',\n          en: 'Conflicting Session',\n        },\n        startTime: new Date('2025-11-26T10:30:00Z'), // Overlaps with existing session\n        endTime: new Date('2025-11-26T11:30:00Z'),\n        speakers: [speakerId],\n      };\n\n      await request(app.getHttpServer())\n        .post('/sessions')\n        .set('Authorization', `Bearer ${authToken}`)\n        .send(conflictingDto)\n        .expect(409);\n    });\n  });\n\n  describe('GET /sessions/:id', () => {\n    let sessionId: string;\n\n    beforeAll(async () => {\n      const response = await request(app.getHttpServer())\n        .post('/sessions')\n        .set('Authorization', `Bearer ${authToken}`)\n        .send({\n          ...createSessionDto,\n          title: {\n            'pt-BR': 'Sessão para Teste de Detalhes',\n            en: 'Session for Detail Test',\n          },\n          startTime: new Date('2025-11-26T14:00:00Z'),\n          endTime: new Date('2025-11-26T15:00:00Z'),\n          speakers: [speakerId],\n          sponsors: [sponsorId],\n        });\n      sessionId = response.body.data._id;\n    });\n\n    it('should return session details by id (public endpoint)', async () => {\n      const response = await request(app.getHttpServer()).get(`/sessions/${sessionId}`).expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data).toHaveProperty('_id', sessionId);\n      expect(response.body.data).toHaveProperty('title');\n      expect(response.body.data).toHaveProperty('description');\n      expect(response.body.data).toHaveProperty('speakers');\n      expect(response.body.data).toHaveProperty('sponsors');\n    });\n\n    it('should return 404 for non-existent session', async () => {\n      await request(app.getHttpServer()).get('/sessions/507f1f77bcf86cd799439999').expect(404);\n    });\n  });\n\n  describe('PATCH /sessions/:id', () => {\n    let sessionId: string;\n\n    beforeAll(async () => {\n      const response = await request(app.getHttpServer())\n        .post('/sessions')\n        .set('Authorization', `Bearer ${authToken}`)\n        .send({\n          ...createSessionDto,\n          title: {\n            'pt-BR': 'Sessão para Teste de Atualização',\n            en: 'Session for Update Test',\n          },\n          startTime: new Date('2025-11-26T16:00:00Z'),\n          endTime: new Date('2025-11-26T17:00:00Z'),\n          speakers: [speakerId],\n        });\n      sessionId = response.body.data._id;\n    });\n\n    it('should update session (admin only)', async () => {\n      const updateDto = {\n        stage: 'secundario',\n        tags: ['Updated', 'Tags'],\n      };\n\n      const response = await request(app.getHttpServer())\n        .patch(`/sessions/${sessionId}`)\n        .set('Authorization', `Bearer ${authToken}`)\n        .send(updateDto)\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data.stage).toBe(updateDto.stage);\n      expect(response.body.data.tags).toEqual(updateDto.tags);\n    });\n\n    it('should reject request without authentication', async () => {\n      await request(app.getHttpServer())\n        .patch(`/sessions/${sessionId}`)\n        .send({ stage: 'unauthorized-update' })\n        .expect(401);\n    });\n\n    it('should return 404 for non-existent session', async () => {\n      await request(app.getHttpServer())\n        .patch('/sessions/507f1f77bcf86cd799439999')\n        .set('Authorization', `Bearer ${authToken}`)\n        .send({ stage: 'secundario' })\n        .expect(404);\n    });\n  });\n\n  describe('DELETE /sessions/:id', () => {\n    let sessionId: string;\n\n    beforeAll(async () => {\n      const response = await request(app.getHttpServer())\n        .post('/sessions')\n        .set('Authorization', `Bearer ${authToken}`)\n        .send({\n          ...createSessionDto,\n          title: {\n            'pt-BR': 'Sessão para Teste de Exclusão',\n            en: 'Session for Delete Test',\n          },\n          startTime: new Date('2025-11-26T18:00:00Z'),\n          endTime: new Date('2025-11-26T19:00:00Z'),\n          speakers: [speakerId],\n        });\n      sessionId = response.body.data._id;\n    });\n\n    it('should soft delete session (admin only)', async () => {\n      const response = await request(app.getHttpServer())\n        .delete(`/sessions/${sessionId}`)\n        .set('Authorization', `Bearer ${authToken}`)\n        .send({ reason: 'Test deletion' })\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n\n      // Verify session is no longer accessible via public endpoint\n      await request(app.getHttpServer()).get(`/sessions/${sessionId}`).expect(404);\n    });\n\n    it('should reject request without authentication', async () => {\n      await request(app.getHttpServer()).delete(`/sessions/${sessionId}`).expect(401);\n    });\n\n    it('should return 404 for non-existent session', async () => {\n      await request(app.getHttpServer())\n        .delete('/sessions/507f1f77bcf86cd799439999')\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(404);\n    });\n  });\n\n  describe('POST /sessions/:id/restore', () => {\n    let sessionId: string;\n\n    beforeAll(async () => {\n      // Create and delete a session\n      const createResponse = await request(app.getHttpServer())\n        .post('/sessions')\n        .set('Authorization', `Bearer ${authToken}`)\n        .send({\n          ...createSessionDto,\n          title: {\n            'pt-BR': 'Sessão para Teste de Restauração',\n            en: 'Session for Restore Test',\n          },\n          startTime: new Date('2025-11-26T20:00:00Z'),\n          endTime: new Date('2025-11-26T21:00:00Z'),\n          speakers: [speakerId],\n        });\n      sessionId = createResponse.body.data._id;\n\n      await request(app.getHttpServer())\n        .delete(`/sessions/${sessionId}`)\n        .set('Authorization', `Bearer ${authToken}`)\n        .send({ reason: 'Test for restoration' });\n    });\n\n    it('should restore soft-deleted session (admin only)', async () => {\n      const response = await request(app.getHttpServer())\n        .post(`/sessions/${sessionId}/restore`)\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n\n      // Verify session is accessible again via public endpoint\n      await request(app.getHttpServer()).get(`/sessions/${sessionId}`).expect(200);\n    });\n\n    it('should reject request without authentication', async () => {\n      await request(app.getHttpServer()).post(`/sessions/${sessionId}/restore`).expect(401);\n    });\n  });\n\n  describe('GET /sessions/date-range', () => {\n    beforeAll(async () => {\n      // Create session in specific date range\n      await request(app.getHttpServer())\n        .post('/sessions')\n        .set('Authorization', `Bearer ${authToken}`)\n        .send({\n          ...createSessionDto,\n          title: {\n            'pt-BR': 'Sessão em Período Específico',\n            en: 'Session in Specific Period',\n          },\n          startTime: new Date('2025-11-27T10:00:00Z'),\n          endTime: new Date('2025-11-27T11:00:00Z'),\n          speakers: [speakerId],\n        });\n    });\n\n    it('should return sessions within date range (public endpoint)', async () => {\n      const response = await request(app.getHttpServer())\n        .get('/sessions/date-range?startDate=2025-11-27&endDate=2025-11-27')\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(Array.isArray(response.body.data)).toBe(true);\n    });\n  });\n});\n"],"version":3}