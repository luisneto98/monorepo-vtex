{"version":3,"names":["cov_ae1naotd8","actualCoverage","common_1","s","require","mongoose_1","mongoose_2","legal_page_schema_1","storage_service_1","storage_types_1","LegalPagesService","legalPageModel","storageService","constructor","f","create","createLegalPageDto","existingPage","findOne","slug","b","BadRequestException","createdLegalPage","save","error","InternalServerErrorException","findAll","isActive","query","undefined","find","exec","id","legalPage","findById","NotFoundException","findBySlug","update","updateLegalPageDto","userId","updatedData","lastModifiedBy","findByIdAndUpdate","new","uploadFile","file","language","oldFile","files","filename","deleteFile","uploadResult","FileCategory","LEGAL_DOCUMENTS","metadata","legalPageId","uploadedBy","fileMetadata","key","originalName","originalname","size","uploadedAt","Date","remove","deletePromises","Object","values","filter","map","Promise","all","findByIdAndDelete","getPublicPages","pages","select","page","type","title","availableLanguages","keys","lang","getFileStream","stream","getFile","getSignedDownloadUrl","url","getSignedUrl","exports","__decorate","Injectable","__param","InjectModel","LegalPage","name","Model","StorageService"],"sources":["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/legal-pages/legal-pages.service.ts"],"sourcesContent":["import {\n  Injectable,\n  NotFoundException,\n  BadRequestException,\n  InternalServerErrorException,\n} from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { LegalPage, LegalPageDocument, FileMetadata } from './schemas/legal-page.schema';\nimport { CreateLegalPageDto } from './dto/create-legal-page.dto';\nimport { UpdateLegalPageDto } from './dto/update-legal-page.dto';\nimport { SupportedLanguage } from './dto/upload-file.dto';\nimport { StorageService } from '../storage/services/storage.service';\nimport { FileCategory } from '../storage/types/storage.types';\nimport { Readable } from 'stream';\n\n@Injectable()\nexport class LegalPagesService {\n  constructor(\n    @InjectModel(LegalPage.name)\n    private legalPageModel: Model<LegalPageDocument>,\n    private storageService: StorageService,\n  ) {}\n\n  async create(createLegalPageDto: CreateLegalPageDto): Promise<LegalPage> {\n    try {\n      const existingPage = await this.legalPageModel.findOne({ slug: createLegalPageDto.slug });\n      if (existingPage) {\n        throw new BadRequestException('Legal page with this slug already exists');\n      }\n\n      const createdLegalPage = new this.legalPageModel(createLegalPageDto);\n      return await createdLegalPage.save();\n    } catch (error) {\n      if (error instanceof BadRequestException) {\n        throw error;\n      }\n      throw new InternalServerErrorException('Failed to create legal page');\n    }\n  }\n\n  async findAll(isActive?: boolean): Promise<LegalPage[]> {\n    const query = isActive !== undefined ? { isActive } : {};\n    return this.legalPageModel.find(query).exec();\n  }\n\n  async findOne(id: string): Promise<LegalPage> {\n    const legalPage = await this.legalPageModel.findById(id).exec();\n    if (!legalPage) {\n      throw new NotFoundException(`Legal page with ID ${id} not found`);\n    }\n    return legalPage;\n  }\n\n  async findBySlug(slug: string): Promise<LegalPage> {\n    const legalPage = await this.legalPageModel.findOne({ slug }).exec();\n    if (!legalPage) {\n      throw new NotFoundException(`Legal page with slug ${slug} not found`);\n    }\n    return legalPage;\n  }\n\n  async update(\n    id: string,\n    updateLegalPageDto: UpdateLegalPageDto,\n    userId: string,\n  ): Promise<LegalPage> {\n    const updatedData = {\n      ...updateLegalPageDto,\n      lastModifiedBy: userId,\n    };\n\n    const legalPage = await this.legalPageModel\n      .findByIdAndUpdate(id, updatedData, { new: true })\n      .exec();\n\n    if (!legalPage) {\n      throw new NotFoundException(`Legal page with ID ${id} not found`);\n    }\n    return legalPage;\n  }\n\n  async uploadFile(\n    id: string,\n    file: Express.Multer.File,\n    language: SupportedLanguage,\n    userId: string,\n  ): Promise<LegalPage> {\n    const legalPage = await this.legalPageModel.findById(id).exec();\n    if (!legalPage) {\n      throw new NotFoundException(`Legal page with ID ${id} not found`);\n    }\n\n    // Delete old file from S3 if exists\n    const oldFile = legalPage.files?.[language];\n    if (oldFile?.filename) {\n      await this.storageService.deleteFile(oldFile.filename);\n    }\n\n    // Upload new file using StorageService (includes virus scanning and validation)\n    const uploadResult = await this.storageService.uploadFile(file, FileCategory.LEGAL_DOCUMENTS, {\n      metadata: {\n        legalPageId: id,\n        language: language,\n        uploadedBy: userId,\n      },\n    });\n\n    const fileMetadata: FileMetadata = {\n      filename: uploadResult.key,\n      originalName: file.originalname,\n      size: file.size,\n      uploadedAt: new Date(),\n      uploadedBy: userId,\n    };\n\n    if (!legalPage.files) {\n      legalPage.files = {};\n    }\n    legalPage.files[language] = fileMetadata;\n    legalPage.lastModifiedBy = userId;\n\n    return await legalPage.save();\n  }\n\n  async deleteFile(id: string, language: SupportedLanguage, userId: string): Promise<LegalPage> {\n    const legalPage = await this.legalPageModel.findById(id).exec();\n    if (!legalPage) {\n      throw new NotFoundException(`Legal page with ID ${id} not found`);\n    }\n\n    const file = legalPage.files?.[language];\n    if (!file) {\n      throw new NotFoundException(`No file found for language ${language}`);\n    }\n\n    // Delete file from S3\n    await this.storageService.deleteFile(file.filename);\n\n    delete legalPage.files[language];\n    legalPage.lastModifiedBy = userId;\n\n    return await legalPage.save();\n  }\n\n  async remove(id: string): Promise<void> {\n    const legalPage = await this.findOne(id);\n\n    // Delete all files from S3\n    if (legalPage.files) {\n      const deletePromises = Object.values(legalPage.files)\n        .filter((file) => file?.filename)\n        .map((file) => this.storageService.deleteFile(file.filename));\n\n      await Promise.all(deletePromises);\n    }\n\n    await this.legalPageModel.findByIdAndDelete(id).exec();\n  }\n\n  async getPublicPages(): Promise<any[]> {\n    const pages = await this.legalPageModel\n      .find({ isActive: true })\n      .select('slug type title files')\n      .exec();\n\n    return pages.map((page) => ({\n      slug: page.slug,\n      type: page.type,\n      title: page.title,\n      availableLanguages: page.files\n        ? Object.keys(page.files).filter((lang) => page.files[lang])\n        : [],\n    }));\n  }\n\n  async getFileStream(\n    slug: string,\n    language: SupportedLanguage,\n  ): Promise<{ stream: Readable; metadata: FileMetadata }> {\n    const legalPage = await this.findBySlug(slug);\n\n    if (!legalPage.isActive) {\n      throw new NotFoundException('This legal page is not available');\n    }\n\n    const file = legalPage.files?.[language];\n    if (!file) {\n      throw new NotFoundException(`No file available for language ${language}`);\n    }\n\n    // Get file stream from S3\n    const stream = await this.storageService.getFile(file.filename);\n    return { stream, metadata: file };\n  }\n\n  async getSignedDownloadUrl(\n    slug: string,\n    language: SupportedLanguage,\n  ): Promise<{ url: string; metadata: FileMetadata }> {\n    const legalPage = await this.findBySlug(slug);\n\n    if (!legalPage.isActive) {\n      throw new NotFoundException('This legal page is not available');\n    }\n\n    const file = legalPage.files?.[language];\n    if (!file) {\n      throw new NotFoundException(`No file available for language ${language}`);\n    }\n\n    // Generate signed URL for direct S3 access\n    const url = await this.storageService.getSignedUrl(file.filename);\n    return { url, metadata: file };\n  }\n}\n"],"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","ignoreList":[]}