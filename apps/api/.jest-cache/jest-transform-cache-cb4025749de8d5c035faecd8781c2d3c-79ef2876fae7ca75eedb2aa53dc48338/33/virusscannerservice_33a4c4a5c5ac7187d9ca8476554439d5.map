{"version":3,"names":["common_1","cov_5fpj1fqwk","s","require","config_1","crypto","__importStar","VirusScannerService","VirusScannerService_1","configService","logger","Logger","name","scanningEnabled","constructor","f","get","scanFile","file","filename","b","debug","performBasicChecks","clamavHost","clamavPort","scanWithClamAV","performHeuristicScanning","error","message","stack","BadRequestException","pdfMagicBytes","Buffer","from","fileMagicBytes","slice","equals","suspiciousPatterns","fileContent","toString","pattern","test","warn","source","length","host","port","net","Promise","resolve","reject","client","Socket","setTimeout","connect","write","chunkSize","offset","chunk","Math","min","sizeBuffer","allocUnsafe","writeUInt32BE","endBuffer","on","data","response","trim","destroy","includes","virus","match","Error","fileHash","createHash","update","digest","fileStr","obfuscationPatterns","suspiciousCount","matches","externalRefs","quarantineFile","reason","event","hash","timestamp","Date","toISOString","exports","__decorate","Injectable","ConfigService"],"sources":["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/legal-pages/services/virus-scanner.service.ts"],"sourcesContent":["import { Injectable, Logger, BadRequestException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport * as crypto from 'crypto';\n\n@Injectable()\nexport class VirusScannerService {\n  private readonly logger = new Logger(VirusScannerService.name);\n  private readonly scanningEnabled: boolean;\n\n  constructor(private configService: ConfigService) {\n    this.scanningEnabled = this.configService.get<boolean>('VIRUS_SCANNING_ENABLED', false);\n  }\n\n  /**\n   * Scans a file for viruses\n   * @param file - The file buffer to scan\n   * @param filename - The name of the file being scanned\n   * @returns Promise<boolean> - true if file is clean, throws error if infected\n   */\n  async scanFile(file: Buffer, filename: string): Promise<boolean> {\n    if (!this.scanningEnabled) {\n      this.logger.debug(`Virus scanning disabled, skipping scan for ${filename}`);\n      return true;\n    }\n\n    try {\n      // Perform basic checks\n      await this.performBasicChecks(file, filename);\n\n      // If ClamAV is configured, use it\n      const clamavHost = this.configService.get<string>('CLAMAV_HOST');\n      const clamavPort = this.configService.get<number>('CLAMAV_PORT', 3310);\n\n      if (clamavHost) {\n        return await this.scanWithClamAV(file, filename, clamavHost, clamavPort);\n      }\n\n      // If no external scanner, perform enhanced heuristic checks\n      return await this.performHeuristicScanning(file, filename);\n    } catch (error: any) {\n      this.logger.error(`Virus scanning failed for ${filename}: ${error.message}`, error.stack);\n\n      // Fail-safe: if scanning fails, reject the file for safety\n      throw new BadRequestException('File scanning failed. Please try again or contact support.');\n    }\n  }\n\n  /**\n   * Performs basic file validation checks\n   */\n  private async performBasicChecks(file: Buffer, filename: string): Promise<void> {\n    // Check for PDF magic bytes\n    const pdfMagicBytes = Buffer.from([0x25, 0x50, 0x44, 0x46]); // %PDF\n    const fileMagicBytes = file.slice(0, 4);\n\n    if (!fileMagicBytes.equals(pdfMagicBytes)) {\n      throw new BadRequestException(`File ${filename} is not a valid PDF file`);\n    }\n\n    // Check for suspicious patterns in the file\n    const suspiciousPatterns = [\n      /\\/JavaScript/i,\n      /\\/JS/i,\n      /\\/Launch/i,\n      /\\/EmbeddedFile/i,\n      /\\/OpenAction/i,\n      /\\/AA/i, // Additional Actions\n      /\\/URI/i, // External URLs\n      /\\/SubmitForm/i,\n      /\\/ImportData/i,\n      /\\/Hide/i,\n    ];\n\n    const fileContent = file.toString('latin1');\n\n    for (const pattern of suspiciousPatterns) {\n      if (pattern.test(fileContent)) {\n        this.logger.warn(\n          `Potentially dangerous content detected in ${filename}: ${pattern.source}`,\n        );\n\n        // Allow with warning for now, but log for monitoring\n        // In production, you might want to reject these files\n        // throw new BadRequestException(\n        //   `File ${filename} contains potentially dangerous content and was rejected`\n        // );\n      }\n    }\n\n    // Check file size for anomalies (e.g., extremely small PDF)\n    if (file.length < 1024) {\n      // Less than 1KB is suspicious for a PDF\n      throw new BadRequestException(`File ${filename} is too small to be a valid PDF`);\n    }\n  }\n\n  /**\n   * Scans file using ClamAV antivirus\n   */\n  private async scanWithClamAV(\n    file: Buffer,\n    filename: string,\n    host: string,\n    port: number,\n  ): Promise<boolean> {\n    const net = require('net');\n\n    return new Promise((resolve, reject) => {\n      const client = new net.Socket();\n\n      client.setTimeout(30000); // 30 second timeout\n\n      client.connect(port, host, () => {\n        this.logger.debug(`Connected to ClamAV at ${host}:${port}`);\n\n        // Send INSTREAM command\n        client.write('zINSTREAM\\0');\n\n        // Send file size and content in chunks\n        const chunkSize = 65536; // 64KB chunks\n        let offset = 0;\n\n        while (offset < file.length) {\n          const chunk = file.slice(offset, Math.min(offset + chunkSize, file.length));\n          const sizeBuffer = Buffer.allocUnsafe(4);\n          sizeBuffer.writeUInt32BE(chunk.length, 0);\n          client.write(sizeBuffer);\n          client.write(chunk);\n          offset += chunkSize;\n        }\n\n        // Send zero-length chunk to indicate end\n        const endBuffer = Buffer.allocUnsafe(4);\n        endBuffer.writeUInt32BE(0, 0);\n        client.write(endBuffer);\n      });\n\n      client.on('data', (data: Buffer) => {\n        const response = data.toString().trim();\n        client.destroy();\n\n        if (response === 'stream: OK') {\n          this.logger.debug(`File ${filename} is clean`);\n          resolve(true);\n        } else if (response.includes('FOUND')) {\n          const virus = response.match(/stream: (.+) FOUND/)?.[1] || 'Unknown';\n          this.logger.warn(`Virus detected in ${filename}: ${virus}`);\n          reject(new BadRequestException(`File ${filename} is infected with ${virus}`));\n        } else {\n          this.logger.error(`Unknown ClamAV response: ${response}`);\n          reject(new Error('Unknown virus scan response'));\n        }\n      });\n\n      client.on('error', (error: Error) => {\n        this.logger.error(`ClamAV connection error: ${error.message}`);\n        client.destroy();\n        reject(error);\n      });\n\n      client.on('timeout', () => {\n        this.logger.error('ClamAV scan timeout');\n        client.destroy();\n        reject(new Error('Virus scan timeout'));\n      });\n    });\n  }\n\n  /**\n   * Performs heuristic virus scanning without external service\n   */\n  private async performHeuristicScanning(file: Buffer, filename: string): Promise<boolean> {\n    // Calculate file hash for comparison with known malware databases\n    const fileHash = crypto.createHash('sha256').update(file).digest('hex');\n\n    this.logger.debug(`Heuristic scanning ${filename} (SHA256: ${fileHash})`);\n\n    // Check for obfuscated JavaScript\n    const fileStr = file.toString('latin1');\n    const obfuscationPatterns = [\n      /eval\\s*\\(/i,\n      /unescape\\s*\\(/i,\n      /String\\.fromCharCode/i,\n      /\\\\x[0-9a-f]{2}/gi,\n      /\\\\u[0-9a-f]{4}/gi,\n    ];\n\n    let suspiciousCount = 0;\n    for (const pattern of obfuscationPatterns) {\n      const matches = fileStr.match(pattern);\n      if (matches && matches.length > 5) {\n        // More than 5 occurrences is suspicious\n        suspiciousCount++;\n      }\n    }\n\n    if (suspiciousCount >= 3) {\n      this.logger.warn(`File ${filename} contains suspicious obfuscation patterns`);\n      throw new BadRequestException(\n        `File ${filename} contains suspicious content and was rejected`,\n      );\n    }\n\n    // Check for excessive external references\n    const externalRefs = fileStr.match(/\\/URI\\s*\\(/gi) || [];\n    if (externalRefs.length > 10) {\n      this.logger.warn(`File ${filename} contains excessive external references`);\n      throw new BadRequestException(`File ${filename} contains too many external references`);\n    }\n\n    // If all checks pass, file is considered clean\n    this.logger.debug(`File ${filename} passed heuristic scanning`);\n    return true;\n  }\n\n  /**\n   * Quarantines a suspicious file for later analysis\n   */\n  async quarantineFile(file: Buffer, filename: string, reason: string): Promise<void> {\n    const fileHash = crypto.createHash('sha256').update(file).digest('hex');\n\n    this.logger.warn(`Quarantining file ${filename} (${fileHash}): ${reason}`);\n\n    // In production, you would:\n    // 1. Move file to quarantine storage\n    // 2. Log details to security monitoring system\n    // 3. Alert security team\n    // 4. Store metadata for analysis\n\n    // For now, just log the event\n    this.logger.warn({\n      event: 'FILE_QUARANTINED',\n      filename,\n      hash: fileHash,\n      reason,\n      timestamp: new Date().toISOString(),\n    });\n  }\n}\n"],"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","ignoreList":[]}