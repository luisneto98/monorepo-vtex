{"file":"/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/event-settings/event-settings.service.ts","mappings":"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","names":[],"sources":["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/event-settings/event-settings.service.ts"],"sourcesContent":["import { Injectable, BadRequestException, Logger } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { EventSettings, EventSettingsDocument } from './schemas/event-settings.schema';\nimport { UpdateEventSettingsDto } from './dto/update-event-settings.dto';\nimport { IEventSettings } from './interfaces/event-settings.interface';\nimport { CACHE_MANAGER } from '@nestjs/cache-manager';\nimport { Inject } from '@nestjs/common';\nimport { Cache } from 'cache-manager';\n\n@Injectable()\nexport class EventSettingsService {\n  private readonly logger = new Logger(EventSettingsService.name);\n  private readonly CACHE_KEY = 'event-settings:public';\n  private readonly CACHE_TTL = 300000; // 5 minutes in milliseconds\n\n  constructor(\n    @InjectModel(EventSettings.name)\n    private eventSettingsModel: Model<EventSettingsDocument>,\n    @Inject(CACHE_MANAGER) private cacheManager: Cache,\n  ) {}\n\n  async getSettings(): Promise<IEventSettings> {\n    try {\n      let settings = await this.eventSettingsModel.findOne().exec();\n\n      if (!settings) {\n        // Create default settings if none exist\n        settings = await this.createDefaultSettings();\n      }\n\n      return settings.toObject() as IEventSettings;\n    } catch (error) {\n      this.logger.error('Error getting event settings', error);\n      throw error;\n    }\n  }\n\n  async getPublicSettings(): Promise<IEventSettings> {\n    try {\n      // Check cache first\n      const cached = await this.cacheManager.get<IEventSettings>(this.CACHE_KEY);\n      if (cached) {\n        return cached;\n      }\n\n      const settings = await this.getSettings();\n\n      // Sanitize data for public consumption\n      const publicSettings: IEventSettings = {\n        eventName: settings.eventName,\n        startDate: settings.startDate,\n        endDate: settings.endDate,\n        venue: settings.venue,\n        contact: {\n          email: settings.contact.email,\n          phone: settings.contact.phone,\n          whatsapp: settings.contact.whatsapp,\n        },\n        socialMedia: settings.socialMedia,\n        mapCoordinates: settings.mapCoordinates,\n        updatedBy: '', // Don't expose who updated\n      };\n\n      // Cache the result\n      await this.cacheManager.set(this.CACHE_KEY, publicSettings, this.CACHE_TTL);\n\n      return publicSettings;\n    } catch (error) {\n      this.logger.error('Error getting public event settings', error);\n      throw error;\n    }\n  }\n\n  async updateSettings(updateDto: UpdateEventSettingsDto, userId: string): Promise<IEventSettings> {\n    try {\n      // Get previous settings for audit comparison\n      const previousSettings = await this.eventSettingsModel.findOne().exec();\n\n      // Validate dates if both are provided\n      if (updateDto.startDate && updateDto.endDate) {\n        const startDate = new Date(updateDto.startDate);\n        const endDate = new Date(updateDto.endDate);\n\n        if (endDate <= startDate) {\n          throw new BadRequestException('End date must be after start date');\n        }\n      }\n\n      // Use findOneAndUpdate with upsert to ensure singleton pattern\n      const settings = await this.eventSettingsModel\n        .findOneAndUpdate(\n          {},\n          {\n            ...updateDto,\n            updatedBy: userId,\n            updatedAt: new Date(),\n          },\n          {\n            new: true,\n            upsert: true,\n            runValidators: true,\n          },\n        )\n        .exec();\n\n      // Clear cache when settings are updated\n      await this.cacheManager.del(this.CACHE_KEY);\n\n      // Enhanced audit logging\n      const auditLog = {\n        action: previousSettings ? 'UPDATE' : 'CREATE',\n        entityType: 'EventSettings',\n        entityId: settings._id,\n        userId,\n        timestamp: new Date().toISOString(),\n        changes: this.getChangedFields(previousSettings, settings),\n        ipAddress: 'Not captured - consider adding from request context',\n      };\n\n      this.logger.log('Event Settings Audit Log:', auditLog);\n\n      // Log specific important changes\n      if (updateDto.startDate || updateDto.endDate) {\n        this.logger.warn(\n          `Event dates changed by user ${userId}: Start: ${updateDto.startDate}, End: ${updateDto.endDate}`,\n        );\n      }\n\n      if (updateDto.venue) {\n        this.logger.warn(\n          `Event venue changed by user ${userId}: ${JSON.stringify(updateDto.venue)}`,\n        );\n      }\n\n      return settings.toObject() as IEventSettings;\n    } catch (error) {\n      this.logger.error('Error updating event settings', error);\n      throw error;\n    }\n  }\n\n  private getChangedFields(oldDoc: any, newDoc: any): Record<string, any> {\n    const changes: Record<string, any> = {};\n\n    if (!oldDoc) {\n      return { allFields: 'Initial creation' };\n    }\n\n    const fieldsToCheck = [\n      'eventName',\n      'startDate',\n      'endDate',\n      'venue',\n      'contact',\n      'socialMedia',\n      'mapCoordinates',\n    ];\n\n    for (const field of fieldsToCheck) {\n      if (JSON.stringify(oldDoc[field]) !== JSON.stringify(newDoc[field])) {\n        changes[field] = {\n          old: oldDoc[field],\n          new: newDoc[field],\n        };\n      }\n    }\n\n    return changes;\n  }\n\n  private async createDefaultSettings(): Promise<any> {\n    const defaultSettings = new this.eventSettingsModel({\n      eventName: {\n        pt: 'VTEX Day 2026',\n        en: 'VTEX Day 2026',\n        es: 'VTEX Day 2026',\n      },\n      startDate: new Date('2026-06-01T09:00:00Z'),\n      endDate: new Date('2026-06-03T18:00:00Z'),\n      venue: {\n        name: 'São Paulo Expo',\n        address: 'Rodovia dos Imigrantes, km 1,5',\n        city: 'São Paulo',\n        state: 'SP',\n        zipCode: '04329-100',\n        complement: 'Água Funda',\n      },\n      contact: {\n        email: 'contato@vtexday.com.br',\n        phone: '+55 11 9999-9999',\n        whatsapp: '+55 11 9999-9999',\n      },\n      socialMedia: {\n        instagram: 'https://instagram.com/vtexday',\n        facebook: 'https://facebook.com/vtexday',\n        linkedin: 'https://linkedin.com/company/vtexday',\n        twitter: 'https://twitter.com/vtexday',\n        youtube: 'https://youtube.com/vtexday',\n      },\n      mapCoordinates: {\n        latitude: -23.6283,\n        longitude: -46.6409,\n      },\n      updatedBy: 'system',\n    });\n\n    return await defaultSettings.save();\n  }\n}\n"],"version":3}