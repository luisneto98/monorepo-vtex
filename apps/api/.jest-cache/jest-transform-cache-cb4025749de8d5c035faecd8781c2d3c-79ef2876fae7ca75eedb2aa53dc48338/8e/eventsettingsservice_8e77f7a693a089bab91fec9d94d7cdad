db109616f22afe324289f0bb517c7e52
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var EventSettingsService_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventSettingsService = void 0;
const common_1 = require("@nestjs/common");
const mongoose_1 = require("@nestjs/mongoose");
const mongoose_2 = require("mongoose");
const event_settings_schema_1 = require("./schemas/event-settings.schema");
const cache_manager_1 = require("@nestjs/cache-manager");
const common_2 = require("@nestjs/common");
let EventSettingsService = EventSettingsService_1 = class EventSettingsService {
    eventSettingsModel;
    cacheManager;
    logger = new common_1.Logger(EventSettingsService_1.name);
    CACHE_KEY = 'event-settings:public';
    CACHE_TTL = 300000; // 5 minutes in milliseconds
    constructor(eventSettingsModel, cacheManager) {
        this.eventSettingsModel = eventSettingsModel;
        this.cacheManager = cacheManager;
    }
    async getSettings() {
        try {
            let settings = await this.eventSettingsModel.findOne().exec();
            if (!settings) {
                // Create default settings if none exist
                settings = await this.createDefaultSettings();
            }
            return settings.toObject();
        }
        catch (error) {
            this.logger.error('Error getting event settings', error);
            throw error;
        }
    }
    async getPublicSettings() {
        try {
            // Check cache first
            const cached = await this.cacheManager.get(this.CACHE_KEY);
            if (cached) {
                return cached;
            }
            const settings = await this.getSettings();
            // Sanitize data for public consumption
            const publicSettings = {
                eventName: settings.eventName,
                startDate: settings.startDate,
                endDate: settings.endDate,
                venue: settings.venue,
                contact: {
                    email: settings.contact.email,
                    phone: settings.contact.phone,
                    whatsapp: settings.contact.whatsapp,
                },
                socialMedia: settings.socialMedia,
                mapCoordinates: settings.mapCoordinates,
                updatedBy: '', // Don't expose who updated
            };
            // Cache the result
            await this.cacheManager.set(this.CACHE_KEY, publicSettings, this.CACHE_TTL);
            return publicSettings;
        }
        catch (error) {
            this.logger.error('Error getting public event settings', error);
            throw error;
        }
    }
    async updateSettings(updateDto, userId) {
        try {
            // Get previous settings for audit comparison
            const previousSettings = await this.eventSettingsModel.findOne().exec();
            // Validate dates if both are provided
            if (updateDto.startDate && updateDto.endDate) {
                const startDate = new Date(updateDto.startDate);
                const endDate = new Date(updateDto.endDate);
                if (endDate <= startDate) {
                    throw new common_1.BadRequestException('End date must be after start date');
                }
            }
            // Use findOneAndUpdate with upsert to ensure singleton pattern
            const settings = await this.eventSettingsModel
                .findOneAndUpdate({}, {
                ...updateDto,
                updatedBy: userId,
                updatedAt: new Date(),
            }, {
                new: true,
                upsert: true,
                runValidators: true,
            })
                .exec();
            // Clear cache when settings are updated
            await this.cacheManager.del(this.CACHE_KEY);
            // Enhanced audit logging
            const auditLog = {
                action: previousSettings ? 'UPDATE' : 'CREATE',
                entityType: 'EventSettings',
                entityId: settings._id,
                userId,
                timestamp: new Date().toISOString(),
                changes: this.getChangedFields(previousSettings, settings),
                ipAddress: 'Not captured - consider adding from request context',
            };
            this.logger.log('Event Settings Audit Log:', auditLog);
            // Log specific important changes
            if (updateDto.startDate || updateDto.endDate) {
                this.logger.warn(`Event dates changed by user ${userId}: Start: ${updateDto.startDate}, End: ${updateDto.endDate}`);
            }
            if (updateDto.venue) {
                this.logger.warn(`Event venue changed by user ${userId}: ${JSON.stringify(updateDto.venue)}`);
            }
            return settings.toObject();
        }
        catch (error) {
            this.logger.error('Error updating event settings', error);
            throw error;
        }
    }
    getChangedFields(oldDoc, newDoc) {
        const changes = {};
        if (!oldDoc) {
            return { allFields: 'Initial creation' };
        }
        const fieldsToCheck = [
            'eventName',
            'startDate',
            'endDate',
            'venue',
            'contact',
            'socialMedia',
            'mapCoordinates',
        ];
        for (const field of fieldsToCheck) {
            if (JSON.stringify(oldDoc[field]) !== JSON.stringify(newDoc[field])) {
                changes[field] = {
                    old: oldDoc[field],
                    new: newDoc[field],
                };
            }
        }
        return changes;
    }
    async createDefaultSettings() {
        const defaultSettings = new this.eventSettingsModel({
            eventName: {
                pt: 'VTEX Day 2026',
                en: 'VTEX Day 2026',
                es: 'VTEX Day 2026',
            },
            startDate: new Date('2026-06-01T09:00:00Z'),
            endDate: new Date('2026-06-03T18:00:00Z'),
            venue: {
                name: 'São Paulo Expo',
                address: 'Rodovia dos Imigrantes, km 1,5',
                city: 'São Paulo',
                state: 'SP',
                zipCode: '04329-100',
                complement: 'Água Funda',
            },
            contact: {
                email: 'contato@vtexday.com.br',
                phone: '+55 11 9999-9999',
                whatsapp: '+55 11 9999-9999',
            },
            socialMedia: {
                instagram: 'https://instagram.com/vtexday',
                facebook: 'https://facebook.com/vtexday',
                linkedin: 'https://linkedin.com/company/vtexday',
                twitter: 'https://twitter.com/vtexday',
                youtube: 'https://youtube.com/vtexday',
            },
            mapCoordinates: {
                latitude: -23.6283,
                longitude: -46.6409,
            },
            updatedBy: 'system',
        });
        return await defaultSettings.save();
    }
};
exports.EventSettingsService = EventSettingsService;
exports.EventSettingsService = EventSettingsService = EventSettingsService_1 = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, mongoose_1.InjectModel)(event_settings_schema_1.EventSettings.name)),
    __param(1, (0, common_2.Inject)(cache_manager_1.CACHE_MANAGER)),
    __metadata("design:paramtypes", [mongoose_2.Model, Object])
], EventSettingsService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,