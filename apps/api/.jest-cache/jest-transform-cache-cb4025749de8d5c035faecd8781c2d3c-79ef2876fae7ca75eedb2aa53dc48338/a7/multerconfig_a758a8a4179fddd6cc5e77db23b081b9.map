{"version":3,"names":["cov_ua5ox8ywx","actualCoverage","s","common_1","require","s3_config_1","exports","multerConfig","limits","fileSize","S3_CONFIG","MAX_FILE_SIZE","default","fileFilter","_req","file","callback","f","extension","originalname","split","pop","toLowerCase","b","BadRequestException","isAllowed","Object","values","ALLOWED_FORMATS","some","formats","includes","getMulterOptionsForType","materialType","allowedFormats","maxSize","video"],"sources":["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/config/multer.config.ts"],"sourcesContent":["import { MulterOptions } from '@nestjs/platform-express/multer/interfaces/multer-options.interface';\nimport { BadRequestException } from '@nestjs/common';\nimport { S3_CONFIG } from './s3.config';\n\nexport const multerConfig: MulterOptions = {\n  limits: {\n    fileSize: S3_CONFIG.MAX_FILE_SIZE.default,\n  },\n  fileFilter: (_req, file, callback) => {\n    const extension = file.originalname.split('.').pop()?.toLowerCase();\n\n    if (!extension) {\n      return callback(new BadRequestException('File must have an extension'), false);\n    }\n\n    // Check if extension is allowed for any material type\n    const isAllowed = Object.values(S3_CONFIG.ALLOWED_FORMATS).some((formats) =>\n      formats.includes(extension),\n    );\n\n    if (!isAllowed) {\n      return callback(new BadRequestException(`File type .${extension} is not allowed`), false);\n    }\n\n    callback(null, true);\n  },\n};\n\nexport const getMulterOptionsForType = (materialType: string): MulterOptions => {\n  const allowedFormats = S3_CONFIG.ALLOWED_FORMATS[materialType];\n  const maxSize =\n    materialType === 'video' ? S3_CONFIG.MAX_FILE_SIZE.video : S3_CONFIG.MAX_FILE_SIZE.default;\n\n  return {\n    limits: {\n      fileSize: maxSize,\n    },\n    fileFilter: (_req, file, callback) => {\n      const extension = file.originalname.split('.').pop()?.toLowerCase();\n\n      if (!extension) {\n        return callback(new BadRequestException('File must have an extension'), false);\n      }\n\n      if (!allowedFormats || !allowedFormats.includes(extension)) {\n        return callback(\n          new BadRequestException(`File type .${extension} is not allowed for ${materialType}`),\n          false,\n        );\n      }\n\n      callback(null, true);\n    },\n  };\n};\n"],"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","ignoreList":[]}