{"file":"/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/news-releases/tests/news-releases.service.spec.ts","mappings":";;AAAA,6CAAsD;AACtD,+CAAiD;AACjD,oEAA+D;AAC/D,wEAA6D;AAC7D,2FAAsF;AACtF,qEAAgE;AAChE,mFAA8E;AAC9E,6FAAwF;AACxF,+EAA0E;AAC1E,8CAAsD;AACtD,2CAAmD;AAEnD,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;IACnC,IAAI,OAA4B,CAAC;IACjC,IAAI,SAAc,CAAC;IACnB,IAAI,8BAAmC,CAAC;IACxC,IAAI,mBAAwB,CAAC;IAE7B,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,SAAS,GAAG;YACV,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE;YAClB,QAAQ,EAAE,IAAI,CAAC,EAAE,EAAE;YACnB,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE;YACf,iBAAiB,EAAE,IAAI,CAAC,EAAE,EAAE;YAC5B,cAAc,EAAE,IAAI,CAAC,EAAE,EAAE;YACzB,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;YACjB,WAAW,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;gBAC1B,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE;gBACf,EAAE,EAAE,SAAS;aACd,CAAC,CAAC;SACJ,CAAC;QAEF,8BAA8B,GAAG;YAC/B,kBAAkB,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC;SAClD,CAAC;QAEF,mBAAmB,GAAG;YACpB,SAAS,EAAE,IAAI,CAAC,EAAE,EAAE;SACrB,CAAC;QAEF,MAAM,0BAA0B,GAAG;YACjC,WAAW,EAAE,IAAI,CAAC,EAAE,EAAE;YACtB,WAAW,EAAE,IAAI,CAAC,EAAE,EAAE;SACvB,CAAC;QAEF,MAAM,+BAA+B,GAAG;YACtC,mBAAmB,EAAE,IAAI,CAAC,EAAE,EAAE;YAC9B,0BAA0B,EAAE,IAAI,CAAC,EAAE,EAAE;SACtC,CAAC;QAEF,MAAM,wBAAwB,GAAG;YAC/B,eAAe,EAAE,IAAI,CAAC,EAAE,EAAE;YAC1B,gBAAgB,EAAE,IAAI,CAAC,EAAE,EAAE;SAC5B,CAAC;QAEF,MAAM,MAAM,GAAkB,MAAM,cAAI,CAAC,mBAAmB,CAAC;YAC3D,SAAS,EAAE;gBACT,2CAAmB;gBACnB;oBACE,OAAO,EAAE,IAAA,wBAAa,EAAC,iCAAW,CAAC,IAAI,CAAC;oBACxC,QAAQ,EAAE,SAAS;iBACpB;gBACD;oBACE,OAAO,EAAE,yDAA0B;oBACnC,QAAQ,EAAE,8BAA8B;iBACzC;gBACD;oBACE,OAAO,EAAE,mCAAe;oBACxB,QAAQ,EAAE,mBAAmB;iBAC9B;gBACD;oBACE,OAAO,EAAE,iDAAsB;oBAC/B,QAAQ,EAAE,0BAA0B;iBACrC;gBACD;oBACE,OAAO,EAAE,2DAA2B;oBACpC,QAAQ,EAAE,+BAA+B;iBAC1C;gBACD;oBACE,OAAO,EAAE,6CAAoB;oBAC7B,QAAQ,EAAE,wBAAwB;iBACnC;aACF;SACF,CAAC,CAAC,OAAO,EAAE,CAAC;QAEb,OAAO,GAAG,MAAM,CAAC,GAAG,CAAsB,2CAAmB,CAAC,CAAC;IACjE,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;QACtB,EAAE,CAAC,8BAA8B,EAAE,KAAK,IAAI,EAAE;YAC5C,MAAM,GAAG,GAAG;gBACV,OAAO,EAAE;oBACP,OAAO,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE,OAAO,EAAE,UAAU,EAAE;oBACjD,EAAE,EAAE,EAAE,KAAK,EAAE,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE;oBAC1C,EAAE,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE,OAAO,EAAE,WAAW,EAAE;iBAC9C;gBACD,MAAM,EAAE,0BAAiB,CAAC,KAAK;aAChC,CAAC;YAEF,MAAM,IAAI,GAAG;gBACX,EAAE,EAAE,SAAS;gBACb,IAAI,EAAE,WAAW;gBACjB,KAAK,EAAE,kBAAkB;gBACzB,IAAI,EAAE,OAAO;aACd,CAAC;YAEF,MAAM,SAAS,GAAG;gBAChB,GAAG,EAAE,YAAY;gBACjB,IAAI,EAAE,OAAO;gBACb,GAAG,GAAG;gBACN,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,EAAE,GAAG,EAAE,YAAY,EAAE,CAAC;aACzD,CAAC;YAEF,SAAS,CAAC,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;YAC1C,SAAS,CAAC,WAAW,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;YAEjD,MAAM,OAAO,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;YAEhC,MAAM,CAAC,8BAA8B,CAAC,kBAAkB,CAAC,CAAC,oBAAoB,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YAC5F,MAAM,CAAC,mBAAmB,CAAC,SAAS,CAAC,CAAC,oBAAoB,CACxD,MAAM,CAAC,gBAAgB,CAAC;gBACtB,MAAM,EAAE,QAAQ;gBAChB,WAAW,EAAE,MAAM,CAAC,gBAAgB,CAAC,EAAE,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC;aACtD,CAAC,CACH,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6BAA6B,EAAE,KAAK,IAAI,EAAE;YAC3C,MAAM,GAAG,GAAG;gBACV,OAAO,EAAE;oBACP,OAAO,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE,OAAO,EAAE,UAAU,EAAE;oBACjD,EAAE,EAAE,EAAE,KAAK,EAAE,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE;oBAC1C,EAAE,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE,OAAO,EAAE,WAAW,EAAE;iBAC9C;aACF,CAAC;YAEF,MAAM,IAAI,GAAG;gBACX,EAAE,EAAE,SAAS;gBACb,IAAI,EAAE,WAAW;gBACjB,KAAK,EAAE,kBAAkB;gBACzB,IAAI,EAAE,OAAO;aACd,CAAC;YAEF,SAAS,CAAC,OAAO,CAAC,qBAAqB,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC;YAEvF,MAAM,SAAS,GAAG;gBAChB,GAAG,EAAE,YAAY;gBACjB,IAAI,EAAE,SAAS;gBACf,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,EAAE,GAAG,EAAE,YAAY,EAAE,CAAC;aACzD,CAAC;YAEF,SAAS,CAAC,WAAW,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;YAEjD,MAAM,OAAO,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;YAEhC,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,SAAS,EAAE,GAAG,EAAE;QACvB,EAAE,CAAC,iCAAiC,EAAE,KAAK,IAAI,EAAE;YAC/C,MAAM,KAAK,GAAG;gBACZ,IAAI,EAAE,CAAC;gBACP,KAAK,EAAE,EAAE;gBACT,MAAM,EAAE,WAAoB;gBAC5B,SAAS,EAAE,MAAe;aAC3B,CAAC;YAEF,MAAM,YAAY,GAAG;gBACnB,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,WAAW,EAAE;gBAChC,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,WAAW,EAAE;aACjC,CAAC;YAEF,SAAS,CAAC,cAAc,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;YAC9C,SAAS,CAAC,IAAI,CAAC,eAAe,CAAC;gBAC7B,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC;oBAC9B,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC;wBAC9B,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC;4BAC/B,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,YAAY,CAAC;yBAChD,CAAC;qBACH,CAAC;iBACH,CAAC;aACH,CAAC,CAAC;YAEH,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YAE5C,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC;gBACrB,KAAK,EAAE,YAAY;gBACnB,KAAK,EAAE,CAAC;gBACR,IAAI,EAAE,CAAC;gBACP,KAAK,EAAE,CAAC;aACT,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yBAAyB,EAAE,KAAK,IAAI,EAAE;YACvC,MAAM,KAAK,GAAG;gBACZ,MAAM,EAAE,0BAAiB,CAAC,SAAS;gBACnC,IAAI,EAAE,CAAC;gBACP,KAAK,EAAE,EAAE;aACV,CAAC;YAEF,SAAS,CAAC,cAAc,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;YAC9C,SAAS,CAAC,IAAI,CAAC,eAAe,CAAC;gBAC7B,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC;oBAC9B,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC;wBAC9B,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC;4BAC/B,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,EAAE,CAAC;yBACtC,CAAC;qBACH,CAAC;iBACH,CAAC;aACH,CAAC,CAAC;YAEH,MAAM,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YAE7B,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,oBAAoB,CACzC,MAAM,CAAC,gBAAgB,CAAC;gBACtB,MAAM,EAAE,0BAAiB,CAAC,SAAS;gBACnC,SAAS,EAAE,KAAK;aACjB,CAAC,CACH,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,SAAS,EAAE,GAAG,EAAE;QACvB,EAAE,CAAC,oCAAoC,EAAE,KAAK,IAAI,EAAE;YAClD,MAAM,WAAW,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC;YACnE,SAAS,CAAC,QAAQ,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC;YAElD,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAE3C,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oDAAoD,EAAE,KAAK,IAAI,EAAE;YAClE,MAAM,WAAW,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;YAClE,SAAS,CAAC,QAAQ,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC;YAElD,MAAM,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,0BAAiB,CAAC,CAAC;QACzE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yDAAyD,EAAE,KAAK,IAAI,EAAE;YACvE,SAAS,CAAC,QAAQ,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;YAE3C,MAAM,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,0BAAiB,CAAC,CAAC;QACzE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;QACtB,EAAE,CAAC,8BAA8B,EAAE,KAAK,IAAI,EAAE;YAC5C,MAAM,WAAW,GAAG;gBAClB,GAAG,EAAE,IAAI;gBACT,OAAO,EAAE,EAAE,EAAE,EAAE,EAAE,KAAK,EAAE,WAAW,EAAE,EAAE;gBACvC,SAAS,EAAE,KAAK;aACjB,CAAC;YAEF,MAAM,GAAG,GAAG;gBACV,OAAO,EAAE;oBACP,OAAO,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,UAAU,EAAE;oBAC/C,EAAE,EAAE,EAAE,KAAK,EAAE,WAAW,EAAE,OAAO,EAAE,SAAS,EAAE;oBAC9C,EAAE,EAAE,EAAE,KAAK,EAAE,OAAO,EAAE,OAAO,EAAE,WAAW,EAAE;iBAC7C;aACF,CAAC;YAEF,MAAM,IAAI,GAAG;gBACX,EAAE,EAAE,SAAS;gBACb,IAAI,EAAE,WAAW;gBACjB,KAAK,EAAE,kBAAkB;gBACzB,IAAI,EAAE,OAAO;aACd,CAAC;YAEF,SAAS,CAAC,QAAQ,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC;YAClD,SAAS,CAAC,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;YAC1C,SAAS,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,EAAE,GAAG,WAAW,EAAE,GAAG,GAAG,EAAE,CAAC,CAAC;YAE1E,MAAM,OAAO,CAAC,MAAM,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;YAEtC,MAAM,CAAC,SAAS,CAAC,iBAAiB,CAAC,CAAC,oBAAoB,CACtD,IAAI,EACJ,MAAM,CAAC,gBAAgB,CAAC;gBACtB,OAAO,EAAE,GAAG,CAAC,OAAO;gBACpB,IAAI,EAAE,EAAE,OAAO,EAAE,CAAC,EAAE;aACrB,CAAC,EACF,EAAE,GAAG,EAAE,IAAI,EAAE,CACd,CAAC;YACF,MAAM,CAAC,mBAAmB,CAAC,SAAS,CAAC,CAAC,gBAAgB,EAAE,CAAC;QAC3D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,SAAS,EAAE,GAAG,EAAE;QACvB,EAAE,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;YAC9C,MAAM,WAAW,GAAG;gBAClB,GAAG,EAAE,IAAI;gBACT,MAAM,EAAE,0BAAiB,CAAC,KAAK;gBAC/B,SAAS,EAAE,KAAK;aACjB,CAAC;YAEF,MAAM,IAAI,GAAG;gBACX,EAAE,EAAE,SAAS;gBACb,IAAI,EAAE,WAAW;gBACjB,KAAK,EAAE,kBAAkB;gBACzB,IAAI,EAAE,OAAO;aACd,CAAC;YAEF,SAAS,CAAC,QAAQ,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC;YAClD,SAAS,CAAC,iBAAiB,CAAC,iBAAiB,CAAC;gBAC5C,GAAG,WAAW;gBACd,MAAM,EAAE,0BAAiB,CAAC,SAAS;aACpC,CAAC,CAAC;YAEH,MAAM,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;YAElC,MAAM,CAAC,SAAS,CAAC,iBAAiB,CAAC,CAAC,oBAAoB,CACtD,IAAI,EACJ,MAAM,CAAC,gBAAgB,CAAC;gBACtB,MAAM,EAAE,0BAAiB,CAAC,SAAS;gBACnC,WAAW,EAAE,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC;aAC9B,CAAC,EACF,EAAE,GAAG,EAAE,IAAI,EAAE,CACd,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;YACvD,MAAM,WAAW,GAAG;gBAClB,GAAG,EAAE,IAAI;gBACT,MAAM,EAAE,0BAAiB,CAAC,SAAS;gBACnC,SAAS,EAAE,KAAK;aACjB,CAAC;YAEF,MAAM,IAAI,GAAG;gBACX,EAAE,EAAE,SAAS;gBACb,IAAI,EAAE,WAAW;gBACjB,KAAK,EAAE,kBAAkB;gBACzB,IAAI,EAAE,OAAO;aACd,CAAC;YAEF,SAAS,CAAC,QAAQ,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC;YAElD,MAAM,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;QAC9D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;QACtB,EAAE,CAAC,mCAAmC,EAAE,KAAK,IAAI,EAAE;YACjD,MAAM,WAAW,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC;YACpD,MAAM,IAAI,GAAG;gBACX,EAAE,EAAE,SAAS;gBACb,IAAI,EAAE,WAAW;gBACjB,KAAK,EAAE,kBAAkB;gBACzB,IAAI,EAAE,OAAO;aACd,CAAC;YAEF,SAAS,CAAC,QAAQ,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC;YAClD,SAAS,CAAC,iBAAiB,CAAC,iBAAiB,CAAC;gBAC5C,GAAG,WAAW;gBACd,SAAS,EAAE,IAAI;aAChB,CAAC,CAAC;YAEH,MAAM,OAAO,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;YAEjC,MAAM,CAAC,SAAS,CAAC,iBAAiB,CAAC,CAAC,oBAAoB,CACtD,IAAI,EACJ,MAAM,CAAC,gBAAgB,CAAC;gBACtB,SAAS,EAAE,IAAI;gBACf,SAAS,EAAE,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC;aAC5B,CAAC,CACH,CAAC;YACF,MAAM,CAAC,mBAAmB,CAAC,SAAS,CAAC,CAAC,gBAAgB,EAAE,CAAC;QAC3D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;QAC/B,EAAE,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;YACzD,MAAM,YAAY,GAAG;gBACnB,EAAE,GAAG,EAAE,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAE;gBAC5B,EAAE,GAAG,EAAE,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAE;aAC7B,CAAC;YAEF,SAAS,CAAC,IAAI,CAAC,eAAe,CAAC;gBAC7B,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC;oBAC9B,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC;wBAC/B,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,YAAY,CAAC;qBAChD,CAAC;iBACH,CAAC;aACH,CAAC,CAAC;YAEH,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YAEhD,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAAC;gBAC1C,QAAQ,EAAE,IAAI;gBACd,MAAM,EAAE,0BAAiB,CAAC,SAAS;gBACnC,SAAS,EAAE,KAAK;aACjB,CAAC,CAAC;YACH,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/news-releases/tests/news-releases.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { getModelToken } from '@nestjs/mongoose';\nimport { NewsReleasesService } from '../news-releases.service';\nimport { NewsRelease } from '../schemas/news-release.schema';\nimport { ContentSanitizationService } from '../services/content-sanitization.service';\nimport { AuditLogService } from '../services/audit-log.service';\nimport { ImageProcessingService } from '../services/image-processing.service';\nimport { PublicationSchedulerService } from '../services/publication-scheduler.service';\nimport { FeedGeneratorService } from '../services/feed-generator.service';\nimport { NewsReleaseStatus } from '@vtexday26/shared';\nimport { NotFoundException } from '@nestjs/common';\n\ndescribe('NewsReleasesService', () => {\n  let service: NewsReleasesService;\n  let mockModel: any;\n  let mockContentSanitizationService: any;\n  let mockAuditLogService: any;\n\n  beforeEach(async () => {\n    mockModel = {\n      findOne: jest.fn(),\n      findById: jest.fn(),\n      find: jest.fn(),\n      findByIdAndUpdate: jest.fn(),\n      countDocuments: jest.fn(),\n      create: jest.fn(),\n      constructor: jest.fn(() => ({\n        save: jest.fn(),\n        id: 'mock-id',\n      })),\n    };\n\n    mockContentSanitizationService = {\n      sanitizeAllContent: jest.fn((content) => content),\n    };\n\n    mockAuditLogService = {\n      logAction: jest.fn(),\n    };\n\n    const mockImageProcessingService = {\n      uploadImage: jest.fn(),\n      deleteImage: jest.fn(),\n    };\n\n    const mockPublicationSchedulerService = {\n      schedulePublication: jest.fn(),\n      cancelScheduledPublication: jest.fn(),\n    };\n\n    const mockFeedGeneratorService = {\n      generateRssFeed: jest.fn(),\n      generateAtomFeed: jest.fn(),\n    };\n\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        NewsReleasesService,\n        {\n          provide: getModelToken(NewsRelease.name),\n          useValue: mockModel,\n        },\n        {\n          provide: ContentSanitizationService,\n          useValue: mockContentSanitizationService,\n        },\n        {\n          provide: AuditLogService,\n          useValue: mockAuditLogService,\n        },\n        {\n          provide: ImageProcessingService,\n          useValue: mockImageProcessingService,\n        },\n        {\n          provide: PublicationSchedulerService,\n          useValue: mockPublicationSchedulerService,\n        },\n        {\n          provide: FeedGeneratorService,\n          useValue: mockFeedGeneratorService,\n        },\n      ],\n    }).compile();\n\n    service = module.get<NewsReleasesService>(NewsReleasesService);\n  });\n\n  describe('create', () => {\n    it('should create a news release', async () => {\n      const dto = {\n        content: {\n          'pt-BR': { title: 'Título', content: 'Conteúdo' },\n          en: { title: 'Title', content: 'Content' },\n          es: { title: 'Título', content: 'Contenido' },\n        },\n        status: NewsReleaseStatus.DRAFT,\n      };\n\n      const user = {\n        id: 'user-id',\n        name: 'Test User',\n        email: 'test@example.com',\n        role: 'admin',\n      };\n\n      const mockSaved = {\n        _id: 'release-id',\n        slug: 'title',\n        ...dto,\n        save: jest.fn().mockResolvedValue({ _id: 'release-id' }),\n      };\n\n      mockModel.findOne.mockResolvedValue(null);\n      mockModel.constructor.mockReturnValue(mockSaved);\n\n      await service.create(dto, user);\n\n      expect(mockContentSanitizationService.sanitizeAllContent).toHaveBeenCalledWith(dto.content);\n      expect(mockAuditLogService.logAction).toHaveBeenCalledWith(\n        expect.objectContaining({\n          action: 'create',\n          performedBy: expect.objectContaining({ id: user.id }),\n        }),\n      );\n    });\n\n    it('should generate unique slug', async () => {\n      const dto = {\n        content: {\n          'pt-BR': { title: 'Título', content: 'Conteúdo' },\n          en: { title: 'Title', content: 'Content' },\n          es: { title: 'Título', content: 'Contenido' },\n        },\n      };\n\n      const user = {\n        id: 'user-id',\n        name: 'Test User',\n        email: 'test@example.com',\n        role: 'admin',\n      };\n\n      mockModel.findOne.mockResolvedValueOnce({ slug: 'title' }).mockResolvedValueOnce(null);\n\n      const mockSaved = {\n        _id: 'release-id',\n        slug: 'title-1',\n        save: jest.fn().mockResolvedValue({ _id: 'release-id' }),\n      };\n\n      mockModel.constructor.mockReturnValue(mockSaved);\n\n      await service.create(dto, user);\n\n      expect(mockModel.findOne).toHaveBeenCalledTimes(2);\n    });\n  });\n\n  describe('findAll', () => {\n    it('should return paginated results', async () => {\n      const query = {\n        page: 1,\n        limit: 20,\n        sortBy: 'createdAt' as const,\n        sortOrder: 'desc' as const,\n      };\n\n      const mockReleases = [\n        { _id: '1', title: 'Release 1' },\n        { _id: '2', title: 'Release 2' },\n      ];\n\n      mockModel.countDocuments.mockResolvedValue(2);\n      mockModel.find.mockReturnValue({\n        sort: jest.fn().mockReturnValue({\n          skip: jest.fn().mockReturnValue({\n            limit: jest.fn().mockReturnValue({\n              exec: jest.fn().mockResolvedValue(mockReleases),\n            }),\n          }),\n        }),\n      });\n\n      const result = await service.findAll(query);\n\n      expect(result).toEqual({\n        items: mockReleases,\n        total: 2,\n        page: 1,\n        pages: 1,\n      });\n    });\n\n    it('should filter by status', async () => {\n      const query = {\n        status: NewsReleaseStatus.PUBLISHED,\n        page: 1,\n        limit: 20,\n      };\n\n      mockModel.countDocuments.mockResolvedValue(0);\n      mockModel.find.mockReturnValue({\n        sort: jest.fn().mockReturnValue({\n          skip: jest.fn().mockReturnValue({\n            limit: jest.fn().mockReturnValue({\n              exec: jest.fn().mockResolvedValue([]),\n            }),\n          }),\n        }),\n      });\n\n      await service.findAll(query);\n\n      expect(mockModel.find).toHaveBeenCalledWith(\n        expect.objectContaining({\n          status: NewsReleaseStatus.PUBLISHED,\n          isDeleted: false,\n        }),\n      );\n    });\n  });\n\n  describe('findOne', () => {\n    it('should return a news release by ID', async () => {\n      const mockRelease = { _id: 'id', title: 'Test', isDeleted: false };\n      mockModel.findById.mockResolvedValue(mockRelease);\n\n      const result = await service.findOne('id');\n\n      expect(result).toEqual(mockRelease);\n    });\n\n    it('should throw NotFoundException for deleted release', async () => {\n      const mockRelease = { _id: 'id', title: 'Test', isDeleted: true };\n      mockModel.findById.mockResolvedValue(mockRelease);\n\n      await expect(service.findOne('id')).rejects.toThrow(NotFoundException);\n    });\n\n    it('should throw NotFoundException for non-existent release', async () => {\n      mockModel.findById.mockResolvedValue(null);\n\n      await expect(service.findOne('id')).rejects.toThrow(NotFoundException);\n    });\n  });\n\n  describe('update', () => {\n    it('should update a news release', async () => {\n      const mockRelease = {\n        _id: 'id',\n        content: { en: { title: 'Old Title' } },\n        isDeleted: false,\n      };\n\n      const dto = {\n        content: {\n          'pt-BR': { title: 'Novo', content: 'Conteúdo' },\n          en: { title: 'New Title', content: 'Content' },\n          es: { title: 'Nuevo', content: 'Contenido' },\n        },\n      };\n\n      const user = {\n        id: 'user-id',\n        name: 'Test User',\n        email: 'test@example.com',\n        role: 'admin',\n      };\n\n      mockModel.findById.mockResolvedValue(mockRelease);\n      mockModel.findOne.mockResolvedValue(null);\n      mockModel.findByIdAndUpdate.mockResolvedValue({ ...mockRelease, ...dto });\n\n      await service.update('id', dto, user);\n\n      expect(mockModel.findByIdAndUpdate).toHaveBeenCalledWith(\n        'id',\n        expect.objectContaining({\n          content: dto.content,\n          $inc: { version: 1 },\n        }),\n        { new: true },\n      );\n      expect(mockAuditLogService.logAction).toHaveBeenCalled();\n    });\n  });\n\n  describe('publish', () => {\n    it('should publish a draft release', async () => {\n      const mockRelease = {\n        _id: 'id',\n        status: NewsReleaseStatus.DRAFT,\n        isDeleted: false,\n      };\n\n      const user = {\n        id: 'user-id',\n        name: 'Test User',\n        email: 'test@example.com',\n        role: 'admin',\n      };\n\n      mockModel.findById.mockResolvedValue(mockRelease);\n      mockModel.findByIdAndUpdate.mockResolvedValue({\n        ...mockRelease,\n        status: NewsReleaseStatus.PUBLISHED,\n      });\n\n      await service.publish('id', user);\n\n      expect(mockModel.findByIdAndUpdate).toHaveBeenCalledWith(\n        'id',\n        expect.objectContaining({\n          status: NewsReleaseStatus.PUBLISHED,\n          publishedAt: expect.any(Date),\n        }),\n        { new: true },\n      );\n    });\n\n    it('should throw error if already published', async () => {\n      const mockRelease = {\n        _id: 'id',\n        status: NewsReleaseStatus.PUBLISHED,\n        isDeleted: false,\n      };\n\n      const user = {\n        id: 'user-id',\n        name: 'Test User',\n        email: 'test@example.com',\n        role: 'admin',\n      };\n\n      mockModel.findById.mockResolvedValue(mockRelease);\n\n      await expect(service.publish('id', user)).rejects.toThrow();\n    });\n  });\n\n  describe('remove', () => {\n    it('should soft delete a news release', async () => {\n      const mockRelease = { _id: 'id', isDeleted: false };\n      const user = {\n        id: 'user-id',\n        name: 'Test User',\n        email: 'test@example.com',\n        role: 'admin',\n      };\n\n      mockModel.findById.mockResolvedValue(mockRelease);\n      mockModel.findByIdAndUpdate.mockResolvedValue({\n        ...mockRelease,\n        isDeleted: true,\n      });\n\n      await service.remove('id', user);\n\n      expect(mockModel.findByIdAndUpdate).toHaveBeenCalledWith(\n        'id',\n        expect.objectContaining({\n          isDeleted: true,\n          deletedAt: expect.any(Date),\n        }),\n      );\n      expect(mockAuditLogService.logAction).toHaveBeenCalled();\n    });\n  });\n\n  describe('getFeaturedNews', () => {\n    it('should return featured published releases', async () => {\n      const mockReleases = [\n        { _id: '1', featured: true },\n        { _id: '2', featured: true },\n      ];\n\n      mockModel.find.mockReturnValue({\n        sort: jest.fn().mockReturnValue({\n          limit: jest.fn().mockReturnValue({\n            exec: jest.fn().mockResolvedValue(mockReleases),\n          }),\n        }),\n      });\n\n      const result = await service.getFeaturedNews(2);\n\n      expect(mockModel.find).toHaveBeenCalledWith({\n        featured: true,\n        status: NewsReleaseStatus.PUBLISHED,\n        isDeleted: false,\n      });\n      expect(result).toEqual(mockReleases);\n    });\n  });\n});\n"],"version":3}