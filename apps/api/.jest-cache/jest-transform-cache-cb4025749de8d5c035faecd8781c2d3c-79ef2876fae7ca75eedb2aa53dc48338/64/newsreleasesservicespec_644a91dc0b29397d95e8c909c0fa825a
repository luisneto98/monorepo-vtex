c7dd6a872f13562c58207e745a302e2f
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const mongoose_1 = require("@nestjs/mongoose");
const news_releases_service_1 = require("../news-releases.service");
const news_release_schema_1 = require("../schemas/news-release.schema");
const content_sanitization_service_1 = require("../services/content-sanitization.service");
const audit_log_service_1 = require("../services/audit-log.service");
const image_processing_service_1 = require("../services/image-processing.service");
const publication_scheduler_service_1 = require("../services/publication-scheduler.service");
const feed_generator_service_1 = require("../services/feed-generator.service");
const shared_1 = require("@vtexday26/shared");
const common_1 = require("@nestjs/common");
describe('NewsReleasesService', () => {
    let service;
    let mockModel;
    let mockContentSanitizationService;
    let mockAuditLogService;
    beforeEach(async () => {
        mockModel = {
            findOne: jest.fn(),
            findById: jest.fn(),
            find: jest.fn(),
            findByIdAndUpdate: jest.fn(),
            countDocuments: jest.fn(),
            create: jest.fn(),
            constructor: jest.fn(() => ({
                save: jest.fn(),
                id: 'mock-id',
            })),
        };
        mockContentSanitizationService = {
            sanitizeAllContent: jest.fn((content) => content),
        };
        mockAuditLogService = {
            logAction: jest.fn(),
        };
        const mockImageProcessingService = {
            uploadImage: jest.fn(),
            deleteImage: jest.fn(),
        };
        const mockPublicationSchedulerService = {
            schedulePublication: jest.fn(),
            cancelScheduledPublication: jest.fn(),
        };
        const mockFeedGeneratorService = {
            generateRssFeed: jest.fn(),
            generateAtomFeed: jest.fn(),
        };
        const module = await testing_1.Test.createTestingModule({
            providers: [
                news_releases_service_1.NewsReleasesService,
                {
                    provide: (0, mongoose_1.getModelToken)(news_release_schema_1.NewsRelease.name),
                    useValue: mockModel,
                },
                {
                    provide: content_sanitization_service_1.ContentSanitizationService,
                    useValue: mockContentSanitizationService,
                },
                {
                    provide: audit_log_service_1.AuditLogService,
                    useValue: mockAuditLogService,
                },
                {
                    provide: image_processing_service_1.ImageProcessingService,
                    useValue: mockImageProcessingService,
                },
                {
                    provide: publication_scheduler_service_1.PublicationSchedulerService,
                    useValue: mockPublicationSchedulerService,
                },
                {
                    provide: feed_generator_service_1.FeedGeneratorService,
                    useValue: mockFeedGeneratorService,
                },
            ],
        }).compile();
        service = module.get(news_releases_service_1.NewsReleasesService);
    });
    describe('create', () => {
        it('should create a news release', async () => {
            const dto = {
                content: {
                    'pt-BR': { title: 'Título', content: 'Conteúdo' },
                    en: { title: 'Title', content: 'Content' },
                    es: { title: 'Título', content: 'Contenido' },
                },
                status: shared_1.NewsReleaseStatus.DRAFT,
            };
            const user = {
                id: 'user-id',
                name: 'Test User',
                email: 'test@example.com',
                role: 'admin',
            };
            const mockSaved = {
                _id: 'release-id',
                slug: 'title',
                ...dto,
                save: jest.fn().mockResolvedValue({ _id: 'release-id' }),
            };
            mockModel.findOne.mockResolvedValue(null);
            mockModel.constructor.mockReturnValue(mockSaved);
            await service.create(dto, user);
            expect(mockContentSanitizationService.sanitizeAllContent).toHaveBeenCalledWith(dto.content);
            expect(mockAuditLogService.logAction).toHaveBeenCalledWith(expect.objectContaining({
                action: 'create',
                performedBy: expect.objectContaining({ id: user.id }),
            }));
        });
        it('should generate unique slug', async () => {
            const dto = {
                content: {
                    'pt-BR': { title: 'Título', content: 'Conteúdo' },
                    en: { title: 'Title', content: 'Content' },
                    es: { title: 'Título', content: 'Contenido' },
                },
            };
            const user = {
                id: 'user-id',
                name: 'Test User',
                email: 'test@example.com',
                role: 'admin',
            };
            mockModel.findOne.mockResolvedValueOnce({ slug: 'title' }).mockResolvedValueOnce(null);
            const mockSaved = {
                _id: 'release-id',
                slug: 'title-1',
                save: jest.fn().mockResolvedValue({ _id: 'release-id' }),
            };
            mockModel.constructor.mockReturnValue(mockSaved);
            await service.create(dto, user);
            expect(mockModel.findOne).toHaveBeenCalledTimes(2);
        });
    });
    describe('findAll', () => {
        it('should return paginated results', async () => {
            const query = {
                page: 1,
                limit: 20,
                sortBy: 'createdAt',
                sortOrder: 'desc',
            };
            const mockReleases = [
                { _id: '1', title: 'Release 1' },
                { _id: '2', title: 'Release 2' },
            ];
            mockModel.countDocuments.mockResolvedValue(2);
            mockModel.find.mockReturnValue({
                sort: jest.fn().mockReturnValue({
                    skip: jest.fn().mockReturnValue({
                        limit: jest.fn().mockReturnValue({
                            exec: jest.fn().mockResolvedValue(mockReleases),
                        }),
                    }),
                }),
            });
            const result = await service.findAll(query);
            expect(result).toEqual({
                items: mockReleases,
                total: 2,
                page: 1,
                pages: 1,
            });
        });
        it('should filter by status', async () => {
            const query = {
                status: shared_1.NewsReleaseStatus.PUBLISHED,
                page: 1,
                limit: 20,
            };
            mockModel.countDocuments.mockResolvedValue(0);
            mockModel.find.mockReturnValue({
                sort: jest.fn().mockReturnValue({
                    skip: jest.fn().mockReturnValue({
                        limit: jest.fn().mockReturnValue({
                            exec: jest.fn().mockResolvedValue([]),
                        }),
                    }),
                }),
            });
            await service.findAll(query);
            expect(mockModel.find).toHaveBeenCalledWith(expect.objectContaining({
                status: shared_1.NewsReleaseStatus.PUBLISHED,
                isDeleted: false,
            }));
        });
    });
    describe('findOne', () => {
        it('should return a news release by ID', async () => {
            const mockRelease = { _id: 'id', title: 'Test', isDeleted: false };
            mockModel.findById.mockResolvedValue(mockRelease);
            const result = await service.findOne('id');
            expect(result).toEqual(mockRelease);
        });
        it('should throw NotFoundException for deleted release', async () => {
            const mockRelease = { _id: 'id', title: 'Test', isDeleted: true };
            mockModel.findById.mockResolvedValue(mockRelease);
            await expect(service.findOne('id')).rejects.toThrow(common_1.NotFoundException);
        });
        it('should throw NotFoundException for non-existent release', async () => {
            mockModel.findById.mockResolvedValue(null);
            await expect(service.findOne('id')).rejects.toThrow(common_1.NotFoundException);
        });
    });
    describe('update', () => {
        it('should update a news release', async () => {
            const mockRelease = {
                _id: 'id',
                content: { en: { title: 'Old Title' } },
                isDeleted: false,
            };
            const dto = {
                content: {
                    'pt-BR': { title: 'Novo', content: 'Conteúdo' },
                    en: { title: 'New Title', content: 'Content' },
                    es: { title: 'Nuevo', content: 'Contenido' },
                },
            };
            const user = {
                id: 'user-id',
                name: 'Test User',
                email: 'test@example.com',
                role: 'admin',
            };
            mockModel.findById.mockResolvedValue(mockRelease);
            mockModel.findOne.mockResolvedValue(null);
            mockModel.findByIdAndUpdate.mockResolvedValue({ ...mockRelease, ...dto });
            await service.update('id', dto, user);
            expect(mockModel.findByIdAndUpdate).toHaveBeenCalledWith('id', expect.objectContaining({
                content: dto.content,
                $inc: { version: 1 },
            }), { new: true });
            expect(mockAuditLogService.logAction).toHaveBeenCalled();
        });
    });
    describe('publish', () => {
        it('should publish a draft release', async () => {
            const mockRelease = {
                _id: 'id',
                status: shared_1.NewsReleaseStatus.DRAFT,
                isDeleted: false,
            };
            const user = {
                id: 'user-id',
                name: 'Test User',
                email: 'test@example.com',
                role: 'admin',
            };
            mockModel.findById.mockResolvedValue(mockRelease);
            mockModel.findByIdAndUpdate.mockResolvedValue({
                ...mockRelease,
                status: shared_1.NewsReleaseStatus.PUBLISHED,
            });
            await service.publish('id', user);
            expect(mockModel.findByIdAndUpdate).toHaveBeenCalledWith('id', expect.objectContaining({
                status: shared_1.NewsReleaseStatus.PUBLISHED,
                publishedAt: expect.any(Date),
            }), { new: true });
        });
        it('should throw error if already published', async () => {
            const mockRelease = {
                _id: 'id',
                status: shared_1.NewsReleaseStatus.PUBLISHED,
                isDeleted: false,
            };
            const user = {
                id: 'user-id',
                name: 'Test User',
                email: 'test@example.com',
                role: 'admin',
            };
            mockModel.findById.mockResolvedValue(mockRelease);
            await expect(service.publish('id', user)).rejects.toThrow();
        });
    });
    describe('remove', () => {
        it('should soft delete a news release', async () => {
            const mockRelease = { _id: 'id', isDeleted: false };
            const user = {
                id: 'user-id',
                name: 'Test User',
                email: 'test@example.com',
                role: 'admin',
            };
            mockModel.findById.mockResolvedValue(mockRelease);
            mockModel.findByIdAndUpdate.mockResolvedValue({
                ...mockRelease,
                isDeleted: true,
            });
            await service.remove('id', user);
            expect(mockModel.findByIdAndUpdate).toHaveBeenCalledWith('id', expect.objectContaining({
                isDeleted: true,
                deletedAt: expect.any(Date),
            }));
            expect(mockAuditLogService.logAction).toHaveBeenCalled();
        });
    });
    describe('getFeaturedNews', () => {
        it('should return featured published releases', async () => {
            const mockReleases = [
                { _id: '1', featured: true },
                { _id: '2', featured: true },
            ];
            mockModel.find.mockReturnValue({
                sort: jest.fn().mockReturnValue({
                    limit: jest.fn().mockReturnValue({
                        exec: jest.fn().mockResolvedValue(mockReleases),
                    }),
                }),
            });
            const result = await service.getFeaturedNews(2);
            expect(mockModel.find).toHaveBeenCalledWith({
                featured: true,
                status: shared_1.NewsReleaseStatus.PUBLISHED,
                isDeleted: false,
            });
            expect(result).toEqual(mockReleases);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,