{"file":"/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/tests/unit/modules/notifications/notifications.service.spec.ts","mappings":"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","names":[],"sources":["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/tests/unit/modules/notifications/notifications.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { getModelToken } from '@nestjs/mongoose';\nimport { getQueueToken } from '@nestjs/bull';\nimport { NotFoundException } from '@nestjs/common';\nimport { NotificationsService } from '../../../../src/modules/notifications/notifications.service';\nimport {\n  Notification,\n  NotificationStatus,\n} from '../../../../src/modules/notifications/schemas/notification.schema';\nimport {\n  DeviceToken,\n  Platform,\n} from '../../../../src/modules/notifications/schemas/device-token.schema';\n\ndescribe('NotificationsService', () => {\n  let service: NotificationsService;\n  let notificationModel: any;\n  let deviceTokenModel: any;\n\n  const mockNotification = {\n    _id: '507f1f77bcf86cd799439011',\n    title: 'Test Notification',\n    message: 'Test Message',\n    status: NotificationStatus.DRAFT,\n    deviceCount: 100,\n    createdBy: '507f1f77bcf86cd799439012',\n    save: jest.fn().mockResolvedValue(this),\n  };\n\n  const mockNotificationModel = {\n    new: jest.fn().mockResolvedValue(mockNotification),\n    constructor: jest.fn().mockResolvedValue(mockNotification),\n    find: jest.fn(),\n    findOne: jest.fn(),\n    findById: jest.fn(),\n    findByIdAndUpdate: jest.fn(),\n    findByIdAndDelete: jest.fn(),\n    countDocuments: jest.fn(),\n    create: jest.fn(),\n    exec: jest.fn(),\n  };\n\n  const mockDeviceTokenModel = {\n    find: jest.fn(),\n    findOne: jest.fn(),\n    findById: jest.fn(),\n    countDocuments: jest.fn(),\n    create: jest.fn(),\n    exec: jest.fn(),\n  };\n\n  const mockQueue = {\n    add: jest.fn(),\n    getJobs: jest.fn(),\n  };\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        NotificationsService,\n        {\n          provide: getModelToken(Notification.name),\n          useValue: mockNotificationModel,\n        },\n        {\n          provide: getModelToken(DeviceToken.name),\n          useValue: mockDeviceTokenModel,\n        },\n        {\n          provide: getQueueToken('notifications'),\n          useValue: mockQueue,\n        },\n      ],\n    }).compile();\n\n    service = module.get<NotificationsService>(NotificationsService);\n    notificationModel = module.get(getModelToken(Notification.name));\n    deviceTokenModel = module.get(getModelToken(DeviceToken.name));\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n  });\n\n  describe('createNotification', () => {\n    it('should create a notification', async () => {\n      const dto = {\n        title: 'Test',\n        message: 'Test message',\n      };\n\n      deviceTokenModel.countDocuments.mockResolvedValue(100);\n\n      const savedNotification = {\n        _id: '507f1f77bcf86cd799439011',\n        ...dto,\n        status: NotificationStatus.DRAFT,\n        deviceCount: 100,\n      };\n\n      const mockConstructor = jest.fn().mockImplementation(() => ({\n        save: jest.fn().mockResolvedValue(savedNotification),\n      }));\n\n      notificationModel.constructor = mockConstructor;\n      Object.setPrototypeOf(notificationModel, mockConstructor.prototype);\n\n      // Mock the model as a constructor function\n      (service as any).notificationModel = mockConstructor;\n\n      const result = await service.createNotification(dto, '507f1f77bcf86cd799439012');\n\n      expect(result).toBeDefined();\n      expect(result._id).toBe('507f1f77bcf86cd799439011');\n    });\n  });\n\n  describe('scheduleNotification', () => {\n    it('should schedule a notification for future delivery', async () => {\n      const notificationId = '507f1f77bcf86cd799439011';\n      const futureDate = new Date(Date.now() + 60000); // 1 minute from now\n\n      await service.scheduleNotification(notificationId, futureDate);\n\n      expect(mockQueue.add).toHaveBeenCalledWith(\n        'send-notification',\n        { notificationId },\n        expect.objectContaining({\n          delay: expect.any(Number),\n          removeOnComplete: true,\n          attempts: 3,\n        }),\n      );\n    });\n\n    it('should throw error when scheduling in the past', async () => {\n      const notificationId = '507f1f77bcf86cd799439011';\n      const pastDate = new Date(Date.now() - 60000); // 1 minute ago\n\n      await expect(service.scheduleNotification(notificationId, pastDate)).rejects.toThrow(\n        'Cannot schedule notification in the past',\n      );\n    });\n  });\n\n  describe('findAll', () => {\n    it('should return paginated notifications', async () => {\n      const notifications = [mockNotification];\n\n      mockNotificationModel.find.mockReturnValue({\n        sort: jest.fn().mockReturnValue({\n          skip: jest.fn().mockReturnValue({\n            limit: jest.fn().mockReturnValue({\n              populate: jest.fn().mockReturnValue({\n                exec: jest.fn().mockResolvedValue(notifications),\n              }),\n            }),\n          }),\n        }),\n      });\n\n      mockNotificationModel.countDocuments.mockResolvedValue(1);\n\n      const result = await service.findAll(1, 10);\n\n      expect(result).toEqual({\n        data: notifications,\n        total: 1,\n        page: 1,\n        totalPages: 1,\n      });\n    });\n  });\n\n  describe('getStats', () => {\n    it('should return notification statistics', async () => {\n      mockNotificationModel.countDocuments\n        .mockResolvedValueOnce(50) // totalSent\n        .mockResolvedValueOnce(5) // totalFailed\n        .mockResolvedValueOnce(10); // totalScheduled\n\n      mockDeviceTokenModel.countDocuments.mockResolvedValue(100);\n\n      const stats = await service.getStats();\n\n      expect(stats).toEqual({\n        totalSent: 50,\n        totalFailed: 5,\n        totalScheduled: 10,\n        totalDevices: 100,\n        deliveryRate: expect.any(Number),\n      });\n    });\n  });\n\n  describe('registerDevice', () => {\n    it('should register a new device token', async () => {\n      const dto = {\n        token: 'test-token',\n        platform: Platform.IOS,\n        isTestDevice: false,\n      };\n\n      mockDeviceTokenModel.findOne.mockResolvedValue(null);\n\n      const savedToken = { _id: '123', ...dto };\n\n      const mockConstructor = jest.fn().mockImplementation(() => ({\n        save: jest.fn().mockResolvedValue(savedToken),\n      }));\n\n      (service as any).deviceTokenModel = Object.assign(mockConstructor, {\n        findOne: mockDeviceTokenModel.findOne,\n      });\n\n      const result = await service.registerDevice(dto, '507f1f77bcf86cd799439012');\n\n      expect(result).toBeDefined();\n      expect(result._id).toBe('123');\n    });\n\n    it('should update existing device token', async () => {\n      const dto = {\n        token: 'existing-token',\n        platform: Platform.ANDROID,\n      };\n\n      const existingDevice = {\n        ...dto,\n        save: jest.fn().mockResolvedValue({ _id: '123', ...dto }),\n      };\n\n      mockDeviceTokenModel.findOne.mockResolvedValue(existingDevice);\n\n      await service.registerDevice(dto);\n\n      expect(existingDevice.save).toHaveBeenCalled();\n    });\n  });\n\n  describe('sendTestNotification', () => {\n    it('should send test notification to specific device', async () => {\n      const deviceId = '507f1f77bcf86cd799439011';\n      const device = {\n        _id: deviceId,\n        token: 'test-token',\n        platform: 'ios',\n      };\n\n      mockDeviceTokenModel.findById.mockResolvedValue(device);\n\n      await service.sendTestNotification('Test Title', 'Test Message', deviceId);\n\n      expect(mockDeviceTokenModel.findById).toHaveBeenCalledWith(deviceId);\n    });\n\n    it('should throw NotFoundException if device not found', async () => {\n      mockDeviceTokenModel.findById.mockResolvedValue(null);\n\n      await expect(service.sendTestNotification('Test', 'Test', 'invalid-id')).rejects.toThrow(\n        NotFoundException,\n      );\n    });\n  });\n});\n"],"version":3}