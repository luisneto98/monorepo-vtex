{"file":"/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/notifications/notifications.service.ts","mappings":"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","names":[],"sources":["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/notifications/notifications.service.ts"],"sourcesContent":["import { Injectable, Logger, NotFoundException } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, Types } from 'mongoose';\nimport { InjectQueue } from '@nestjs/bull';\nimport { Queue } from 'bull';\nimport {\n  Notification,\n  NotificationDocument,\n  NotificationStatus,\n} from './schemas/notification.schema';\nimport { DeviceToken, DeviceTokenDocument } from './schemas/device-token.schema';\nimport { CreateNotificationDto } from './dto/create-notification.dto';\nimport { UpdateNotificationDto } from './dto/update-notification.dto';\nimport { RegisterDeviceDto } from './dto/register-device.dto';\nimport { sanitizeNotification } from '@common/utils/sanitize.util';\n\n@Injectable()\nexport class NotificationsService {\n  private readonly logger = new Logger(NotificationsService.name);\n\n  constructor(\n    @InjectModel(Notification.name)\n    private notificationModel: Model<NotificationDocument>,\n    @InjectModel(DeviceToken.name)\n    private deviceTokenModel: Model<DeviceTokenDocument>,\n    @InjectQueue('notifications') private notificationQueue: Queue,\n  ) {}\n\n  // Legacy methods (kept for backward compatibility)\n  async sendEmail(to: string, subject: string, body: string): Promise<void> {\n    this.logger.log(`Sending email to ${to}: ${subject} - Body: ${body}`);\n    // TODO: Implement email sending logic (SendGrid, AWS SES, etc.)\n  }\n\n  async sendPushNotification(userId: string, title: string, message: string): Promise<void> {\n    this.logger.log(`Sending push notification to user ${userId}: ${title} - Message: ${message}`);\n    // TODO: Implement push notification logic (FCM, APNS, etc.)\n  }\n\n  async sendSessionReminder(userId: string, sessionId: string): Promise<void> {\n    this.logger.log(`Sending session reminder to user ${userId} for session ${sessionId}`);\n    // TODO: Implement session reminder logic\n  }\n\n  async broadcastNotification(title: string, message: string): Promise<void> {\n    // Sanitize user inputs to prevent XSS attacks\n    const sanitized = sanitizeNotification({ title, message });\n\n    this.logger.log(\n      `Broadcasting notification: ${sanitized.title} - Message: ${sanitized.message}`,\n    );\n    // TODO: Implement broadcast logic\n  }\n\n  // New notification management methods\n  async createNotification(\n    dto: CreateNotificationDto,\n    userId: string,\n  ): Promise<NotificationDocument> {\n    // Sanitize user inputs to prevent XSS attacks\n    const sanitizedDto = sanitizeNotification(dto);\n\n    const deviceCount = await this.deviceTokenModel.countDocuments();\n\n    const notification = new this.notificationModel({\n      ...sanitizedDto,\n      createdBy: new Types.ObjectId(userId),\n      deviceCount,\n      status: dto.scheduledAt\n        ? NotificationStatus.SCHEDULED\n        : dto.status || NotificationStatus.DRAFT,\n    });\n\n    const saved = await notification.save();\n\n    // Schedule notification if scheduledAt is provided\n    if (dto.scheduledAt) {\n      await this.scheduleNotification(saved._id.toString(), dto.scheduledAt);\n    }\n\n    return saved;\n  }\n\n  async scheduleNotification(notificationId: string, scheduledAt: Date): Promise<void> {\n    const delay = scheduledAt.getTime() - Date.now();\n\n    if (delay < 0) {\n      throw new Error('Cannot schedule notification in the past');\n    }\n\n    await this.notificationQueue.add(\n      'send-notification',\n      { notificationId },\n      { delay, removeOnComplete: true, attempts: 3, backoff: { type: 'exponential', delay: 5000 } },\n    );\n\n    this.logger.log(`Notification ${notificationId} scheduled for ${scheduledAt.toISOString()}`);\n  }\n\n  async findAll(\n    page = 1,\n    limit = 10,\n    status?: NotificationStatus,\n    createdBy?: string,\n  ): Promise<{\n    data: NotificationDocument[];\n    total: number;\n    page: number;\n    totalPages: number;\n  }> {\n    const query: any = {};\n\n    if (status) {\n      query.status = status;\n    }\n\n    if (createdBy) {\n      query.createdBy = new Types.ObjectId(createdBy);\n    }\n\n    const skip = (page - 1) * limit;\n\n    const [data, total] = await Promise.all([\n      this.notificationModel\n        .find(query)\n        .sort({ createdAt: -1 })\n        .skip(skip)\n        .limit(limit)\n        .populate('createdBy', 'name email')\n        .exec(),\n      this.notificationModel.countDocuments(query),\n    ]);\n\n    return {\n      data,\n      total,\n      page,\n      totalPages: Math.ceil(total / limit),\n    };\n  }\n\n  async findOne(id: string): Promise<NotificationDocument> {\n    const notification = await this.notificationModel\n      .findById(id)\n      .populate('createdBy', 'name email')\n      .exec();\n\n    if (!notification) {\n      throw new NotFoundException(`Notification with ID ${id} not found`);\n    }\n\n    return notification;\n  }\n\n  async updateNotification(id: string, dto: UpdateNotificationDto): Promise<NotificationDocument> {\n    // Sanitize user inputs to prevent XSS attacks\n    const sanitizedDto = sanitizeNotification(dto);\n\n    const notification = await this.notificationModel\n      .findByIdAndUpdate(id, sanitizedDto, { new: true })\n      .exec();\n\n    if (!notification) {\n      throw new NotFoundException(`Notification with ID ${id} not found`);\n    }\n\n    // Reschedule if scheduledAt changed\n    if (dto.scheduledAt && notification.status === NotificationStatus.SCHEDULED) {\n      // Remove old job and create new one\n      await this.cancelScheduledNotification(id);\n      await this.scheduleNotification(id, dto.scheduledAt);\n    }\n\n    return notification;\n  }\n\n  async deleteNotification(id: string): Promise<void> {\n    const result = await this.notificationModel.findByIdAndDelete(id).exec();\n\n    if (!result) {\n      throw new NotFoundException(`Notification with ID ${id} not found`);\n    }\n\n    // Cancel scheduled job if exists\n    if (result.status === NotificationStatus.SCHEDULED) {\n      await this.cancelScheduledNotification(id);\n    }\n  }\n\n  async cancelScheduledNotification(id: string): Promise<void> {\n    const jobs = await this.notificationQueue.getJobs(['delayed', 'waiting']);\n\n    for (const job of jobs) {\n      if (job.data.notificationId === id) {\n        await job.remove();\n        this.logger.log(`Cancelled scheduled notification job for ${id}`);\n      }\n    }\n\n    await this.notificationModel.findByIdAndUpdate(id, {\n      status: NotificationStatus.DRAFT,\n    });\n  }\n\n  async getHistory(\n    page = 1,\n    limit = 10,\n    startDate?: Date,\n    endDate?: Date,\n    createdBy?: string,\n    search?: string,\n  ): Promise<{\n    data: NotificationDocument[];\n    total: number;\n    page: number;\n    totalPages: number;\n  }> {\n    const query: any = {\n      status: { $in: [NotificationStatus.SENT, NotificationStatus.FAILED] },\n    };\n\n    if (startDate || endDate) {\n      query.sentAt = {};\n      if (startDate) query.sentAt.$gte = startDate;\n      if (endDate) query.sentAt.$lte = endDate;\n    }\n\n    if (createdBy) {\n      query.createdBy = new Types.ObjectId(createdBy);\n    }\n\n    if (search) {\n      query.$or = [\n        { title: { $regex: search, $options: 'i' } },\n        { message: { $regex: search, $options: 'i' } },\n      ];\n    }\n\n    const skip = (page - 1) * limit;\n\n    const [data, total] = await Promise.all([\n      this.notificationModel\n        .find(query)\n        .sort({ sentAt: -1 })\n        .skip(skip)\n        .limit(limit)\n        .populate('createdBy', 'name email')\n        .exec(),\n      this.notificationModel.countDocuments(query),\n    ]);\n\n    return {\n      data,\n      total,\n      page,\n      totalPages: Math.ceil(total / limit),\n    };\n  }\n\n  async getStats(): Promise<{\n    totalSent: number;\n    totalFailed: number;\n    totalScheduled: number;\n    totalDevices: number;\n    deliveryRate: number;\n  }> {\n    const [totalSent, totalFailed, totalScheduled, totalDevices] = await Promise.all([\n      this.notificationModel.countDocuments({\n        status: NotificationStatus.SENT,\n      }),\n      this.notificationModel.countDocuments({\n        status: NotificationStatus.FAILED,\n      }),\n      this.notificationModel.countDocuments({\n        status: NotificationStatus.SCHEDULED,\n      }),\n      this.deviceTokenModel.countDocuments(),\n    ]);\n\n    const deliveryRate =\n      totalSent + totalFailed > 0 ? (totalSent / (totalSent + totalFailed)) * 100 : 0;\n\n    return {\n      totalSent,\n      totalFailed,\n      totalScheduled,\n      totalDevices,\n      deliveryRate,\n    };\n  }\n\n  // Device token management\n  async registerDevice(dto: RegisterDeviceDto, userId?: string): Promise<DeviceTokenDocument> {\n    const existing = await this.deviceTokenModel.findOne({ token: dto.token });\n\n    if (existing) {\n      existing.userId = userId ? new Types.ObjectId(userId) : existing.userId;\n      existing.platform = dto.platform;\n      existing.appVersion = dto.appVersion;\n      existing.isTestDevice = dto.isTestDevice ?? existing.isTestDevice;\n      existing.lastActive = new Date();\n      return existing.save();\n    }\n\n    const deviceToken = new this.deviceTokenModel({\n      ...dto,\n      userId: userId ? new Types.ObjectId(userId) : undefined,\n      lastActive: new Date(),\n    });\n\n    return deviceToken.save();\n  }\n\n  async getTestDevices(): Promise<DeviceTokenDocument[]> {\n    return this.deviceTokenModel.find({ isTestDevice: true }).sort({ lastActive: -1 }).exec();\n  }\n\n  async sendTestNotification(title: string, message: string, deviceTokenId: string): Promise<void> {\n    // Sanitize user inputs to prevent XSS attacks\n    const sanitized = sanitizeNotification({ title, message });\n\n    const device = await this.deviceTokenModel.findById(deviceTokenId);\n\n    if (!device) {\n      throw new NotFoundException(`Device token with ID ${deviceTokenId} not found`);\n    }\n\n    this.logger.log(\n      `Sending test notification to device ${deviceTokenId}: ${sanitized.title} - ${sanitized.message}`,\n    );\n\n    // Decrypt token for use (tokens are encrypted at rest)\n    // const decryptedToken = (device as any).getDecryptedToken();\n\n    // TODO: Implement actual push notification sending via FCM/APNS\n    // When implementing, use: const token = (device as any).getDecryptedToken();\n    // For now, just log it (don't log the actual token in production)\n    this.logger.log(`Test notification would be sent to ${device.platform} device`);\n  }\n\n  // Actual notification delivery (called by queue processor)\n  async deliverNotification(notificationId: string): Promise<void> {\n    const notification = await this.notificationModel.findById(notificationId);\n\n    if (!notification) {\n      throw new NotFoundException(`Notification ${notificationId} not found`);\n    }\n\n    // Update status to sending\n    notification.status = NotificationStatus.SENDING;\n    await notification.save();\n\n    try {\n      // Get all active device tokens\n      const devices = await this.deviceTokenModel.find({\n        isTestDevice: false,\n      });\n\n      let delivered = 0;\n      let failed = 0;\n\n      // TODO: Implement actual FCM/APNS sending logic\n      // For now, simulate delivery\n      for (const device of devices) {\n        try {\n          this.logger.log(\n            `Sending to ${device.platform} device: ${device.token.substring(0, 20)}...`,\n          );\n          delivered++;\n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n          this.logger.error(`Failed to send to device ${device._id}: ${errorMessage}`);\n          failed++;\n        }\n      }\n\n      // Update notification with delivery stats\n      notification.status = NotificationStatus.SENT;\n      notification.sentAt = new Date();\n      notification.deliveredCount = delivered;\n      notification.failedCount = failed;\n      await notification.save();\n\n      this.logger.log(\n        `Notification ${notificationId} delivered: ${delivered} succeeded, ${failed} failed`,\n      );\n    } catch (error) {\n      notification.status = NotificationStatus.FAILED;\n      await notification.save();\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      this.logger.error(`Failed to deliver notification ${notificationId}: ${errorMessage}`);\n      throw error;\n    }\n  }\n}\n"],"version":3}