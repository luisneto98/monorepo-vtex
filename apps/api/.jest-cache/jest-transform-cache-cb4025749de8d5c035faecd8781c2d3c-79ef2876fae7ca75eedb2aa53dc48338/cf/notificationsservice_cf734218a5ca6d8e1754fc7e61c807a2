3b57b80c840ed94371506ea4ce525182
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var NotificationsService_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotificationsService = void 0;
const common_1 = require("@nestjs/common");
const mongoose_1 = require("@nestjs/mongoose");
const mongoose_2 = require("mongoose");
const bull_1 = require("@nestjs/bull");
const notification_schema_1 = require("./schemas/notification.schema");
const device_token_schema_1 = require("./schemas/device-token.schema");
const sanitize_util_1 = require("@common/utils/sanitize.util");
let NotificationsService = NotificationsService_1 = class NotificationsService {
    notificationModel;
    deviceTokenModel;
    notificationQueue;
    logger = new common_1.Logger(NotificationsService_1.name);
    constructor(notificationModel, deviceTokenModel, notificationQueue) {
        this.notificationModel = notificationModel;
        this.deviceTokenModel = deviceTokenModel;
        this.notificationQueue = notificationQueue;
    }
    // Legacy methods (kept for backward compatibility)
    async sendEmail(to, subject, body) {
        this.logger.log(`Sending email to ${to}: ${subject} - Body: ${body}`);
        // TODO: Implement email sending logic (SendGrid, AWS SES, etc.)
    }
    async sendPushNotification(userId, title, message) {
        this.logger.log(`Sending push notification to user ${userId}: ${title} - Message: ${message}`);
        // TODO: Implement push notification logic (FCM, APNS, etc.)
    }
    async sendSessionReminder(userId, sessionId) {
        this.logger.log(`Sending session reminder to user ${userId} for session ${sessionId}`);
        // TODO: Implement session reminder logic
    }
    async broadcastNotification(title, message) {
        // Sanitize user inputs to prevent XSS attacks
        const sanitized = (0, sanitize_util_1.sanitizeNotification)({ title, message });
        this.logger.log(`Broadcasting notification: ${sanitized.title} - Message: ${sanitized.message}`);
        // TODO: Implement broadcast logic
    }
    // New notification management methods
    async createNotification(dto, userId) {
        // Sanitize user inputs to prevent XSS attacks
        const sanitizedDto = (0, sanitize_util_1.sanitizeNotification)(dto);
        const deviceCount = await this.deviceTokenModel.countDocuments();
        const notification = new this.notificationModel({
            ...sanitizedDto,
            createdBy: new mongoose_2.Types.ObjectId(userId),
            deviceCount,
            status: dto.scheduledAt
                ? notification_schema_1.NotificationStatus.SCHEDULED
                : dto.status || notification_schema_1.NotificationStatus.DRAFT,
        });
        const saved = await notification.save();
        // Schedule notification if scheduledAt is provided
        if (dto.scheduledAt) {
            await this.scheduleNotification(saved._id.toString(), dto.scheduledAt);
        }
        return saved;
    }
    async scheduleNotification(notificationId, scheduledAt) {
        const delay = scheduledAt.getTime() - Date.now();
        if (delay < 0) {
            throw new Error('Cannot schedule notification in the past');
        }
        await this.notificationQueue.add('send-notification', { notificationId }, { delay, removeOnComplete: true, attempts: 3, backoff: { type: 'exponential', delay: 5000 } });
        this.logger.log(`Notification ${notificationId} scheduled for ${scheduledAt.toISOString()}`);
    }
    async findAll(page = 1, limit = 10, status, createdBy) {
        const query = {};
        if (status) {
            query.status = status;
        }
        if (createdBy) {
            query.createdBy = new mongoose_2.Types.ObjectId(createdBy);
        }
        const skip = (page - 1) * limit;
        const [data, total] = await Promise.all([
            this.notificationModel
                .find(query)
                .sort({ createdAt: -1 })
                .skip(skip)
                .limit(limit)
                .populate('createdBy', 'name email')
                .exec(),
            this.notificationModel.countDocuments(query),
        ]);
        return {
            data,
            total,
            page,
            totalPages: Math.ceil(total / limit),
        };
    }
    async findOne(id) {
        const notification = await this.notificationModel
            .findById(id)
            .populate('createdBy', 'name email')
            .exec();
        if (!notification) {
            throw new common_1.NotFoundException(`Notification with ID ${id} not found`);
        }
        return notification;
    }
    async updateNotification(id, dto) {
        // Sanitize user inputs to prevent XSS attacks
        const sanitizedDto = (0, sanitize_util_1.sanitizeNotification)(dto);
        const notification = await this.notificationModel
            .findByIdAndUpdate(id, sanitizedDto, { new: true })
            .exec();
        if (!notification) {
            throw new common_1.NotFoundException(`Notification with ID ${id} not found`);
        }
        // Reschedule if scheduledAt changed
        if (dto.scheduledAt && notification.status === notification_schema_1.NotificationStatus.SCHEDULED) {
            // Remove old job and create new one
            await this.cancelScheduledNotification(id);
            await this.scheduleNotification(id, dto.scheduledAt);
        }
        return notification;
    }
    async deleteNotification(id) {
        const result = await this.notificationModel.findByIdAndDelete(id).exec();
        if (!result) {
            throw new common_1.NotFoundException(`Notification with ID ${id} not found`);
        }
        // Cancel scheduled job if exists
        if (result.status === notification_schema_1.NotificationStatus.SCHEDULED) {
            await this.cancelScheduledNotification(id);
        }
    }
    async cancelScheduledNotification(id) {
        const jobs = await this.notificationQueue.getJobs(['delayed', 'waiting']);
        for (const job of jobs) {
            if (job.data.notificationId === id) {
                await job.remove();
                this.logger.log(`Cancelled scheduled notification job for ${id}`);
            }
        }
        await this.notificationModel.findByIdAndUpdate(id, {
            status: notification_schema_1.NotificationStatus.DRAFT,
        });
    }
    async getHistory(page = 1, limit = 10, startDate, endDate, createdBy, search) {
        const query = {
            status: { $in: [notification_schema_1.NotificationStatus.SENT, notification_schema_1.NotificationStatus.FAILED] },
        };
        if (startDate || endDate) {
            query.sentAt = {};
            if (startDate)
                query.sentAt.$gte = startDate;
            if (endDate)
                query.sentAt.$lte = endDate;
        }
        if (createdBy) {
            query.createdBy = new mongoose_2.Types.ObjectId(createdBy);
        }
        if (search) {
            query.$or = [
                { title: { $regex: search, $options: 'i' } },
                { message: { $regex: search, $options: 'i' } },
            ];
        }
        const skip = (page - 1) * limit;
        const [data, total] = await Promise.all([
            this.notificationModel
                .find(query)
                .sort({ sentAt: -1 })
                .skip(skip)
                .limit(limit)
                .populate('createdBy', 'name email')
                .exec(),
            this.notificationModel.countDocuments(query),
        ]);
        return {
            data,
            total,
            page,
            totalPages: Math.ceil(total / limit),
        };
    }
    async getStats() {
        const [totalSent, totalFailed, totalScheduled, totalDevices] = await Promise.all([
            this.notificationModel.countDocuments({
                status: notification_schema_1.NotificationStatus.SENT,
            }),
            this.notificationModel.countDocuments({
                status: notification_schema_1.NotificationStatus.FAILED,
            }),
            this.notificationModel.countDocuments({
                status: notification_schema_1.NotificationStatus.SCHEDULED,
            }),
            this.deviceTokenModel.countDocuments(),
        ]);
        const deliveryRate = totalSent + totalFailed > 0 ? (totalSent / (totalSent + totalFailed)) * 100 : 0;
        return {
            totalSent,
            totalFailed,
            totalScheduled,
            totalDevices,
            deliveryRate,
        };
    }
    // Device token management
    async registerDevice(dto, userId) {
        const existing = await this.deviceTokenModel.findOne({ token: dto.token });
        if (existing) {
            existing.userId = userId ? new mongoose_2.Types.ObjectId(userId) : existing.userId;
            existing.platform = dto.platform;
            existing.appVersion = dto.appVersion;
            existing.isTestDevice = dto.isTestDevice ?? existing.isTestDevice;
            existing.lastActive = new Date();
            return existing.save();
        }
        const deviceToken = new this.deviceTokenModel({
            ...dto,
            userId: userId ? new mongoose_2.Types.ObjectId(userId) : undefined,
            lastActive: new Date(),
        });
        return deviceToken.save();
    }
    async getTestDevices() {
        return this.deviceTokenModel.find({ isTestDevice: true }).sort({ lastActive: -1 }).exec();
    }
    async sendTestNotification(title, message, deviceTokenId) {
        // Sanitize user inputs to prevent XSS attacks
        const sanitized = (0, sanitize_util_1.sanitizeNotification)({ title, message });
        const device = await this.deviceTokenModel.findById(deviceTokenId);
        if (!device) {
            throw new common_1.NotFoundException(`Device token with ID ${deviceTokenId} not found`);
        }
        this.logger.log(`Sending test notification to device ${deviceTokenId}: ${sanitized.title} - ${sanitized.message}`);
        // Decrypt token for use (tokens are encrypted at rest)
        // const decryptedToken = (device as any).getDecryptedToken();
        // TODO: Implement actual push notification sending via FCM/APNS
        // When implementing, use: const token = (device as any).getDecryptedToken();
        // For now, just log it (don't log the actual token in production)
        this.logger.log(`Test notification would be sent to ${device.platform} device`);
    }
    // Actual notification delivery (called by queue processor)
    async deliverNotification(notificationId) {
        const notification = await this.notificationModel.findById(notificationId);
        if (!notification) {
            throw new common_1.NotFoundException(`Notification ${notificationId} not found`);
        }
        // Update status to sending
        notification.status = notification_schema_1.NotificationStatus.SENDING;
        await notification.save();
        try {
            // Get all active device tokens
            const devices = await this.deviceTokenModel.find({
                isTestDevice: false,
            });
            let delivered = 0;
            let failed = 0;
            // TODO: Implement actual FCM/APNS sending logic
            // For now, simulate delivery
            for (const device of devices) {
                try {
                    this.logger.log(`Sending to ${device.platform} device: ${device.token.substring(0, 20)}...`);
                    delivered++;
                }
                catch (error) {
                    const errorMessage = error instanceof Error ? error.message : 'Unknown error';
                    this.logger.error(`Failed to send to device ${device._id}: ${errorMessage}`);
                    failed++;
                }
            }
            // Update notification with delivery stats
            notification.status = notification_schema_1.NotificationStatus.SENT;
            notification.sentAt = new Date();
            notification.deliveredCount = delivered;
            notification.failedCount = failed;
            await notification.save();
            this.logger.log(`Notification ${notificationId} delivered: ${delivered} succeeded, ${failed} failed`);
        }
        catch (error) {
            notification.status = notification_schema_1.NotificationStatus.FAILED;
            await notification.save();
            const errorMessage = error instanceof Error ? error.message : 'Unknown error';
            this.logger.error(`Failed to deliver notification ${notificationId}: ${errorMessage}`);
            throw error;
        }
    }
};
exports.NotificationsService = NotificationsService;
exports.NotificationsService = NotificationsService = NotificationsService_1 = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, mongoose_1.InjectModel)(notification_schema_1.Notification.name)),
    __param(1, (0, mongoose_1.InjectModel)(device_token_schema_1.DeviceToken.name)),
    __param(2, (0, bull_1.InjectQueue)('notifications')),
    __metadata("design:paramtypes", [mongoose_2.Model,
        mongoose_2.Model, Object])
], NotificationsService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,