{"file":"/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/speakers/dto/speaker-filter.dto.ts","mappings":";;;;;;;;;;;;AAAA,qDAA2E;AAC3E,yDAA8C;AAC9C,+DAA2D;AAE3D,MAAa,gBAAiB,SAAQ,8BAAa;IAQjD,WAAW,CAAW;IAStB,SAAS,CAAW;IAIpB,OAAO,CAAU;IAMjB,IAAI,CAAY;CACjB;AA5BD,4CA4BC;AApBC;IAPC,IAAA,4BAAU,GAAE;IACZ,IAAA,2BAAS,GAAE;IACX,IAAA,6BAAS,EAAC,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE;QACvB,IAAI,KAAK,KAAK,MAAM,IAAI,KAAK,KAAK,IAAI;YAAE,OAAO,IAAI,CAAC;QACpD,IAAI,KAAK,KAAK,OAAO,IAAI,KAAK,KAAK,KAAK;YAAE,OAAO,KAAK,CAAC;QACvD,OAAO,SAAS,CAAC;IACnB,CAAC,CAAC;;qDACoB;AAStB;IAPC,IAAA,4BAAU,GAAE;IACZ,IAAA,2BAAS,GAAE;IACX,IAAA,6BAAS,EAAC,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE;QACvB,IAAI,KAAK,KAAK,MAAM,IAAI,KAAK,KAAK,IAAI;YAAE,OAAO,IAAI,CAAC;QACpD,IAAI,KAAK,KAAK,OAAO,IAAI,KAAK,KAAK,KAAK;YAAE,OAAO,KAAK,CAAC;QACvD,OAAO,SAAS,CAAC;IACnB,CAAC,CAAC;;mDACkB;AAIpB;IAFC,IAAA,4BAAU,GAAE;IACZ,IAAA,0BAAQ,GAAE;;iDACM;AAMjB;IAJC,IAAA,4BAAU,GAAE;IACZ,IAAA,yBAAO,GAAE;IACT,IAAA,0BAAQ,EAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;IACxB,IAAA,6BAAS,EAAC,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,CAAC,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;;8CACjE","names":[],"sources":["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/speakers/dto/speaker-filter.dto.ts"],"sourcesContent":["import { IsBoolean, IsOptional, IsString, IsArray } from 'class-validator';\nimport { Transform } from 'class-transformer';\nimport { PaginationDto } from '@common/dto/pagination.dto';\n\nexport class SpeakerFilterDto extends PaginationDto {\n  @IsOptional()\n  @IsBoolean()\n  @Transform(({ value }) => {\n    if (value === 'true' || value === true) return true;\n    if (value === 'false' || value === false) return false;\n    return undefined;\n  })\n  isHighlight?: boolean;\n\n  @IsOptional()\n  @IsBoolean()\n  @Transform(({ value }) => {\n    if (value === 'true' || value === true) return true;\n    if (value === 'false' || value === false) return false;\n    return undefined;\n  })\n  isVisible?: boolean;\n\n  @IsOptional()\n  @IsString()\n  company?: string;\n\n  @IsOptional()\n  @IsArray()\n  @IsString({ each: true })\n  @Transform(({ value }) => (typeof value === 'string' ? value.split(',') : value))\n  tags?: string[];\n}\n"],"version":3}