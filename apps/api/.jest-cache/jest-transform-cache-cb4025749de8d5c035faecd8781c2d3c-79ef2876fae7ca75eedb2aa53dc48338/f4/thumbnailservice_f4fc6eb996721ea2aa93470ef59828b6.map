{"file":"/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/press-materials/services/thumbnail.service.ts","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,2CAA4C;AAC5C,6CAA+B;AAC/B,2CAA+C;AAC/C,kDAAgE;AAChE,yDAA4E;AAIrE,IAAM,gBAAgB,GAAtB,MAAM,gBAAgB;IACnB,QAAQ,CAAW;IACnB,UAAU,CAAS;IAE3B,YAAY,aAA4B;QACtC,IAAI,CAAC,QAAQ,GAAG,IAAA,0BAAc,EAAC,aAAa,CAAC,CAAC;QAC9C,IAAI,CAAC,UAAU,GAAG,IAAA,2BAAe,EAAC,aAAa,CAAC,CAAC;IACnD,CAAC;IAED,KAAK,CAAC,iBAAiB,CACrB,IAAyB,EACzB,YAA+B,EAC/B,eAAuB;QAEvB,IAAI,YAAY,KAAK,OAAO,IAAI,YAAY,KAAK,OAAO,EAAE,CAAC;YACzD,OAAO,SAAS,CAAC;QACnB,CAAC;QAED,IAAI,YAAY,KAAK,OAAO,EAAE,CAAC;YAC7B,OAAO,IAAI,CAAC,sBAAsB,CAAC,IAAI,EAAE,eAAe,CAAC,CAAC;QAC5D,CAAC;QAED,uEAAuE;QACvE,uCAAuC;QACvC,OAAO,SAAS,CAAC;IACnB,CAAC;IAEO,KAAK,CAAC,sBAAsB,CAClC,IAAyB,EACzB,eAAuB;QAEvB,IAAI,CAAC;YACH,MAAM,eAAe,GAAG,MAAM,KAAK;iBAChC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC;iBACpB,MAAM,CAAC,GAAG,EAAE,GAAG,EAAE;gBAChB,GAAG,EAAE,OAAO;gBACZ,QAAQ,EAAE,QAAQ;aACnB,CAAC;iBACD,IAAI,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC;iBACrB,QAAQ,EAAE,CAAC;YAEd,MAAM,YAAY,GAAG,IAAI,CAAC,oBAAoB,CAAC,eAAe,CAAC,CAAC;YAEhE,MAAM,IAAI,CAAC,QAAQ,CAAC,IAAI,CACtB,IAAI,4BAAgB,CAAC;gBACnB,MAAM,EAAE,IAAI,CAAC,UAAU;gBACvB,GAAG,EAAE,YAAY;gBACjB,IAAI,EAAE,eAAe;gBACrB,WAAW,EAAE,YAAY;aAC1B,CAAC,CACH,CAAC;YAEF,OAAO,WAAW,IAAI,CAAC,UAAU,qBAAqB,YAAY,EAAE,CAAC;QACvE,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,6BAA6B,EAAE,KAAK,CAAC,CAAC;YACpD,iDAAiD;YACjD,+DAA+D;YAC/D,OAAO,SAAS,CAAC;QACnB,CAAC;IACH,CAAC;IAEO,oBAAoB,CAAC,eAAuB;QAClD,MAAM,QAAQ,GAAG,eAAe,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC5C,MAAM,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAC/C,MAAM,oBAAoB,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QACpD,MAAM,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC7C,OAAO,GAAG,IAAI,eAAe,oBAAoB,YAAY,CAAC;IAChE,CAAC;CACF,CAAA;AApEY,4CAAgB;2BAAhB,gBAAgB;IAD5B,IAAA,mBAAU,GAAE;qCAKgB,sBAAa;GAJ7B,gBAAgB,CAoE5B","names":[],"sources":["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/press-materials/services/thumbnail.service.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\nimport * as sharp from 'sharp';\nimport { ConfigService } from '@nestjs/config';\nimport { S3Client, PutObjectCommand } from '@aws-sdk/client-s3';\nimport { createS3Client, getS3BucketName } from '../../../config/s3.config';\nimport { PressMaterialType } from '@vtexday26/shared';\n\n@Injectable()\nexport class ThumbnailService {\n  private s3Client: S3Client;\n  private bucketName: string;\n\n  constructor(configService: ConfigService) {\n    this.s3Client = createS3Client(configService);\n    this.bucketName = getS3BucketName(configService);\n  }\n\n  async generateThumbnail(\n    file: Express.Multer.File,\n    materialType: PressMaterialType,\n    originalFileUrl: string,\n  ): Promise<string | undefined> {\n    if (materialType !== 'photo' && materialType !== 'video') {\n      return undefined;\n    }\n\n    if (materialType === 'photo') {\n      return this.generateImageThumbnail(file, originalFileUrl);\n    }\n\n    // For video thumbnails, we would need ffmpeg which requires more setup\n    // For now, we'll skip video thumbnails\n    return undefined;\n  }\n\n  private async generateImageThumbnail(\n    file: Express.Multer.File,\n    originalFileUrl: string,\n  ): Promise<string> {\n    try {\n      const thumbnailBuffer = await sharp\n        .default(file.buffer)\n        .resize(300, 300, {\n          fit: 'cover',\n          position: 'center',\n        })\n        .jpeg({ quality: 80 })\n        .toBuffer();\n\n      const thumbnailKey = this.generateThumbnailKey(originalFileUrl);\n\n      await this.s3Client.send(\n        new PutObjectCommand({\n          Bucket: this.bucketName,\n          Key: thumbnailKey,\n          Body: thumbnailBuffer,\n          ContentType: 'image/jpeg',\n        }),\n      );\n\n      return `https://${this.bucketName}.s3.amazonaws.com/${thumbnailKey}`;\n    } catch (error) {\n      console.error('Thumbnail generation error:', error);\n      // Return undefined if thumbnail generation fails\n      // We don't want to fail the entire upload because of thumbnail\n      return undefined;\n    }\n  }\n\n  private generateThumbnailKey(originalFileUrl: string): string {\n    const urlParts = originalFileUrl.split('/');\n    const fileName = urlParts[urlParts.length - 1];\n    const nameWithoutExtension = fileName.split('.')[0];\n    const path = urlParts.slice(3, -1).join('/');\n    return `${path}/thumbnails/${nameWithoutExtension}_thumb.jpg`;\n  }\n}\n"],"version":3}