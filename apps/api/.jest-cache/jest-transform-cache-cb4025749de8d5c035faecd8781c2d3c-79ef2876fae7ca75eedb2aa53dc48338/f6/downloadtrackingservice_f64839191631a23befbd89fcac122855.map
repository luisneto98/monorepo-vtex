{"file":"/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/press-materials/services/download-tracking.service.ts","mappings":"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","names":[],"sources":["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/press-materials/services/download-tracking.service.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, Types } from 'mongoose';\nimport { DownloadLog, DownloadLogDocument } from '../schemas/download-log.schema';\nimport { PressMaterial, PressMaterialDocument } from '../schemas/press-material.schema';\n\n@Injectable()\nexport class DownloadTrackingService {\n  constructor(\n    @InjectModel(DownloadLog.name)\n    private downloadLogModel: Model<DownloadLogDocument>,\n    @InjectModel(PressMaterial.name)\n    private pressMaterialModel: Model<PressMaterialDocument>,\n  ) {}\n\n  async trackDownload(\n    materialId: string,\n    ipAddress: string,\n    userAgent: string,\n    userId?: string,\n  ): Promise<void> {\n    try {\n      // Create download log\n      await this.downloadLogModel.create({\n        materialId: new Types.ObjectId(materialId),\n        ipAddress,\n        userAgent,\n        userId,\n        downloadedAt: new Date(),\n      });\n\n      // Increment download count on the material\n      await this.pressMaterialModel.findByIdAndUpdate(\n        materialId,\n        { $inc: { downloadCount: 1 } },\n        { new: false },\n      );\n    } catch (error) {\n      console.error('Error tracking download:', error);\n      // Don't throw error - we don't want download tracking failure to prevent download\n    }\n  }\n\n  async getDownloadStatistics(materialId: string, days = 30): Promise<any> {\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() - days);\n\n    const stats = await this.downloadLogModel.aggregate([\n      {\n        $match: {\n          materialId: new Types.ObjectId(materialId),\n          downloadedAt: { $gte: startDate },\n        },\n      },\n      {\n        $group: {\n          _id: {\n            $dateToString: {\n              format: '%Y-%m-%d',\n              date: '$downloadedAt',\n            },\n          },\n          count: { $sum: 1 },\n        },\n      },\n      {\n        $sort: { _id: 1 },\n      },\n    ]);\n\n    const totalDownloads = await this.downloadLogModel.countDocuments({\n      materialId: new Types.ObjectId(materialId),\n    });\n\n    const uniqueIPs = await this.downloadLogModel.distinct('ipAddress', {\n      materialId: new Types.ObjectId(materialId),\n    });\n\n    return {\n      totalDownloads,\n      uniqueVisitors: uniqueIPs.length,\n      dailyStats: stats,\n      period: `${days} days`,\n    };\n  }\n\n  async getTopDownloadedMaterials(limit = 10): Promise<any[]> {\n    return this.pressMaterialModel\n      .find({ status: 'published' })\n      .sort({ downloadCount: -1 })\n      .limit(limit)\n      .select('title type downloadCount thumbnailUrl')\n      .lean();\n  }\n}\n"],"version":3}