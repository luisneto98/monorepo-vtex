{"file":"/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/notifications/notifications.controller.ts","mappings":"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","names":[],"sources":["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/notifications/notifications.controller.ts"],"sourcesContent":["import {\n  Controller,\n  Post,\n  Get,\n  Put,\n  Delete,\n  Body,\n  Param,\n  Query,\n  UseGuards,\n  Request,\n  ParseIntPipe,\n  DefaultValuePipe,\n} from '@nestjs/common';\nimport { NotificationsService } from './notifications.service';\nimport { JwtAuthGuard } from '@common/guards/jwt-auth.guard';\nimport { RolesGuard } from '@common/guards/roles.guard';\nimport { NotificationThrottleGuard } from '@common/guards/notification-throttle.guard';\nimport { Roles } from '@common/decorators/roles.decorator';\nimport { Public } from '@common/decorators/public.decorator';\nimport { NotificationThrottle } from '@common/decorators/notification-throttle.decorator';\nimport { UserRole } from '@shared/types/user.types';\nimport { CreateNotificationDto } from './dto/create-notification.dto';\nimport { UpdateNotificationDto } from './dto/update-notification.dto';\nimport { RegisterDeviceDto } from './dto/register-device.dto';\nimport { TestNotificationDto } from './dto/test-notification.dto';\nimport { NotificationStatus } from './schemas/notification.schema';\n\n@Controller('notifications')\n@UseGuards(JwtAuthGuard, RolesGuard)\nexport class NotificationsController {\n  constructor(private readonly notificationsService: NotificationsService) {}\n\n  // Legacy endpoints (kept for backward compatibility)\n  @Post('broadcast')\n  @Roles(UserRole.SUPER_ADMIN, UserRole.PRODUCER)\n  @UseGuards(NotificationThrottleGuard)\n  @NotificationThrottle({ ttl: 3600000, limit: 10 }) // 10 notifications per hour\n  async broadcast(@Body() dto: { title: string; message: string }) {\n    await this.notificationsService.broadcastNotification(dto.title, dto.message);\n    return { message: 'Notification sent successfully' };\n  }\n\n  @Post('session-reminder')\n  @Roles(UserRole.SUPER_ADMIN, UserRole.PRODUCER)\n  async sendSessionReminder(@Body() dto: { userId: string; sessionId: string }) {\n    await this.notificationsService.sendSessionReminder(dto.userId, dto.sessionId);\n    return { message: 'Reminder sent successfully' };\n  }\n\n  // New notification management endpoints\n  @Post()\n  @Roles(UserRole.SUPER_ADMIN, UserRole.PRODUCER)\n  @UseGuards(NotificationThrottleGuard)\n  @NotificationThrottle({ ttl: 3600000, limit: 10 }) // 10 notifications per hour\n  async createNotification(@Body() dto: CreateNotificationDto, @Request() req: any) {\n    const notification = await this.notificationsService.createNotification(dto, req.user.userId);\n    return notification;\n  }\n\n  @Get()\n  @Roles(UserRole.SUPER_ADMIN, UserRole.PRODUCER)\n  async findAll(\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n    @Query('status') status?: NotificationStatus,\n    @Query('createdBy') createdBy?: string,\n  ) {\n    return this.notificationsService.findAll(page, limit, status, createdBy);\n  }\n\n  @Get('history')\n  @Roles(UserRole.SUPER_ADMIN, UserRole.PRODUCER)\n  async getHistory(\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n    @Query('startDate') startDate?: string,\n    @Query('endDate') endDate?: string,\n    @Query('createdBy') createdBy?: string,\n    @Query('search') search?: string,\n  ) {\n    return this.notificationsService.getHistory(\n      page,\n      limit,\n      startDate ? new Date(startDate) : undefined,\n      endDate ? new Date(endDate) : undefined,\n      createdBy,\n      search,\n    );\n  }\n\n  @Get('stats')\n  @Roles(UserRole.SUPER_ADMIN, UserRole.PRODUCER)\n  async getStats() {\n    return this.notificationsService.getStats();\n  }\n\n  @Get('scheduled')\n  @Roles(UserRole.SUPER_ADMIN, UserRole.PRODUCER)\n  async getScheduled(\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n  ) {\n    return this.notificationsService.findAll(page, limit, NotificationStatus.SCHEDULED);\n  }\n\n  @Get(':id')\n  @Roles(UserRole.SUPER_ADMIN, UserRole.PRODUCER)\n  async findOne(@Param('id') id: string) {\n    return this.notificationsService.findOne(id);\n  }\n\n  @Put(':id')\n  @Roles(UserRole.SUPER_ADMIN, UserRole.PRODUCER)\n  async updateNotification(@Param('id') id: string, @Body() dto: UpdateNotificationDto) {\n    return this.notificationsService.updateNotification(id, dto);\n  }\n\n  @Delete(':id')\n  @Roles(UserRole.SUPER_ADMIN, UserRole.PRODUCER)\n  async deleteNotification(@Param('id') id: string) {\n    await this.notificationsService.deleteNotification(id);\n    return { message: 'Notification deleted successfully' };\n  }\n\n  @Post(':id/cancel')\n  @Roles(UserRole.SUPER_ADMIN, UserRole.PRODUCER)\n  async cancelScheduled(@Param('id') id: string) {\n    await this.notificationsService.cancelScheduledNotification(id);\n    return { message: 'Scheduled notification cancelled' };\n  }\n\n  @Post('schedule')\n  @Roles(UserRole.SUPER_ADMIN, UserRole.PRODUCER)\n  @UseGuards(NotificationThrottleGuard)\n  @NotificationThrottle({ ttl: 3600000, limit: 10 }) // 10 notifications per hour\n  async scheduleNotification(@Body() dto: CreateNotificationDto, @Request() req: any) {\n    if (!dto.scheduledAt) {\n      return { error: 'scheduledAt is required for scheduled notifications' };\n    }\n\n    const notification = await this.notificationsService.createNotification(dto, req.user.userId);\n    return notification;\n  }\n\n  // Device management endpoints\n  @Public() // Allow unauthenticated access for visitor mode device registration\n  @Post('devices/register')\n  async registerDevice(@Body() dto: RegisterDeviceDto, @Request() req: any) {\n    const userId = req.user?.userId;\n    return this.notificationsService.registerDevice(dto, userId);\n  }\n\n  @Get('devices/test')\n  @Roles(UserRole.SUPER_ADMIN, UserRole.PRODUCER)\n  async getTestDevices() {\n    return this.notificationsService.getTestDevices();\n  }\n\n  @Post('test')\n  @Roles(UserRole.SUPER_ADMIN, UserRole.PRODUCER)\n  @UseGuards(NotificationThrottleGuard)\n  @NotificationThrottle({ ttl: 3600000, limit: 10 }) // 10 notifications per hour\n  async sendTest(@Body() dto: TestNotificationDto) {\n    await this.notificationsService.sendTestNotification(dto.title, dto.message, dto.deviceTokenId);\n    return { message: 'Test notification sent successfully' };\n  }\n}\n"],"version":3}