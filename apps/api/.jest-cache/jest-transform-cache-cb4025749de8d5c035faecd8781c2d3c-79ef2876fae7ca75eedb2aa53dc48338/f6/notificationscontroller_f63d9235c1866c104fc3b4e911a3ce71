9e2fbb57da816f61702c59dac0fc8d51
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotificationsController = void 0;
const common_1 = require("@nestjs/common");
const notifications_service_1 = require("./notifications.service");
const jwt_auth_guard_1 = require("@common/guards/jwt-auth.guard");
const roles_guard_1 = require("@common/guards/roles.guard");
const notification_throttle_guard_1 = require("@common/guards/notification-throttle.guard");
const roles_decorator_1 = require("@common/decorators/roles.decorator");
const public_decorator_1 = require("@common/decorators/public.decorator");
const notification_throttle_decorator_1 = require("@common/decorators/notification-throttle.decorator");
const user_types_1 = require("@shared/types/user.types");
const create_notification_dto_1 = require("./dto/create-notification.dto");
const update_notification_dto_1 = require("./dto/update-notification.dto");
const register_device_dto_1 = require("./dto/register-device.dto");
const test_notification_dto_1 = require("./dto/test-notification.dto");
const notification_schema_1 = require("./schemas/notification.schema");
let NotificationsController = class NotificationsController {
    notificationsService;
    constructor(notificationsService) {
        this.notificationsService = notificationsService;
    }
    // Legacy endpoints (kept for backward compatibility)
    async broadcast(dto) {
        await this.notificationsService.broadcastNotification(dto.title, dto.message);
        return { message: 'Notification sent successfully' };
    }
    async sendSessionReminder(dto) {
        await this.notificationsService.sendSessionReminder(dto.userId, dto.sessionId);
        return { message: 'Reminder sent successfully' };
    }
    // New notification management endpoints
    async createNotification(dto, req) {
        const notification = await this.notificationsService.createNotification(dto, req.user.userId);
        return notification;
    }
    async findAll(page, limit, status, createdBy) {
        return this.notificationsService.findAll(page, limit, status, createdBy);
    }
    async getHistory(page, limit, startDate, endDate, createdBy, search) {
        return this.notificationsService.getHistory(page, limit, startDate ? new Date(startDate) : undefined, endDate ? new Date(endDate) : undefined, createdBy, search);
    }
    async getStats() {
        return this.notificationsService.getStats();
    }
    async getScheduled(page, limit) {
        return this.notificationsService.findAll(page, limit, notification_schema_1.NotificationStatus.SCHEDULED);
    }
    async findOne(id) {
        return this.notificationsService.findOne(id);
    }
    async updateNotification(id, dto) {
        return this.notificationsService.updateNotification(id, dto);
    }
    async deleteNotification(id) {
        await this.notificationsService.deleteNotification(id);
        return { message: 'Notification deleted successfully' };
    }
    async cancelScheduled(id) {
        await this.notificationsService.cancelScheduledNotification(id);
        return { message: 'Scheduled notification cancelled' };
    }
    async scheduleNotification(dto, req) {
        if (!dto.scheduledAt) {
            return { error: 'scheduledAt is required for scheduled notifications' };
        }
        const notification = await this.notificationsService.createNotification(dto, req.user.userId);
        return notification;
    }
    // Device management endpoints
    async registerDevice(dto, req) {
        const userId = req.user?.userId;
        return this.notificationsService.registerDevice(dto, userId);
    }
    async getTestDevices() {
        return this.notificationsService.getTestDevices();
    }
    async sendTest(dto) {
        await this.notificationsService.sendTestNotification(dto.title, dto.message, dto.deviceTokenId);
        return { message: 'Test notification sent successfully' };
    }
};
exports.NotificationsController = NotificationsController;
__decorate([
    (0, common_1.Post)('broadcast'),
    (0, roles_decorator_1.Roles)(user_types_1.UserRole.SUPER_ADMIN, user_types_1.UserRole.PRODUCER),
    (0, common_1.UseGuards)(notification_throttle_guard_1.NotificationThrottleGuard),
    (0, notification_throttle_decorator_1.NotificationThrottle)({ ttl: 3600000, limit: 10 }) // 10 notifications per hour
    ,
    __param(0, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], NotificationsController.prototype, "broadcast", null);
__decorate([
    (0, common_1.Post)('session-reminder'),
    (0, roles_decorator_1.Roles)(user_types_1.UserRole.SUPER_ADMIN, user_types_1.UserRole.PRODUCER),
    __param(0, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], NotificationsController.prototype, "sendSessionReminder", null);
__decorate([
    (0, common_1.Post)(),
    (0, roles_decorator_1.Roles)(user_types_1.UserRole.SUPER_ADMIN, user_types_1.UserRole.PRODUCER),
    (0, common_1.UseGuards)(notification_throttle_guard_1.NotificationThrottleGuard),
    (0, notification_throttle_decorator_1.NotificationThrottle)({ ttl: 3600000, limit: 10 }) // 10 notifications per hour
    ,
    __param(0, (0, common_1.Body)()),
    __param(1, (0, common_1.Request)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [create_notification_dto_1.CreateNotificationDto, Object]),
    __metadata("design:returntype", Promise)
], NotificationsController.prototype, "createNotification", null);
__decorate([
    (0, common_1.Get)(),
    (0, roles_decorator_1.Roles)(user_types_1.UserRole.SUPER_ADMIN, user_types_1.UserRole.PRODUCER),
    __param(0, (0, common_1.Query)('page', new common_1.DefaultValuePipe(1), common_1.ParseIntPipe)),
    __param(1, (0, common_1.Query)('limit', new common_1.DefaultValuePipe(10), common_1.ParseIntPipe)),
    __param(2, (0, common_1.Query)('status')),
    __param(3, (0, common_1.Query)('createdBy')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Number, Number, String, String]),
    __metadata("design:returntype", Promise)
], NotificationsController.prototype, "findAll", null);
__decorate([
    (0, common_1.Get)('history'),
    (0, roles_decorator_1.Roles)(user_types_1.UserRole.SUPER_ADMIN, user_types_1.UserRole.PRODUCER),
    __param(0, (0, common_1.Query)('page', new common_1.DefaultValuePipe(1), common_1.ParseIntPipe)),
    __param(1, (0, common_1.Query)('limit', new common_1.DefaultValuePipe(10), common_1.ParseIntPipe)),
    __param(2, (0, common_1.Query)('startDate')),
    __param(3, (0, common_1.Query)('endDate')),
    __param(4, (0, common_1.Query)('createdBy')),
    __param(5, (0, common_1.Query)('search')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Number, Number, String, String, String, String]),
    __metadata("design:returntype", Promise)
], NotificationsController.prototype, "getHistory", null);
__decorate([
    (0, common_1.Get)('stats'),
    (0, roles_decorator_1.Roles)(user_types_1.UserRole.SUPER_ADMIN, user_types_1.UserRole.PRODUCER),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], NotificationsController.prototype, "getStats", null);
__decorate([
    (0, common_1.Get)('scheduled'),
    (0, roles_decorator_1.Roles)(user_types_1.UserRole.SUPER_ADMIN, user_types_1.UserRole.PRODUCER),
    __param(0, (0, common_1.Query)('page', new common_1.DefaultValuePipe(1), common_1.ParseIntPipe)),
    __param(1, (0, common_1.Query)('limit', new common_1.DefaultValuePipe(10), common_1.ParseIntPipe)),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Number, Number]),
    __metadata("design:returntype", Promise)
], NotificationsController.prototype, "getScheduled", null);
__decorate([
    (0, common_1.Get)(':id'),
    (0, roles_decorator_1.Roles)(user_types_1.UserRole.SUPER_ADMIN, user_types_1.UserRole.PRODUCER),
    __param(0, (0, common_1.Param)('id')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], NotificationsController.prototype, "findOne", null);
__decorate([
    (0, common_1.Put)(':id'),
    (0, roles_decorator_1.Roles)(user_types_1.UserRole.SUPER_ADMIN, user_types_1.UserRole.PRODUCER),
    __param(0, (0, common_1.Param)('id')),
    __param(1, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, update_notification_dto_1.UpdateNotificationDto]),
    __metadata("design:returntype", Promise)
], NotificationsController.prototype, "updateNotification", null);
__decorate([
    (0, common_1.Delete)(':id'),
    (0, roles_decorator_1.Roles)(user_types_1.UserRole.SUPER_ADMIN, user_types_1.UserRole.PRODUCER),
    __param(0, (0, common_1.Param)('id')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], NotificationsController.prototype, "deleteNotification", null);
__decorate([
    (0, common_1.Post)(':id/cancel'),
    (0, roles_decorator_1.Roles)(user_types_1.UserRole.SUPER_ADMIN, user_types_1.UserRole.PRODUCER),
    __param(0, (0, common_1.Param)('id')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], NotificationsController.prototype, "cancelScheduled", null);
__decorate([
    (0, common_1.Post)('schedule'),
    (0, roles_decorator_1.Roles)(user_types_1.UserRole.SUPER_ADMIN, user_types_1.UserRole.PRODUCER),
    (0, common_1.UseGuards)(notification_throttle_guard_1.NotificationThrottleGuard),
    (0, notification_throttle_decorator_1.NotificationThrottle)({ ttl: 3600000, limit: 10 }) // 10 notifications per hour
    ,
    __param(0, (0, common_1.Body)()),
    __param(1, (0, common_1.Request)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [create_notification_dto_1.CreateNotificationDto, Object]),
    __metadata("design:returntype", Promise)
], NotificationsController.prototype, "scheduleNotification", null);
__decorate([
    (0, public_decorator_1.Public)() // Allow unauthenticated access for visitor mode device registration
    ,
    (0, common_1.Post)('devices/register'),
    __param(0, (0, common_1.Body)()),
    __param(1, (0, common_1.Request)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [register_device_dto_1.RegisterDeviceDto, Object]),
    __metadata("design:returntype", Promise)
], NotificationsController.prototype, "registerDevice", null);
__decorate([
    (0, common_1.Get)('devices/test'),
    (0, roles_decorator_1.Roles)(user_types_1.UserRole.SUPER_ADMIN, user_types_1.UserRole.PRODUCER),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], NotificationsController.prototype, "getTestDevices", null);
__decorate([
    (0, common_1.Post)('test'),
    (0, roles_decorator_1.Roles)(user_types_1.UserRole.SUPER_ADMIN, user_types_1.UserRole.PRODUCER),
    (0, common_1.UseGuards)(notification_throttle_guard_1.NotificationThrottleGuard),
    (0, notification_throttle_decorator_1.NotificationThrottle)({ ttl: 3600000, limit: 10 }) // 10 notifications per hour
    ,
    __param(0, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [test_notification_dto_1.TestNotificationDto]),
    __metadata("design:returntype", Promise)
], NotificationsController.prototype, "sendTest", null);
exports.NotificationsController = NotificationsController = __decorate([
    (0, common_1.Controller)('notifications'),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, roles_guard_1.RolesGuard),
    __metadata("design:paramtypes", [notifications_service_1.NotificationsService])
], NotificationsController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,