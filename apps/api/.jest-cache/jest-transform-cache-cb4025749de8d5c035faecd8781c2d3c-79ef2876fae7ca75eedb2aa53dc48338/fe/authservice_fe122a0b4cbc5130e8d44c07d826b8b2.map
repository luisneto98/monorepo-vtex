{"file":"/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/auth/auth.service.ts","mappings":"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","names":[],"sources":["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/auth/auth.service.ts"],"sourcesContent":["import { Injectable, UnauthorizedException, Logger } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigService } from '@nestjs/config';\nimport * as bcrypt from 'bcrypt';\nimport { UsersService } from '../users/users.service';\nimport { LoginDto, AuthResponseDto } from './dto/login.dto';\nimport { RegisterDto } from './dto/register.dto';\n\n@Injectable()\nexport class AuthService {\n  private readonly logger = new Logger(AuthService.name);\n\n  constructor(\n    private usersService: UsersService,\n    private jwtService: JwtService,\n    private configService: ConfigService,\n  ) {}\n\n  async validateUser(email: string, password: string): Promise<any> {\n    const user = await this.usersService.findByEmail(email);\n\n    if (!user || !user.isActive) {\n      throw new UnauthorizedException('Invalid credentials');\n    }\n\n    const isPasswordValid = await bcrypt.compare(password, user.password);\n    if (!isPasswordValid) {\n      throw new UnauthorizedException('Invalid credentials');\n    }\n\n    const { password: _, refreshToken: __, ...result } = user.toObject();\n    return result;\n  }\n\n  async login(loginDto: LoginDto): Promise<AuthResponseDto> {\n    const user = await this.validateUser(loginDto.email, loginDto.password);\n\n    const tokens = await this.generateTokens(user);\n\n    // Store refresh token hash in database\n    const hashedRefreshToken = await this.hashRefreshToken(tokens.refreshToken);\n    await this.usersService.updateRefreshToken(user._id, hashedRefreshToken);\n\n    return {\n      accessToken: tokens.accessToken,\n      refreshToken: tokens.refreshToken,\n      expiresIn: this.getAccessTokenExpiresInSeconds(),\n      tokenType: 'Bearer',\n      user: {\n        id: user._id.toString(),\n        email: user.email,\n        role: user.role,\n        name: user.profile?.name || 'User',\n      },\n    };\n  }\n\n  async refreshTokens(refreshToken: string): Promise<AuthResponseDto> {\n    try {\n      // Verify refresh token\n      const payload = await this.jwtService.verifyAsync(refreshToken, {\n        secret: this.configService.get<string>('jwt.refreshSecret'),\n      });\n\n      // Find user and validate refresh token\n      const user = await this.usersService.findById(payload.sub, true);\n      if (!user || !user.refreshToken) {\n        throw new UnauthorizedException('Invalid refresh token');\n      }\n\n      // Verify refresh token matches stored hash\n      const isRefreshTokenValid = await bcrypt.compare(refreshToken, user.refreshToken);\n      if (!isRefreshTokenValid) {\n        throw new UnauthorizedException('Invalid refresh token');\n      }\n\n      // Generate new tokens (rotation)\n      const tokens = await this.generateTokens({\n        _id: user._id,\n        email: user.email,\n        role: user.role,\n        profile: user.profile,\n      });\n\n      // Update refresh token in database\n      const hashedRefreshToken = await this.hashRefreshToken(tokens.refreshToken);\n      await this.usersService.updateRefreshToken(user._id.toString(), hashedRefreshToken);\n\n      return {\n        accessToken: tokens.accessToken,\n        refreshToken: tokens.refreshToken,\n        expiresIn: this.getAccessTokenExpiresInSeconds(),\n        tokenType: 'Bearer',\n        user: {\n          id: user._id.toString(),\n          email: user.email,\n          role: user.role,\n          name: user.profile?.name || 'User',\n        },\n      };\n    } catch (error) {\n      this.logger.error(\n        'Refresh token validation failed',\n        error instanceof Error ? error.stack : error,\n      );\n      throw new UnauthorizedException('Invalid refresh token');\n    }\n  }\n\n  async logout(userId: string): Promise<void> {\n    await this.usersService.updateRefreshToken(userId, null);\n  }\n\n  private async generateTokens(user: any) {\n    const payload = {\n      sub: user._id.toString(),\n      email: user.email,\n      role: user.role,\n    };\n\n    const [accessToken, refreshToken] = await Promise.all([\n      this.jwtService.signAsync(payload, {\n        secret: this.configService.get<string>('jwt.secret'),\n        expiresIn: this.configService.get<string>('jwt.accessExpiration'),\n      }),\n      this.jwtService.signAsync(payload, {\n        secret: this.configService.get<string>('jwt.refreshSecret'),\n        expiresIn: this.configService.get<string>('jwt.refreshExpiration'),\n      }),\n    ]);\n\n    return {\n      accessToken,\n      refreshToken,\n    };\n  }\n\n  private async hashRefreshToken(refreshToken: string): Promise<string> {\n    return bcrypt.hash(refreshToken, 10);\n  }\n\n  private getAccessTokenExpiresInSeconds(): number {\n    const expiration = this.configService.get<string>('jwt.accessExpiration');\n    if (!expiration) return 900; // Default to 15 minutes\n\n    // Parse duration string (e.g., '15m', '1h', '7d') to seconds\n    const match = expiration.match(/^(\\d+)([smhd])$/);\n    if (!match) return 900; // Default to 15 minutes\n\n    const [, value, unit] = match;\n    const multipliers: Record<string, number> = { s: 1, m: 60, h: 3600, d: 86400 };\n    return parseInt(value) * multipliers[unit];\n  }\n\n  async register(registerDto: RegisterDto): Promise<AuthResponseDto> {\n    const hashedPassword = await bcrypt.hash(registerDto.password, 10);\n\n    // Set default preferences if not provided\n    const userDto = {\n      ...registerDto,\n      password: hashedPassword,\n      role: registerDto.role || 'participant',\n      preferences: {\n        language: 'pt' as const,\n        timezone: 'America/Sao_Paulo',\n        emailNotifications: true,\n        pushNotifications: true,\n        sessionReminders: true,\n      },\n    };\n\n    await this.usersService.create(userDto);\n\n    // Login the newly registered user\n    return this.login({ email: registerDto.email, password: registerDto.password });\n  }\n}\n"],"version":3}