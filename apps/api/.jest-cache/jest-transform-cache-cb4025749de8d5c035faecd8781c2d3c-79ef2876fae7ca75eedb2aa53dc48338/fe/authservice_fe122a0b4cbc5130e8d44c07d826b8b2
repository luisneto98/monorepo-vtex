effb3ec2b059f76598f0731eac63b764
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var AuthService_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthService = void 0;
const common_1 = require("@nestjs/common");
const jwt_1 = require("@nestjs/jwt");
const config_1 = require("@nestjs/config");
const bcrypt = __importStar(require("bcrypt"));
const users_service_1 = require("../users/users.service");
let AuthService = AuthService_1 = class AuthService {
    usersService;
    jwtService;
    configService;
    logger = new common_1.Logger(AuthService_1.name);
    constructor(usersService, jwtService, configService) {
        this.usersService = usersService;
        this.jwtService = jwtService;
        this.configService = configService;
    }
    async validateUser(email, password) {
        const user = await this.usersService.findByEmail(email);
        if (!user || !user.isActive) {
            throw new common_1.UnauthorizedException('Invalid credentials');
        }
        const isPasswordValid = await bcrypt.compare(password, user.password);
        if (!isPasswordValid) {
            throw new common_1.UnauthorizedException('Invalid credentials');
        }
        const { password: _, refreshToken: __, ...result } = user.toObject();
        return result;
    }
    async login(loginDto) {
        const user = await this.validateUser(loginDto.email, loginDto.password);
        const tokens = await this.generateTokens(user);
        // Store refresh token hash in database
        const hashedRefreshToken = await this.hashRefreshToken(tokens.refreshToken);
        await this.usersService.updateRefreshToken(user._id, hashedRefreshToken);
        return {
            accessToken: tokens.accessToken,
            refreshToken: tokens.refreshToken,
            expiresIn: this.getAccessTokenExpiresInSeconds(),
            tokenType: 'Bearer',
            user: {
                id: user._id.toString(),
                email: user.email,
                role: user.role,
                name: user.profile?.name || 'User',
            },
        };
    }
    async refreshTokens(refreshToken) {
        try {
            // Verify refresh token
            const payload = await this.jwtService.verifyAsync(refreshToken, {
                secret: this.configService.get('jwt.refreshSecret'),
            });
            // Find user and validate refresh token
            const user = await this.usersService.findById(payload.sub, true);
            if (!user || !user.refreshToken) {
                throw new common_1.UnauthorizedException('Invalid refresh token');
            }
            // Verify refresh token matches stored hash
            const isRefreshTokenValid = await bcrypt.compare(refreshToken, user.refreshToken);
            if (!isRefreshTokenValid) {
                throw new common_1.UnauthorizedException('Invalid refresh token');
            }
            // Generate new tokens (rotation)
            const tokens = await this.generateTokens({
                _id: user._id,
                email: user.email,
                role: user.role,
                profile: user.profile,
            });
            // Update refresh token in database
            const hashedRefreshToken = await this.hashRefreshToken(tokens.refreshToken);
            await this.usersService.updateRefreshToken(user._id.toString(), hashedRefreshToken);
            return {
                accessToken: tokens.accessToken,
                refreshToken: tokens.refreshToken,
                expiresIn: this.getAccessTokenExpiresInSeconds(),
                tokenType: 'Bearer',
                user: {
                    id: user._id.toString(),
                    email: user.email,
                    role: user.role,
                    name: user.profile?.name || 'User',
                },
            };
        }
        catch (error) {
            this.logger.error('Refresh token validation failed', error instanceof Error ? error.stack : error);
            throw new common_1.UnauthorizedException('Invalid refresh token');
        }
    }
    async logout(userId) {
        await this.usersService.updateRefreshToken(userId, null);
    }
    async generateTokens(user) {
        const payload = {
            sub: user._id.toString(),
            email: user.email,
            role: user.role,
        };
        const [accessToken, refreshToken] = await Promise.all([
            this.jwtService.signAsync(payload, {
                secret: this.configService.get('jwt.secret'),
                expiresIn: this.configService.get('jwt.accessExpiration'),
            }),
            this.jwtService.signAsync(payload, {
                secret: this.configService.get('jwt.refreshSecret'),
                expiresIn: this.configService.get('jwt.refreshExpiration'),
            }),
        ]);
        return {
            accessToken,
            refreshToken,
        };
    }
    async hashRefreshToken(refreshToken) {
        return bcrypt.hash(refreshToken, 10);
    }
    getAccessTokenExpiresInSeconds() {
        const expiration = this.configService.get('jwt.accessExpiration');
        if (!expiration)
            return 900; // Default to 15 minutes
        // Parse duration string (e.g., '15m', '1h', '7d') to seconds
        const match = expiration.match(/^(\d+)([smhd])$/);
        if (!match)
            return 900; // Default to 15 minutes
        const [, value, unit] = match;
        const multipliers = { s: 1, m: 60, h: 3600, d: 86400 };
        return parseInt(value) * multipliers[unit];
    }
    async register(registerDto) {
        const hashedPassword = await bcrypt.hash(registerDto.password, 10);
        // Set default preferences if not provided
        const userDto = {
            ...registerDto,
            password: hashedPassword,
            role: registerDto.role || 'participant',
            preferences: {
                language: 'pt',
                timezone: 'America/Sao_Paulo',
                emailNotifications: true,
                pushNotifications: true,
                sessionReminders: true,
            },
        };
        await this.usersService.create(userDto);
        // Login the newly registered user
        return this.login({ email: registerDto.email, password: registerDto.password });
    }
};
exports.AuthService = AuthService;
exports.AuthService = AuthService = AuthService_1 = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [users_service_1.UsersService,
        jwt_1.JwtService,
        config_1.ConfigService])
], AuthService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,