{"file":"/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/storage/services/virus-scanner.service.ts","mappings":"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","names":[],"sources":["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/storage/services/virus-scanner.service.ts"],"sourcesContent":["import { Injectable, Logger, BadRequestException } from '@nestjs/common';\nimport { StorageConfigService } from './storage-config.service';\nimport * as crypto from 'crypto';\n\n@Injectable()\nexport class VirusScannerService {\n  private readonly logger = new Logger(VirusScannerService.name);\n\n  constructor(private storageConfigService: StorageConfigService) {}\n\n  /**\n   * Scans a file for viruses and malicious content\n   * @param file - The file buffer to scan\n   * @param filename - The name of the file being scanned\n   * @param mimeType - The MIME type of the file\n   * @returns Promise<boolean> - true if file is clean, throws error if infected\n   */\n  async scanFile(file: Buffer, filename: string, mimeType: string): Promise<boolean> {\n    if (!this.storageConfigService.isVirusScanningEnabled()) {\n      this.logger.debug(`Virus scanning disabled, skipping scan for ${filename}`);\n      return true;\n    }\n\n    try {\n      // Perform basic checks based on file type\n      await this.performBasicChecks(file, filename, mimeType);\n\n      // If ClamAV is configured, use it\n      const clamavHost = this.storageConfigService.getClamAvHost();\n      const clamavPort = this.storageConfigService.getClamAvPort();\n\n      if (clamavHost) {\n        return await this.scanWithClamAV(file, filename, clamavHost, clamavPort);\n      }\n\n      // If no external scanner, perform enhanced heuristic checks\n      return await this.performHeuristicScanning(file, filename, mimeType);\n    } catch (error: any) {\n      this.logger.error(`Virus scanning failed for ${filename}: ${error.message}`, error.stack);\n\n      // If it's a validation error, rethrow it\n      if (error instanceof BadRequestException) {\n        throw error;\n      }\n\n      // Fail-safe: if scanning fails, reject the file for safety\n      throw new BadRequestException('File scanning failed. Please try again or contact support.');\n    }\n  }\n\n  /**\n   * Performs basic file validation checks\n   */\n  private async performBasicChecks(\n    file: Buffer,\n    filename: string,\n    mimeType: string,\n  ): Promise<void> {\n    // Check file size for anomalies (extremely small files)\n    if (file.length < 100) {\n      throw new BadRequestException(`File ${filename} is too small to be valid`);\n    }\n\n    // For images, check for embedded scripts or suspicious metadata\n    if (mimeType.startsWith('image/')) {\n      await this.checkImageSafety(file, filename);\n    }\n\n    // For PDFs, check for dangerous content\n    if (mimeType === 'application/pdf') {\n      await this.checkPdfSafety(file, filename);\n    }\n  }\n\n  /**\n   * Checks image files for suspicious content\n   */\n  private async checkImageSafety(file: Buffer, filename: string): Promise<void> {\n    const fileStr = file.toString('latin1');\n\n    // Check for embedded scripts or HTML\n    const dangerousPatterns = [\n      /<script/i,\n      /javascript:/i,\n      /onerror=/i,\n      /onload=/i,\n      /<iframe/i,\n      /<object/i,\n      /<embed/i,\n    ];\n\n    for (const pattern of dangerousPatterns) {\n      if (pattern.test(fileStr)) {\n        this.logger.warn(\n          `Potentially dangerous content detected in image ${filename}: ${pattern.source}`,\n        );\n        throw new BadRequestException(\n          `File ${filename} contains suspicious content and was rejected`,\n        );\n      }\n    }\n\n    // Check for excessive metadata (could hide malicious content)\n    const exifMarkers = fileStr.match(/Exif/gi) || [];\n    if (exifMarkers.length > 100) {\n      this.logger.warn(`File ${filename} contains excessive metadata`);\n      throw new BadRequestException(`File ${filename} contains suspicious metadata`);\n    }\n  }\n\n  /**\n   * Checks PDF files for dangerous content\n   */\n  private async checkPdfSafety(file: Buffer, filename: string): Promise<void> {\n    // Check for PDF magic bytes\n    const pdfMagicBytes = Buffer.from([0x25, 0x50, 0x44, 0x46]); // %PDF\n    const fileMagicBytes = file.slice(0, 4);\n\n    if (!fileMagicBytes.equals(pdfMagicBytes)) {\n      throw new BadRequestException(`File ${filename} is not a valid PDF file`);\n    }\n\n    // Check for suspicious patterns in the PDF\n    const suspiciousPatterns = [\n      /\\/JavaScript/i,\n      /\\/JS/i,\n      /\\/Launch/i,\n      /\\/EmbeddedFile/i,\n      /\\/OpenAction/i,\n      /\\/AA/i, // Additional Actions\n      /\\/SubmitForm/i,\n      /\\/ImportData/i,\n      /\\/Hide/i,\n    ];\n\n    const fileContent = file.toString('latin1');\n\n    for (const pattern of suspiciousPatterns) {\n      if (pattern.test(fileContent)) {\n        this.logger.warn(\n          `Potentially dangerous content detected in ${filename}: ${pattern.source}`,\n        );\n        // Allow with warning for now, but log for monitoring\n      }\n    }\n\n    // Check file size for anomalies\n    if (file.length < 1024) {\n      throw new BadRequestException(`File ${filename} is too small to be a valid PDF`);\n    }\n  }\n\n  /**\n   * Scans file using ClamAV antivirus\n   */\n  private async scanWithClamAV(\n    file: Buffer,\n    filename: string,\n    host: string,\n    port: number,\n  ): Promise<boolean> {\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const net = require('net');\n\n    return new Promise((resolve, reject) => {\n      const client = new net.Socket();\n\n      client.setTimeout(30000); // 30 second timeout\n\n      client.connect(port, host, () => {\n        this.logger.debug(`Connected to ClamAV at ${host}:${port}`);\n\n        // Send INSTREAM command\n        client.write('zINSTREAM\\0');\n\n        // Send file size and content in chunks\n        const chunkSize = 65536; // 64KB chunks\n        let offset = 0;\n\n        while (offset < file.length) {\n          const chunk = file.slice(offset, Math.min(offset + chunkSize, file.length));\n          const sizeBuffer = Buffer.allocUnsafe(4);\n          sizeBuffer.writeUInt32BE(chunk.length, 0);\n          client.write(sizeBuffer);\n          client.write(chunk);\n          offset += chunkSize;\n        }\n\n        // Send zero-length chunk to indicate end\n        const endBuffer = Buffer.allocUnsafe(4);\n        endBuffer.writeUInt32BE(0, 0);\n        client.write(endBuffer);\n      });\n\n      client.on('data', (data: Buffer) => {\n        const response = data.toString().trim();\n        client.destroy();\n\n        if (response === 'stream: OK') {\n          this.logger.debug(`File ${filename} is clean`);\n          resolve(true);\n        } else if (response.includes('FOUND')) {\n          const virus = response.match(/stream: (.+) FOUND/)?.[1] || 'Unknown';\n          this.logger.warn(`Virus detected in ${filename}: ${virus}`);\n          reject(new BadRequestException(`File failed security scan and was rejected.`));\n        } else {\n          this.logger.error(`Unknown ClamAV response: ${response}`);\n          reject(new Error('Unknown virus scan response'));\n        }\n      });\n\n      client.on('error', (error: Error) => {\n        this.logger.error(`ClamAV connection error: ${error.message}`);\n        client.destroy();\n        reject(error);\n      });\n\n      client.on('timeout', () => {\n        this.logger.error('ClamAV scan timeout');\n        client.destroy();\n        reject(new Error('Virus scan timeout'));\n      });\n    });\n  }\n\n  /**\n   * Performs heuristic virus scanning without external service\n   */\n  private async performHeuristicScanning(\n    file: Buffer,\n    filename: string,\n    _mimeType: string,\n  ): Promise<boolean> {\n    // Calculate file hash for comparison with known malware databases\n    const fileHash = crypto.createHash('sha256').update(file).digest('hex');\n\n    this.logger.debug(`Heuristic scanning ${filename} (SHA256: ${fileHash})`);\n\n    const fileStr = file.toString('latin1');\n\n    // Check for obfuscated JavaScript\n    const obfuscationPatterns = [\n      /eval\\s*\\(/i,\n      /unescape\\s*\\(/i,\n      /String\\.fromCharCode/i,\n      /\\\\x[0-9a-f]{2}/gi,\n      /\\\\u[0-9a-f]{4}/gi,\n    ];\n\n    let suspiciousCount = 0;\n    for (const pattern of obfuscationPatterns) {\n      const matches = fileStr.match(pattern);\n      if (matches && matches.length > 5) {\n        suspiciousCount++;\n      }\n    }\n\n    if (suspiciousCount >= 3) {\n      this.logger.warn(`File ${filename} contains suspicious obfuscation patterns`);\n      throw new BadRequestException(`File failed security scan and was rejected.`);\n    }\n\n    // Check for excessive external references (potential phishing)\n    const externalRefs = fileStr.match(/https?:\\/\\//gi) || [];\n    if (externalRefs.length > 20) {\n      this.logger.warn(`File ${filename} contains excessive external references`);\n      throw new BadRequestException(`File contains too many external references`);\n    }\n\n    // If all checks pass, file is considered clean\n    this.logger.debug(`File ${filename} passed heuristic scanning`);\n    return true;\n  }\n\n  /**\n   * Quarantines a suspicious file for later analysis\n   */\n  async quarantineFile(file: Buffer, filename: string, reason: string): Promise<void> {\n    const fileHash = crypto.createHash('sha256').update(file).digest('hex');\n\n    this.logger.warn(`Quarantining file ${filename} (${fileHash}): ${reason}`);\n\n    // Log the event for security monitoring\n    this.logger.warn({\n      event: 'FILE_QUARANTINED',\n      filename,\n      hash: fileHash,\n      reason,\n      timestamp: new Date().toISOString(),\n    });\n  }\n}\n"],"version":3}