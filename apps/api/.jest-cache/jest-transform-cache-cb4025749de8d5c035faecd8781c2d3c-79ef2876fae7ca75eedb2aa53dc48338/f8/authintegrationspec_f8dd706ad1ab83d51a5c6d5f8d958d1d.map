{"file":"/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/tests/integration/auth.integration.spec.ts","mappings":"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","names":[],"sources":["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/tests/integration/auth.integration.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { INestApplication } from '@nestjs/common';\nimport request from 'supertest';\nimport { AppModule } from '../../src/app.module';\nimport { UsersService } from '../../src/modules/users/users.service';\nimport * as bcrypt from 'bcrypt';\n\ndescribe('Auth Endpoints (Integration)', () => {\n  let app: INestApplication;\n  let usersService: UsersService;\n\n  const testUser = {\n    email: 'test@example.com',\n    password: 'TestPassword123!',\n    role: 'participant',\n    name: 'Test User',\n  };\n\n  beforeAll(async () => {\n    const moduleFixture: TestingModule = await Test.createTestingModule({\n      imports: [AppModule],\n    }).compile();\n\n    app = moduleFixture.createNestApplication();\n    await app.init();\n\n    usersService = app.get<UsersService>(UsersService);\n  });\n\n  afterAll(async () => {\n    await app.close();\n  });\n\n  describe('POST /auth/login', () => {\n    it('should authenticate user with valid credentials', async () => {\n      // Mock user in database\n      const hashedPassword = await bcrypt.hash(testUser.password, 10);\n      jest.spyOn(usersService, 'findByEmail').mockResolvedValue({\n        _id: 'userid123',\n        ...testUser,\n        password: hashedPassword,\n        isActive: true,\n        toObject: function () {\n          return { ...this };\n        },\n      } as any);\n\n      const response = await request(app.getHttpServer())\n        .post('/api/auth/login')\n        .send({\n          email: testUser.email,\n          password: testUser.password,\n        })\n        .expect(200);\n\n      expect(response.body).toHaveProperty('accessToken');\n      expect(response.body).toHaveProperty('expiresIn');\n      expect(response.body).toHaveProperty('tokenType', 'Bearer');\n      expect(response.body).toHaveProperty('user');\n      expect(response.body.user.email).toBe(testUser.email);\n      expect(response.body).not.toHaveProperty('refreshToken'); // Should be in cookie only\n      expect(response.headers['set-cookie']).toBeDefined();\n    });\n\n    it('should return 401 for invalid credentials', async () => {\n      jest.spyOn(usersService, 'findByEmail').mockResolvedValue(null);\n\n      const response = await request(app.getHttpServer())\n        .post('/api/auth/login')\n        .send({\n          email: 'wrong@example.com',\n          password: 'WrongPassword',\n        })\n        .expect(401);\n\n      expect(response.body.error).toBeDefined();\n      expect(response.body.error.message).toContain('Invalid credentials');\n    });\n\n    it('should return 400 for invalid email format', async () => {\n      const response = await request(app.getHttpServer())\n        .post('/api/auth/login')\n        .send({\n          email: 'invalid-email',\n          password: 'Password123!',\n        })\n        .expect(400);\n\n      expect(response.body.error).toBeDefined();\n    });\n\n    it('should return 400 for short password', async () => {\n      const response = await request(app.getHttpServer())\n        .post('/api/auth/login')\n        .send({\n          email: 'test@example.com',\n          password: 'short',\n        })\n        .expect(400);\n\n      expect(response.body.error).toBeDefined();\n    });\n  });\n\n  describe('POST /auth/refresh', () => {\n    it('should refresh tokens with valid refresh token', async () => {\n      // First login to get refresh token\n      const hashedPassword = await bcrypt.hash(testUser.password, 10);\n      const mockUser = {\n        _id: 'userid123',\n        ...testUser,\n        password: hashedPassword,\n        isActive: true,\n        refreshToken: null,\n        toObject: function () {\n          return { ...this };\n        },\n      };\n\n      jest.spyOn(usersService, 'findByEmail').mockResolvedValue(mockUser as any);\n      jest.spyOn(usersService, 'findById').mockResolvedValue(mockUser as any);\n      jest.spyOn(usersService, 'updateRefreshToken').mockImplementation(async (_userId, token) => {\n        mockUser.refreshToken = token;\n      });\n\n      // Login first\n      const loginResponse = await request(app.getHttpServer())\n        .post('/api/auth/login')\n        .send({\n          email: testUser.email,\n          password: testUser.password,\n        })\n        .expect(200);\n\n      const cookies = loginResponse.headers['set-cookie'];\n\n      // Attempt refresh\n      const refreshResponse = await request(app.getHttpServer())\n        .post('/api/auth/refresh')\n        .set('Cookie', cookies)\n        .expect(200);\n\n      expect(refreshResponse.body).toHaveProperty('accessToken');\n      expect(refreshResponse.body).toHaveProperty('expiresIn');\n      expect(refreshResponse.body).toHaveProperty('tokenType', 'Bearer');\n      expect(refreshResponse.headers['set-cookie']).toBeDefined();\n    });\n\n    it('should return 401 when no refresh token provided', async () => {\n      const response = await request(app.getHttpServer()).post('/api/auth/refresh').expect(401);\n\n      expect(response.body.error).toBeDefined();\n      expect(response.body.error.message).toContain('Refresh token not provided');\n    });\n  });\n\n  describe('POST /auth/logout', () => {\n    it('should logout authenticated user', async () => {\n      // Get valid token first\n      const hashedPassword = await bcrypt.hash(testUser.password, 10);\n      jest.spyOn(usersService, 'findByEmail').mockResolvedValue({\n        _id: 'userid123',\n        ...testUser,\n        password: hashedPassword,\n        isActive: true,\n        toObject: function () {\n          return { ...this };\n        },\n      } as any);\n\n      const loginResponse = await request(app.getHttpServer())\n        .post('/api/auth/login')\n        .send({\n          email: testUser.email,\n          password: testUser.password,\n        })\n        .expect(200);\n\n      const { accessToken } = loginResponse.body;\n\n      jest.spyOn(usersService, 'updateRefreshToken').mockResolvedValue(undefined);\n\n      const response = await request(app.getHttpServer())\n        .post('/api/auth/logout')\n        .set('Authorization', `Bearer ${accessToken}`)\n        .expect(204);\n\n      // Check cookie is cleared\n      const cookies = response.headers['set-cookie'];\n      expect(cookies).toBeDefined();\n      expect(cookies[0]).toContain('refreshToken=;');\n      expect(cookies[0]).toContain('Expires=');\n    });\n\n    it('should return 401 for unauthenticated request', async () => {\n      await request(app.getHttpServer()).post('/api/auth/logout').expect(401);\n    });\n  });\n\n  describe('GET /auth/profile', () => {\n    it('should return user profile for authenticated user', async () => {\n      // Get valid token\n      const hashedPassword = await bcrypt.hash(testUser.password, 10);\n      jest.spyOn(usersService, 'findByEmail').mockResolvedValue({\n        _id: 'userid123',\n        ...testUser,\n        password: hashedPassword,\n        isActive: true,\n        toObject: function () {\n          return { ...this };\n        },\n      } as any);\n\n      const loginResponse = await request(app.getHttpServer())\n        .post('/api/auth/login')\n        .send({\n          email: testUser.email,\n          password: testUser.password,\n        })\n        .expect(200);\n\n      const { accessToken } = loginResponse.body;\n\n      const response = await request(app.getHttpServer())\n        .get('/api/auth/profile')\n        .set('Authorization', `Bearer ${accessToken}`)\n        .expect(200);\n\n      expect(response.body).toHaveProperty('id');\n      expect(response.body).toHaveProperty('email', testUser.email);\n      expect(response.body).toHaveProperty('role', testUser.role);\n    });\n\n    it('should return 401 for unauthenticated request', async () => {\n      await request(app.getHttpServer()).get('/api/auth/profile').expect(401);\n    });\n  });\n\n  describe('Rate Limiting', () => {\n    it('should rate limit login attempts', async () => {\n      // Make multiple rapid requests\n      const requests = [];\n      for (let i = 0; i < 10; i++) {\n        requests.push(\n          request(app.getHttpServer()).post('/api/auth/login').send({\n            email: 'test@example.com',\n            password: 'password',\n          }),\n        );\n      }\n\n      const responses = await Promise.all(requests);\n      const tooManyRequests = responses.filter((r) => r.status === 429);\n\n      // Should have some rate limited responses\n      expect(tooManyRequests.length).toBeGreaterThan(0);\n    }, 10000); // Increase timeout for rate limit test\n  });\n});\n"],"version":3}