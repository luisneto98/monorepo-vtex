28e97c579f8762e54a46586a413c2366
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const supertest_1 = __importDefault(require("supertest"));
const app_module_1 = require("../../src/app.module");
const users_service_1 = require("../../src/modules/users/users.service");
const bcrypt = __importStar(require("bcrypt"));
describe('Auth Endpoints (Integration)', () => {
    let app;
    let usersService;
    const testUser = {
        email: 'test@example.com',
        password: 'TestPassword123!',
        role: 'participant',
        name: 'Test User',
    };
    beforeAll(async () => {
        const moduleFixture = await testing_1.Test.createTestingModule({
            imports: [app_module_1.AppModule],
        }).compile();
        app = moduleFixture.createNestApplication();
        await app.init();
        usersService = app.get(users_service_1.UsersService);
    });
    afterAll(async () => {
        await app.close();
    });
    describe('POST /auth/login', () => {
        it('should authenticate user with valid credentials', async () => {
            // Mock user in database
            const hashedPassword = await bcrypt.hash(testUser.password, 10);
            jest.spyOn(usersService, 'findByEmail').mockResolvedValue({
                _id: 'userid123',
                ...testUser,
                password: hashedPassword,
                isActive: true,
                toObject: function () {
                    return { ...this };
                },
            });
            const response = await (0, supertest_1.default)(app.getHttpServer())
                .post('/api/auth/login')
                .send({
                email: testUser.email,
                password: testUser.password,
            })
                .expect(200);
            expect(response.body).toHaveProperty('accessToken');
            expect(response.body).toHaveProperty('expiresIn');
            expect(response.body).toHaveProperty('tokenType', 'Bearer');
            expect(response.body).toHaveProperty('user');
            expect(response.body.user.email).toBe(testUser.email);
            expect(response.body).not.toHaveProperty('refreshToken'); // Should be in cookie only
            expect(response.headers['set-cookie']).toBeDefined();
        });
        it('should return 401 for invalid credentials', async () => {
            jest.spyOn(usersService, 'findByEmail').mockResolvedValue(null);
            const response = await (0, supertest_1.default)(app.getHttpServer())
                .post('/api/auth/login')
                .send({
                email: 'wrong@example.com',
                password: 'WrongPassword',
            })
                .expect(401);
            expect(response.body.error).toBeDefined();
            expect(response.body.error.message).toContain('Invalid credentials');
        });
        it('should return 400 for invalid email format', async () => {
            const response = await (0, supertest_1.default)(app.getHttpServer())
                .post('/api/auth/login')
                .send({
                email: 'invalid-email',
                password: 'Password123!',
            })
                .expect(400);
            expect(response.body.error).toBeDefined();
        });
        it('should return 400 for short password', async () => {
            const response = await (0, supertest_1.default)(app.getHttpServer())
                .post('/api/auth/login')
                .send({
                email: 'test@example.com',
                password: 'short',
            })
                .expect(400);
            expect(response.body.error).toBeDefined();
        });
    });
    describe('POST /auth/refresh', () => {
        it('should refresh tokens with valid refresh token', async () => {
            // First login to get refresh token
            const hashedPassword = await bcrypt.hash(testUser.password, 10);
            const mockUser = {
                _id: 'userid123',
                ...testUser,
                password: hashedPassword,
                isActive: true,
                refreshToken: null,
                toObject: function () {
                    return { ...this };
                },
            };
            jest.spyOn(usersService, 'findByEmail').mockResolvedValue(mockUser);
            jest.spyOn(usersService, 'findById').mockResolvedValue(mockUser);
            jest.spyOn(usersService, 'updateRefreshToken').mockImplementation(async (_userId, token) => {
                mockUser.refreshToken = token;
            });
            // Login first
            const loginResponse = await (0, supertest_1.default)(app.getHttpServer())
                .post('/api/auth/login')
                .send({
                email: testUser.email,
                password: testUser.password,
            })
                .expect(200);
            const cookies = loginResponse.headers['set-cookie'];
            // Attempt refresh
            const refreshResponse = await (0, supertest_1.default)(app.getHttpServer())
                .post('/api/auth/refresh')
                .set('Cookie', cookies)
                .expect(200);
            expect(refreshResponse.body).toHaveProperty('accessToken');
            expect(refreshResponse.body).toHaveProperty('expiresIn');
            expect(refreshResponse.body).toHaveProperty('tokenType', 'Bearer');
            expect(refreshResponse.headers['set-cookie']).toBeDefined();
        });
        it('should return 401 when no refresh token provided', async () => {
            const response = await (0, supertest_1.default)(app.getHttpServer()).post('/api/auth/refresh').expect(401);
            expect(response.body.error).toBeDefined();
            expect(response.body.error.message).toContain('Refresh token not provided');
        });
    });
    describe('POST /auth/logout', () => {
        it('should logout authenticated user', async () => {
            // Get valid token first
            const hashedPassword = await bcrypt.hash(testUser.password, 10);
            jest.spyOn(usersService, 'findByEmail').mockResolvedValue({
                _id: 'userid123',
                ...testUser,
                password: hashedPassword,
                isActive: true,
                toObject: function () {
                    return { ...this };
                },
            });
            const loginResponse = await (0, supertest_1.default)(app.getHttpServer())
                .post('/api/auth/login')
                .send({
                email: testUser.email,
                password: testUser.password,
            })
                .expect(200);
            const { accessToken } = loginResponse.body;
            jest.spyOn(usersService, 'updateRefreshToken').mockResolvedValue(undefined);
            const response = await (0, supertest_1.default)(app.getHttpServer())
                .post('/api/auth/logout')
                .set('Authorization', `Bearer ${accessToken}`)
                .expect(204);
            // Check cookie is cleared
            const cookies = response.headers['set-cookie'];
            expect(cookies).toBeDefined();
            expect(cookies[0]).toContain('refreshToken=;');
            expect(cookies[0]).toContain('Expires=');
        });
        it('should return 401 for unauthenticated request', async () => {
            await (0, supertest_1.default)(app.getHttpServer()).post('/api/auth/logout').expect(401);
        });
    });
    describe('GET /auth/profile', () => {
        it('should return user profile for authenticated user', async () => {
            // Get valid token
            const hashedPassword = await bcrypt.hash(testUser.password, 10);
            jest.spyOn(usersService, 'findByEmail').mockResolvedValue({
                _id: 'userid123',
                ...testUser,
                password: hashedPassword,
                isActive: true,
                toObject: function () {
                    return { ...this };
                },
            });
            const loginResponse = await (0, supertest_1.default)(app.getHttpServer())
                .post('/api/auth/login')
                .send({
                email: testUser.email,
                password: testUser.password,
            })
                .expect(200);
            const { accessToken } = loginResponse.body;
            const response = await (0, supertest_1.default)(app.getHttpServer())
                .get('/api/auth/profile')
                .set('Authorization', `Bearer ${accessToken}`)
                .expect(200);
            expect(response.body).toHaveProperty('id');
            expect(response.body).toHaveProperty('email', testUser.email);
            expect(response.body).toHaveProperty('role', testUser.role);
        });
        it('should return 401 for unauthenticated request', async () => {
            await (0, supertest_1.default)(app.getHttpServer()).get('/api/auth/profile').expect(401);
        });
    });
    describe('Rate Limiting', () => {
        it('should rate limit login attempts', async () => {
            // Make multiple rapid requests
            const requests = [];
            for (let i = 0; i < 10; i++) {
                requests.push((0, supertest_1.default)(app.getHttpServer()).post('/api/auth/login').send({
                    email: 'test@example.com',
                    password: 'password',
                }));
            }
            const responses = await Promise.all(requests);
            const tooManyRequests = responses.filter((r) => r.status === 429);
            // Should have some rate limited responses
            expect(tooManyRequests.length).toBeGreaterThan(0);
        }, 10000); // Increase timeout for rate limit test
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,