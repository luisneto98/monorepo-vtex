{"file":"/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/news-releases/services/audit-log.service.ts","mappings":";;;;;;;;;;;;;;;AAAA,2CAA4C;AAC5C,+CAA+C;AAC/C,uCAAiC;AACjC,kEAA+F;AAGxF,IAAM,eAAe,GAArB,MAAM,eAAe;IAGhB;IAFV,YAEU,aAAiD;QAAjD,kBAAa,GAAb,aAAa,CAAoC;IACxD,CAAC;IAEJ,KAAK,CAAC,SAAS,CAAC,IAaf;QACC,MAAM,QAAQ,GAAG,IAAI,IAAI,CAAC,aAAa,CAAC;YACtC,GAAG,IAAI;YACP,UAAU,EAAE,cAAc;SAC3B,CAAC,CAAC;QACH,OAAO,QAAQ,CAAC,IAAI,EAAE,CAAC;IACzB,CAAC;IAED,KAAK,CAAC,YAAY,CAAC,QAAgB,EAAE,QAAgB,EAAE;QACrD,OAAO,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,IAAI,EAAE,CAAC;IAC3F,CAAC;IAED,KAAK,CAAC,eAAe,CACnB,MAAc,EACd,QAAgB,EAAE;QAElB,OAAO,IAAI,CAAC,aAAa;aACtB,IAAI,CAAC,EAAE,gBAAgB,EAAE,MAAM,EAAE,CAAC;aAClC,IAAI,CAAC,EAAE,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC;aACvB,KAAK,CAAC,KAAK,CAAC;aACZ,IAAI,EAAE,CAAC;IACZ,CAAC;CACF,CAAA;AAzCY,0CAAe;0BAAf,eAAe;IAD3B,IAAA,mBAAU,GAAE;IAGR,WAAA,IAAA,sBAAW,EAAC,sCAAmB,CAAC,IAAI,CAAC,CAAA;qCACf,gBAAK;GAHnB,eAAe,CAyC3B","names":[],"sources":["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/news-releases/services/audit-log.service.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { NewsReleaseAuditLog, NewsReleaseAuditLogDocument } from '../schemas/audit-log.schema';\n\n@Injectable()\nexport class AuditLogService {\n  constructor(\n    @InjectModel(NewsReleaseAuditLog.name)\n    private auditLogModel: Model<NewsReleaseAuditLogDocument>,\n  ) {}\n\n  async logAction(data: {\n    entityId: string;\n    action: 'create' | 'update' | 'delete' | 'publish' | 'archive' | 'restore';\n    performedBy: {\n      id: string;\n      name: string;\n      email: string;\n      role: string;\n    };\n    changes?: Record<string, any>;\n    metadata?: Record<string, any>;\n    ipAddress?: string;\n    userAgent?: string;\n  }): Promise<NewsReleaseAuditLogDocument> {\n    const auditLog = new this.auditLogModel({\n      ...data,\n      entityType: 'news-release',\n    });\n    return auditLog.save();\n  }\n\n  async getAuditLogs(entityId: string, limit: number = 50): Promise<NewsReleaseAuditLogDocument[]> {\n    return this.auditLogModel.find({ entityId }).sort({ timestamp: -1 }).limit(limit).exec();\n  }\n\n  async getUserActivity(\n    userId: string,\n    limit: number = 50,\n  ): Promise<NewsReleaseAuditLogDocument[]> {\n    return this.auditLogModel\n      .find({ 'performedBy.id': userId })\n      .sort({ timestamp: -1 })\n      .limit(limit)\n      .exec();\n  }\n}\n"],"version":3}