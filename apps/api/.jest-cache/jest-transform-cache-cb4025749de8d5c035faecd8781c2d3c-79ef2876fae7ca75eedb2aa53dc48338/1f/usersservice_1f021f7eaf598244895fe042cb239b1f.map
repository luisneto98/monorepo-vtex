{"file":"/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/users/users.service.ts","mappings":"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","names":[],"sources":["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/users/users.service.ts"],"sourcesContent":["import { Injectable, NotFoundException, ConflictException } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { User, UserDocument } from './schemas/user.schema';\n\n@Injectable()\nexport class UsersService {\n  constructor(@InjectModel(User.name) private userModel: Model<UserDocument>) {}\n\n  async create(createUserDto: any): Promise<UserDocument> {\n    const existingUser = await this.userModel.findOne({ email: createUserDto.email });\n    if (existingUser) {\n      throw new ConflictException('User with this email already exists');\n    }\n    const createdUser = new this.userModel(createUserDto);\n    return createdUser.save();\n  }\n\n  async findAll(): Promise<UserDocument[]> {\n    return this.userModel.find().select('-password').exec();\n  }\n\n  async findById(id: string, includeRefreshToken = false): Promise<UserDocument> {\n    const query = this.userModel.findById(id);\n    if (includeRefreshToken) {\n      query.select('+refreshToken');\n    } else {\n      query.select('-password');\n    }\n    const user = await query.exec();\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n    return user;\n  }\n\n  async findByEmail(email: string): Promise<UserDocument> {\n    return this.userModel.findOne({ email }).select('+password +refreshToken').exec();\n  }\n\n  async update(id: string, updateUserDto: any): Promise<UserDocument> {\n    const updatedUser = await this.userModel\n      .findByIdAndUpdate(id, updateUserDto, { new: true })\n      .select('-password')\n      .exec();\n    if (!updatedUser) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n    return updatedUser;\n  }\n\n  async remove(id: string): Promise<void> {\n    const result = await this.userModel.deleteOne({ _id: id }).exec();\n    if (result.deletedCount === 0) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n  }\n\n  async updateRefreshToken(userId: string, refreshToken: string | null): Promise<void> {\n    await this.userModel.findByIdAndUpdate(userId, { refreshToken }).exec();\n  }\n}\n"],"version":3}