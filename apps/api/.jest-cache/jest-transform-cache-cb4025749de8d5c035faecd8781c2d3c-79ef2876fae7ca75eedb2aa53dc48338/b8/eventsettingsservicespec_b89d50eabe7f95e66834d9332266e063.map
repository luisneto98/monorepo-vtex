{"file":"/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/event-settings/event-settings.service.spec.ts","mappings":"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","names":[],"sources":["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/event-settings/event-settings.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { getModelToken } from '@nestjs/mongoose';\nimport { CACHE_MANAGER } from '@nestjs/cache-manager';\nimport { BadRequestException } from '@nestjs/common';\nimport { EventSettingsService } from './event-settings.service';\nimport { EventSettings } from './schemas/event-settings.schema';\n\ndescribe('EventSettingsService', () => {\n  let service: EventSettingsService;\n  let mockModel: any;\n  let mockCacheManager: any;\n\n  const mockEventSettings = {\n    _id: '123',\n    eventName: {\n      pt: 'VTEX Day 2026',\n      en: 'VTEX Day 2026',\n      es: 'VTEX Day 2026',\n    },\n    startDate: new Date('2026-06-01T09:00:00Z'),\n    endDate: new Date('2026-06-03T18:00:00Z'),\n    venue: {\n      name: 'São Paulo Expo',\n      address: 'Rodovia dos Imigrantes, km 1,5',\n      city: 'São Paulo',\n      state: 'SP',\n      zipCode: '04329-100',\n      complement: 'Água Funda',\n    },\n    contact: {\n      email: 'contato@vtexday.com.br',\n      phone: '+55 11 9999-9999',\n      whatsapp: '+55 11 9999-9999',\n    },\n    socialMedia: {\n      instagram: 'https://instagram.com/vtexday',\n      facebook: 'https://facebook.com/vtexday',\n      linkedin: 'https://linkedin.com/company/vtexday',\n      twitter: 'https://twitter.com/vtexday',\n      youtube: 'https://youtube.com/vtexday',\n    },\n    mapCoordinates: {\n      latitude: -23.6283,\n      longitude: -46.6409,\n    },\n    updatedBy: 'user123',\n    updatedAt: new Date(),\n    toObject: jest.fn().mockReturnThis(),\n  };\n\n  beforeEach(async () => {\n    mockModel = jest.fn().mockImplementation(function (data: any) {\n      return {\n        ...data,\n        save: jest.fn().mockResolvedValue(mockEventSettings),\n      };\n    });\n\n    mockModel.findOne = jest.fn();\n    mockModel.findOneAndUpdate = jest.fn();\n\n    mockCacheManager = {\n      get: jest.fn(),\n      set: jest.fn(),\n      del: jest.fn(),\n    };\n\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        EventSettingsService,\n        {\n          provide: getModelToken(EventSettings.name),\n          useValue: mockModel,\n        },\n        {\n          provide: CACHE_MANAGER,\n          useValue: mockCacheManager,\n        },\n      ],\n    }).compile();\n\n    service = module.get<EventSettingsService>(EventSettingsService);\n  });\n\n  describe('getSettings', () => {\n    it('should return existing settings', async () => {\n      mockModel.findOne.mockReturnValue({\n        exec: jest.fn().mockResolvedValue(mockEventSettings),\n      });\n\n      const result = await service.getSettings();\n\n      expect(mockModel.findOne).toHaveBeenCalled();\n      expect(result).toEqual(mockEventSettings);\n    });\n\n    it('should create default settings if none exist', async () => {\n      mockModel.findOne.mockReturnValue({\n        exec: jest.fn().mockResolvedValue(null),\n      });\n\n      const result = await service.getSettings();\n\n      expect(mockModel.findOne).toHaveBeenCalled();\n      expect(result).toBeDefined();\n    });\n  });\n\n  describe('getPublicSettings', () => {\n    it('should return cached settings if available', async () => {\n      const cachedData = { ...mockEventSettings, updatedBy: '' };\n      mockCacheManager.get.mockResolvedValue(cachedData);\n\n      const result = await service.getPublicSettings();\n\n      expect(mockCacheManager.get).toHaveBeenCalledWith('event-settings:public');\n      expect(result).toEqual(cachedData);\n    });\n\n    it('should fetch and cache settings if not cached', async () => {\n      mockCacheManager.get.mockResolvedValue(null);\n      mockModel.findOne.mockReturnValue({\n        exec: jest.fn().mockResolvedValue(mockEventSettings),\n      });\n\n      const result = await service.getPublicSettings();\n\n      expect(mockCacheManager.get).toHaveBeenCalledWith('event-settings:public');\n      expect(mockModel.findOne).toHaveBeenCalled();\n      expect(mockCacheManager.set).toHaveBeenCalled();\n      expect(result.updatedBy).toBe('');\n    });\n  });\n\n  describe('updateSettings', () => {\n    it('should update settings successfully', async () => {\n      const updateDto = {\n        eventName: {\n          pt: 'VTEX Day 2027',\n          en: 'VTEX Day 2027',\n          es: 'VTEX Day 2027',\n        },\n      };\n\n      // Mock findOne for audit logging\n      mockModel.findOne.mockReturnValue({\n        exec: jest.fn().mockResolvedValue(mockEventSettings),\n      });\n\n      mockModel.findOneAndUpdate.mockReturnValue({\n        exec: jest.fn().mockResolvedValue(mockEventSettings),\n      });\n\n      const result = await service.updateSettings(updateDto, 'user123');\n\n      expect(mockModel.findOneAndUpdate).toHaveBeenCalledWith(\n        {},\n        expect.objectContaining({\n          ...updateDto,\n          updatedBy: 'user123',\n        }),\n        expect.objectContaining({\n          new: true,\n          upsert: true,\n          runValidators: true,\n        }),\n      );\n      expect(mockCacheManager.del).toHaveBeenCalledWith('event-settings:public');\n      expect(result).toEqual(mockEventSettings);\n    });\n\n    it('should throw error if end date is before start date', async () => {\n      const updateDto = {\n        startDate: '2026-06-03T09:00:00Z',\n        endDate: '2026-06-01T18:00:00Z',\n      };\n\n      // Mock findOne for audit logging\n      mockModel.findOne.mockReturnValue({\n        exec: jest.fn().mockResolvedValue(null),\n      });\n\n      await expect(service.updateSettings(updateDto, 'user123')).rejects.toThrow(\n        BadRequestException,\n      );\n    });\n\n    it('should throw error if end date equals start date', async () => {\n      const updateDto = {\n        startDate: '2026-06-01T09:00:00Z',\n        endDate: '2026-06-01T09:00:00Z',\n      };\n\n      // Mock findOne for audit logging\n      mockModel.findOne.mockReturnValue({\n        exec: jest.fn().mockResolvedValue(null),\n      });\n\n      await expect(service.updateSettings(updateDto, 'user123')).rejects.toThrow(\n        BadRequestException,\n      );\n    });\n  });\n});\n"],"version":3}