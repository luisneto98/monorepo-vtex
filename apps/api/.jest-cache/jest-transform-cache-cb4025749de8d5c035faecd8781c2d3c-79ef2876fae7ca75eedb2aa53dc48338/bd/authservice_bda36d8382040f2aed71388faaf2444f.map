{"version":3,"names":["common_1","cov_1pdhzuyt25","s","require","jwt_1","config_1","bcrypt","__importStar","users_service_1","AuthService","AuthService_1","usersService","jwtService","configService","logger","Logger","name","constructor","f","validateUser","email","password","user","findByEmail","b","isActive","UnauthorizedException","isPasswordValid","compare","_","refreshToken","__","result","toObject","login","loginDto","tokens","generateTokens","hashedRefreshToken","hashRefreshToken","updateRefreshToken","_id","accessToken","expiresIn","getAccessTokenExpiresInSeconds","tokenType","id","toString","role","profile","refreshTokens","payload","verifyAsync","secret","get","findById","sub","isRefreshTokenValid","error","Error","stack","logout","userId","Promise","all","signAsync","hash","expiration","match","value","unit","multipliers","m","h","d","parseInt","register","registerDto","hashedPassword","userDto","preferences","language","timezone","emailNotifications","pushNotifications","sessionReminders","create","exports","__decorate","Injectable","UsersService","JwtService","ConfigService"],"sources":["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/auth/auth.service.ts"],"sourcesContent":["import { Injectable, UnauthorizedException, Logger } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigService } from '@nestjs/config';\nimport * as bcrypt from 'bcrypt';\nimport { UsersService } from '../users/users.service';\nimport { LoginDto, AuthResponseDto } from './dto/login.dto';\nimport { RegisterDto } from './dto/register.dto';\n\n@Injectable()\nexport class AuthService {\n  private readonly logger = new Logger(AuthService.name);\n\n  constructor(\n    private usersService: UsersService,\n    private jwtService: JwtService,\n    private configService: ConfigService,\n  ) {}\n\n  async validateUser(email: string, password: string): Promise<any> {\n    const user = await this.usersService.findByEmail(email);\n\n    if (!user || !user.isActive) {\n      throw new UnauthorizedException('Invalid credentials');\n    }\n\n    const isPasswordValid = await bcrypt.compare(password, user.password);\n    if (!isPasswordValid) {\n      throw new UnauthorizedException('Invalid credentials');\n    }\n\n    const { password: _, refreshToken: __, ...result } = user.toObject();\n    return result;\n  }\n\n  async login(loginDto: LoginDto): Promise<AuthResponseDto> {\n    const user = await this.validateUser(loginDto.email, loginDto.password);\n\n    const tokens = await this.generateTokens(user);\n\n    // Store refresh token hash in database\n    const hashedRefreshToken = await this.hashRefreshToken(tokens.refreshToken);\n    await this.usersService.updateRefreshToken(user._id, hashedRefreshToken);\n\n    return {\n      accessToken: tokens.accessToken,\n      refreshToken: tokens.refreshToken,\n      expiresIn: this.getAccessTokenExpiresInSeconds(),\n      tokenType: 'Bearer',\n      user: {\n        id: user._id.toString(),\n        email: user.email,\n        role: user.role,\n        name: user.profile?.name || 'User',\n      },\n    };\n  }\n\n  async refreshTokens(refreshToken: string): Promise<AuthResponseDto> {\n    try {\n      // Verify refresh token\n      const payload = await this.jwtService.verifyAsync(refreshToken, {\n        secret: this.configService.get<string>('jwt.refreshSecret'),\n      });\n\n      // Find user and validate refresh token\n      const user = await this.usersService.findById(payload.sub, true);\n      if (!user || !user.refreshToken) {\n        throw new UnauthorizedException('Invalid refresh token');\n      }\n\n      // Verify refresh token matches stored hash\n      const isRefreshTokenValid = await bcrypt.compare(refreshToken, user.refreshToken);\n      if (!isRefreshTokenValid) {\n        throw new UnauthorizedException('Invalid refresh token');\n      }\n\n      // Generate new tokens (rotation)\n      const tokens = await this.generateTokens({\n        _id: user._id,\n        email: user.email,\n        role: user.role,\n        profile: user.profile,\n      });\n\n      // Update refresh token in database\n      const hashedRefreshToken = await this.hashRefreshToken(tokens.refreshToken);\n      await this.usersService.updateRefreshToken(user._id.toString(), hashedRefreshToken);\n\n      return {\n        accessToken: tokens.accessToken,\n        refreshToken: tokens.refreshToken,\n        expiresIn: this.getAccessTokenExpiresInSeconds(),\n        tokenType: 'Bearer',\n        user: {\n          id: user._id.toString(),\n          email: user.email,\n          role: user.role,\n          name: user.profile?.name || 'User',\n        },\n      };\n    } catch (error) {\n      this.logger.error(\n        'Refresh token validation failed',\n        error instanceof Error ? error.stack : error,\n      );\n      throw new UnauthorizedException('Invalid refresh token');\n    }\n  }\n\n  async logout(userId: string): Promise<void> {\n    await this.usersService.updateRefreshToken(userId, null);\n  }\n\n  private async generateTokens(user: any) {\n    const payload = {\n      sub: user._id.toString(),\n      email: user.email,\n      role: user.role,\n    };\n\n    const [accessToken, refreshToken] = await Promise.all([\n      this.jwtService.signAsync(payload, {\n        secret: this.configService.get<string>('jwt.secret'),\n        expiresIn: this.configService.get<string>('jwt.accessExpiration'),\n      }),\n      this.jwtService.signAsync(payload, {\n        secret: this.configService.get<string>('jwt.refreshSecret'),\n        expiresIn: this.configService.get<string>('jwt.refreshExpiration'),\n      }),\n    ]);\n\n    return {\n      accessToken,\n      refreshToken,\n    };\n  }\n\n  private async hashRefreshToken(refreshToken: string): Promise<string> {\n    return bcrypt.hash(refreshToken, 10);\n  }\n\n  private getAccessTokenExpiresInSeconds(): number {\n    const expiration = this.configService.get<string>('jwt.accessExpiration');\n    if (!expiration) return 900; // Default to 15 minutes\n\n    // Parse duration string (e.g., '15m', '1h', '7d') to seconds\n    const match = expiration.match(/^(\\d+)([smhd])$/);\n    if (!match) return 900; // Default to 15 minutes\n\n    const [, value, unit] = match;\n    const multipliers: Record<string, number> = { s: 1, m: 60, h: 3600, d: 86400 };\n    return parseInt(value) * multipliers[unit];\n  }\n\n  async register(registerDto: RegisterDto): Promise<AuthResponseDto> {\n    const hashedPassword = await bcrypt.hash(registerDto.password, 10);\n\n    // Set default preferences if not provided\n    const userDto = {\n      ...registerDto,\n      password: hashedPassword,\n      role: registerDto.role || 'participant',\n      preferences: {\n        language: 'pt' as const,\n        timezone: 'America/Sao_Paulo',\n        emailNotifications: true,\n        pushNotifications: true,\n        sessionReminders: true,\n      },\n    };\n\n    await this.usersService.create(userDto);\n\n    // Login the newly registered user\n    return this.login({ email: registerDto.email, password: registerDto.password });\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}