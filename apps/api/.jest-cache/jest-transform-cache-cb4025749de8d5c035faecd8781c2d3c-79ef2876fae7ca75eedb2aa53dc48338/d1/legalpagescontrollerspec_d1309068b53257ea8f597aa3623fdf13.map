{"file":"/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/legal-pages/tests/legal-pages.controller.spec.ts","mappings":"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","names":[],"sources":["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/legal-pages/tests/legal-pages.controller.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { LegalPagesController } from '../legal-pages.controller';\nimport { LegalPagesService } from '../legal-pages.service';\nimport { CreateLegalPageDto } from '../dto/create-legal-page.dto';\nimport { UpdateLegalPageDto } from '../dto/update-legal-page.dto';\nimport { SupportedLanguage } from '../dto/upload-file.dto';\nimport { LegalPageType } from '../schemas/legal-page.schema';\nimport { NotFoundException, BadRequestException } from '@nestjs/common';\nimport { Response } from 'express';\nimport { Readable } from 'stream';\n\ndescribe('LegalPagesController', () => {\n  let controller: LegalPagesController;\n  let service: LegalPagesService;\n\n  const mockLegalPage = {\n    _id: '507f1f77bcf86cd799439011',\n    slug: 'terms-of-use',\n    type: LegalPageType.TERMS,\n    title: {\n      pt: 'Termos de Uso',\n      en: 'Terms of Use',\n      es: 'Términos de Uso',\n    },\n    files: {\n      pt: {\n        filename: 'legal-pages/terms-of-use/pt/123456789.pdf',\n        originalName: 'termos.pdf',\n        size: 1024000,\n        uploadedAt: new Date(),\n        uploadedBy: 'admin-user-id',\n      },\n    },\n    isActive: true,\n    lastModifiedBy: 'admin-user-id',\n  };\n\n  const mockFile: Express.Multer.File = {\n    fieldname: 'file',\n    originalname: 'test.pdf',\n    encoding: '7bit',\n    mimetype: 'application/pdf',\n    size: 1024,\n    buffer: Buffer.from('mock pdf content'),\n    destination: '',\n    filename: 'test.pdf',\n    path: '',\n    stream: new Readable(),\n  };\n\n  const mockRequest = {\n    user: {\n      id: 'test-user-id',\n      email: 'test@example.com',\n      role: 'ADMIN',\n    },\n  };\n\n  const mockLegalPagesService = {\n    create: jest.fn(),\n    findAll: jest.fn(),\n    findOne: jest.fn(),\n    update: jest.fn(),\n    uploadFile: jest.fn(),\n    deleteFile: jest.fn(),\n    remove: jest.fn(),\n    getPublicPages: jest.fn(),\n    getFileStream: jest.fn(),\n    getSignedDownloadUrl: jest.fn(),\n  };\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      controllers: [LegalPagesController],\n      providers: [\n        {\n          provide: LegalPagesService,\n          useValue: mockLegalPagesService,\n        },\n      ],\n    }).compile();\n\n    controller = module.get<LegalPagesController>(LegalPagesController);\n    service = module.get<LegalPagesService>(LegalPagesService);\n\n    // Reset all mocks\n    jest.clearAllMocks();\n  });\n\n  it('should be defined', () => {\n    expect(controller).toBeDefined();\n  });\n\n  describe('create', () => {\n    it('should create a new legal page', async () => {\n      const createDto: CreateLegalPageDto = {\n        slug: 'privacy-policy',\n        type: LegalPageType.PRIVACY,\n        title: {\n          pt: 'Política de Privacidade',\n          en: 'Privacy Policy',\n          es: 'Política de Privacidad',\n        },\n      };\n\n      mockLegalPagesService.create.mockResolvedValue(mockLegalPage);\n\n      const result = await controller.create(createDto);\n\n      expect(result).toEqual(mockLegalPage);\n      expect(service.create).toHaveBeenCalledWith(createDto);\n      expect(service.create).toHaveBeenCalledTimes(1);\n    });\n\n    it('should handle creation errors', async () => {\n      const createDto: CreateLegalPageDto = {\n        slug: 'existing-slug',\n        type: LegalPageType.TERMS,\n        title: { en: 'Test' },\n      };\n\n      mockLegalPagesService.create.mockRejectedValue(\n        new BadRequestException('Legal page with this slug already exists'),\n      );\n\n      await expect(controller.create(createDto)).rejects.toThrow(BadRequestException);\n      expect(service.create).toHaveBeenCalledWith(createDto);\n    });\n  });\n\n  describe('findAll', () => {\n    it('should return all legal pages', async () => {\n      const mockPages = [mockLegalPage];\n      mockLegalPagesService.findAll.mockResolvedValue(mockPages);\n\n      const result = await controller.findAll(undefined);\n\n      expect(result).toEqual(mockPages);\n      expect(service.findAll).toHaveBeenCalledWith(undefined);\n      expect(service.findAll).toHaveBeenCalledTimes(1);\n    });\n\n    it('should filter by active status when provided', async () => {\n      const mockActivePages = [mockLegalPage];\n      mockLegalPagesService.findAll.mockResolvedValue(mockActivePages);\n\n      const result = await controller.findAll('true');\n\n      expect(result).toEqual(mockActivePages);\n      expect(service.findAll).toHaveBeenCalledWith(true);\n    });\n\n    it('should filter by inactive status when provided', async () => {\n      const mockInactivePages = [{ ...mockLegalPage, isActive: false }];\n      mockLegalPagesService.findAll.mockResolvedValue(mockInactivePages);\n\n      const result = await controller.findAll('false');\n\n      expect(result).toEqual(mockInactivePages);\n      expect(service.findAll).toHaveBeenCalledWith(false);\n    });\n  });\n\n  describe('findOne', () => {\n    it('should return a single legal page by ID', async () => {\n      const id = '507f1f77bcf86cd799439011';\n      mockLegalPagesService.findOne.mockResolvedValue(mockLegalPage);\n\n      const result = await controller.findOne(id);\n\n      expect(result).toEqual(mockLegalPage);\n      expect(service.findOne).toHaveBeenCalledWith(id);\n      expect(service.findOne).toHaveBeenCalledTimes(1);\n    });\n\n    it('should throw NotFoundException when page not found', async () => {\n      const id = 'nonexistent';\n      mockLegalPagesService.findOne.mockRejectedValue(\n        new NotFoundException(`Legal page with ID ${id} not found`),\n      );\n\n      await expect(controller.findOne(id)).rejects.toThrow(NotFoundException);\n      expect(service.findOne).toHaveBeenCalledWith(id);\n    });\n  });\n\n  describe('update', () => {\n    it('should update a legal page', async () => {\n      const id = '507f1f77bcf86cd799439011';\n      const updateDto: UpdateLegalPageDto = {\n        title: {\n          pt: 'Termos Atualizados',\n          en: 'Updated Terms',\n        },\n        isActive: false,\n      };\n\n      const updatedPage = { ...mockLegalPage, ...updateDto };\n      mockLegalPagesService.update.mockResolvedValue(updatedPage);\n\n      const result = await controller.update(id, updateDto, mockRequest);\n\n      expect(result).toEqual(updatedPage);\n      expect(service.update).toHaveBeenCalledWith(id, updateDto, mockRequest.user.id);\n      expect(service.update).toHaveBeenCalledTimes(1);\n    });\n\n    it('should handle update errors', async () => {\n      const id = 'nonexistent';\n      const updateDto: UpdateLegalPageDto = { isActive: false };\n\n      mockLegalPagesService.update.mockRejectedValue(\n        new NotFoundException(`Legal page with ID ${id} not found`),\n      );\n\n      await expect(controller.update(id, updateDto, mockRequest)).rejects.toThrow(\n        NotFoundException,\n      );\n      expect(service.update).toHaveBeenCalledWith(id, updateDto, mockRequest.user.id);\n    });\n  });\n\n  describe('uploadFile', () => {\n    it('should upload a file for a legal page', async () => {\n      const id = '507f1f77bcf86cd799439011';\n      const language = SupportedLanguage.PT;\n\n      mockLegalPagesService.uploadFile.mockResolvedValue(mockLegalPage);\n\n      const result = await controller.uploadFile(id, mockFile, language, mockRequest);\n\n      expect(result).toEqual(mockLegalPage);\n      expect(service.uploadFile).toHaveBeenCalledWith(id, mockFile, language, mockRequest.user.id);\n      expect(service.uploadFile).toHaveBeenCalledTimes(1);\n    });\n\n    it('should handle upload errors', async () => {\n      const id = 'nonexistent';\n      const language = SupportedLanguage.EN;\n\n      mockLegalPagesService.uploadFile.mockRejectedValue(\n        new NotFoundException(`Legal page with ID ${id} not found`),\n      );\n\n      await expect(controller.uploadFile(id, mockFile, language, mockRequest)).rejects.toThrow(\n        NotFoundException,\n      );\n      expect(service.uploadFile).toHaveBeenCalledWith(id, mockFile, language, mockRequest.user.id);\n    });\n  });\n\n  describe('deleteFile', () => {\n    it('should delete a file for a specific language', async () => {\n      const id = '507f1f77bcf86cd799439011';\n      const language = SupportedLanguage.PT;\n\n      const updatedPage = {\n        ...mockLegalPage,\n        files: {},\n      };\n      mockLegalPagesService.deleteFile.mockResolvedValue(updatedPage);\n\n      const result = await controller.deleteFile(id, language, mockRequest);\n\n      expect(result).toEqual(updatedPage);\n      expect(service.deleteFile).toHaveBeenCalledWith(id, language, mockRequest.user.id);\n      expect(service.deleteFile).toHaveBeenCalledTimes(1);\n    });\n\n    it('should handle delete file errors', async () => {\n      const id = '507f1f77bcf86cd799439011';\n      const language = SupportedLanguage.ES;\n\n      mockLegalPagesService.deleteFile.mockRejectedValue(\n        new NotFoundException(`No file found for language ${language}`),\n      );\n\n      await expect(controller.deleteFile(id, language, mockRequest)).rejects.toThrow(\n        NotFoundException,\n      );\n      expect(service.deleteFile).toHaveBeenCalledWith(id, language, mockRequest.user.id);\n    });\n  });\n\n  describe('remove', () => {\n    it('should remove a legal page', async () => {\n      const id = '507f1f77bcf86cd799439011';\n\n      mockLegalPagesService.remove.mockResolvedValue(undefined);\n\n      const result = await controller.remove(id);\n\n      expect(result).toEqual({ message: 'Legal page deleted successfully' });\n      expect(service.remove).toHaveBeenCalledWith(id);\n      expect(service.remove).toHaveBeenCalledTimes(1);\n    });\n\n    it('should handle removal errors', async () => {\n      const id = 'nonexistent';\n\n      mockLegalPagesService.remove.mockRejectedValue(\n        new NotFoundException(`Legal page with ID ${id} not found`),\n      );\n\n      await expect(controller.remove(id)).rejects.toThrow(NotFoundException);\n      expect(service.remove).toHaveBeenCalledWith(id);\n    });\n  });\n\n  describe('getPublicPages', () => {\n    it('should return public legal pages', async () => {\n      const publicPages = [\n        {\n          slug: 'terms-of-use',\n          type: LegalPageType.TERMS,\n          title: mockLegalPage.title,\n          availableLanguages: ['pt'],\n        },\n      ];\n\n      mockLegalPagesService.getPublicPages.mockResolvedValue(publicPages);\n\n      const result = await controller.getPublicPages();\n\n      expect(result).toEqual(publicPages);\n      expect(service.getPublicPages).toHaveBeenCalledWith();\n      expect(service.getPublicPages).toHaveBeenCalledTimes(1);\n    });\n  });\n\n  describe('downloadFile', () => {\n    it('should stream a file for download', async () => {\n      const slug = 'terms-of-use';\n      const language = SupportedLanguage.PT;\n      const mockStream = new Readable();\n      const mockMetadata = {\n        filename: 'test.pdf',\n        originalName: 'terms.pdf',\n        size: 1024000,\n        uploadedAt: new Date(),\n        uploadedBy: 'admin-user-id',\n      };\n\n      mockLegalPagesService.getFileStream.mockResolvedValue({\n        stream: mockStream,\n        metadata: mockMetadata,\n      });\n\n      const mockResponse = {\n        set: jest.fn(),\n        status: jest.fn().mockReturnThis(),\n        json: jest.fn(),\n      } as unknown as Response;\n\n      mockStream.pipe = jest.fn();\n\n      await controller.downloadFile(slug, language, mockResponse);\n\n      expect(service.getFileStream).toHaveBeenCalledWith(slug, language);\n      expect(mockResponse.set).toHaveBeenCalledWith({\n        'Content-Type': 'application/pdf',\n        'Content-Disposition': `attachment; filename=\"${mockMetadata.originalName}\"`,\n        'Content-Length': mockMetadata.size.toString(),\n      });\n      expect(mockStream.pipe).toHaveBeenCalledWith(mockResponse);\n    });\n\n    it('should handle download errors', async () => {\n      const slug = 'nonexistent';\n      const language = SupportedLanguage.EN;\n\n      mockLegalPagesService.getFileStream.mockRejectedValue(\n        new NotFoundException(`Legal page with slug ${slug} not found`),\n      );\n\n      const mockResponse = {\n        set: jest.fn(),\n        status: jest.fn().mockReturnThis(),\n        json: jest.fn(),\n      } as unknown as Response;\n\n      await controller.downloadFile(slug, language, mockResponse);\n\n      expect(service.getFileStream).toHaveBeenCalledWith(slug, language);\n      expect(mockResponse.status).toHaveBeenCalledWith(404);\n      expect(mockResponse.json).toHaveBeenCalledWith({\n        message: `Legal page with slug ${slug} not found`,\n      });\n    });\n  });\n\n  describe('getDownloadUrl', () => {\n    it('should return a signed download URL', async () => {\n      const slug = 'privacy-policy';\n      const language = SupportedLanguage.EN;\n      const mockResult = {\n        url: 'https://s3.amazonaws.com/signed-url',\n        metadata: {\n          filename: 'privacy.pdf',\n          originalName: 'privacy-policy.pdf',\n          size: 512000,\n          uploadedAt: new Date(),\n          uploadedBy: 'admin-user-id',\n        },\n      };\n\n      mockLegalPagesService.getSignedDownloadUrl.mockResolvedValue(mockResult);\n\n      const result = await controller.getDownloadUrl(slug, language);\n\n      expect(result).toEqual(mockResult);\n      expect(service.getSignedDownloadUrl).toHaveBeenCalledWith(slug, language);\n      expect(service.getSignedDownloadUrl).toHaveBeenCalledTimes(1);\n    });\n\n    it('should handle signed URL generation errors', async () => {\n      const slug = 'nonexistent';\n      const language = SupportedLanguage.ES;\n\n      mockLegalPagesService.getSignedDownloadUrl.mockRejectedValue(\n        new NotFoundException('This legal page is not available'),\n      );\n\n      await expect(controller.getDownloadUrl(slug, language)).rejects.toThrow(NotFoundException);\n      expect(service.getSignedDownloadUrl).toHaveBeenCalledWith(slug, language);\n    });\n  });\n});\n"],"version":3}