35b1a78d0d1e3d5dbe1ee63cd92b95fd
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PublicNewsController = exports.NewsReleasesController = void 0;
const common_1 = require("@nestjs/common");
const platform_express_1 = require("@nestjs/platform-express");
const swagger_1 = require("@nestjs/swagger");
const news_releases_service_1 = require("./news-releases.service");
const create_news_release_dto_1 = require("./dto/create-news-release.dto");
const update_news_release_dto_1 = require("./dto/update-news-release.dto");
const query_news_release_dto_1 = require("./dto/query-news-release.dto");
const image_upload_dto_1 = require("./dto/image-upload.dto");
const jwt_auth_guard_1 = require("../auth/guards/jwt-auth.guard");
const roles_guard_1 = require("../auth/guards/roles.guard");
const roles_decorator_1 = require("../auth/decorators/roles.decorator");
const public_decorator_1 = require("../auth/decorators/public.decorator");
const current_user_decorator_1 = require("../auth/decorators/current-user.decorator");
const shared_1 = require("@vtexday26/shared");
const throttler_1 = require("@nestjs/throttler");
let NewsReleasesController = class NewsReleasesController {
    newsReleasesService;
    constructor(newsReleasesService) {
        this.newsReleasesService = newsReleasesService;
    }
    async create(createNewsReleaseDto, user) {
        return this.newsReleasesService.create(createNewsReleaseDto, user);
    }
    async findAll(query) {
        return this.newsReleasesService.findAll(query);
    }
    async findOne(id) {
        return this.newsReleasesService.findOne(id);
    }
    async update(id, updateNewsReleaseDto, user) {
        return this.newsReleasesService.update(id, updateNewsReleaseDto, user);
    }
    async remove(id, user) {
        return this.newsReleasesService.remove(id, user);
    }
    async restore(id, user) {
        return this.newsReleasesService.restore(id, user);
    }
    async publish(id, user) {
        return this.newsReleasesService.publish(id, user);
    }
    async archive(id, user) {
        return this.newsReleasesService.archive(id, user);
    }
    async uploadImage(id, file, imageUploadDto) {
        return this.newsReleasesService.uploadImage(id, file, imageUploadDto);
    }
    async removeImage(id, imageId) {
        return this.newsReleasesService.removeImage(id, imageId);
    }
    async reorderImages(id, reorderImagesDto) {
        return this.newsReleasesService.reorderImages(id, reorderImagesDto.imageIds);
    }
};
exports.NewsReleasesController = NewsReleasesController;
__decorate([
    (0, common_1.Post)(),
    (0, roles_decorator_1.Roles)(shared_1.UserRole.SUPER_ADMIN),
    (0, swagger_1.ApiBearerAuth)(),
    (0, swagger_1.ApiOperation)({ summary: 'Create a new news release' }),
    (0, swagger_1.ApiResponse)({ status: 201, description: 'News release created successfully' }),
    (0, swagger_1.ApiResponse)({ status: 400, description: 'Bad request' }),
    (0, swagger_1.ApiResponse)({ status: 401, description: 'Unauthorized' }),
    (0, throttler_1.Throttle)({ default: { limit: 20, ttl: 60000 } }),
    __param(0, (0, common_1.Body)()),
    __param(1, (0, current_user_decorator_1.CurrentUser)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [create_news_release_dto_1.CreateNewsReleaseDto, Object]),
    __metadata("design:returntype", Promise)
], NewsReleasesController.prototype, "create", null);
__decorate([
    (0, common_1.Get)(),
    (0, roles_decorator_1.Roles)(shared_1.UserRole.SUPER_ADMIN),
    (0, swagger_1.ApiBearerAuth)(),
    (0, swagger_1.ApiOperation)({ summary: 'Get all news releases (admin)' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'List of news releases' }),
    __param(0, (0, common_1.Query)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [query_news_release_dto_1.QueryNewsReleaseDto]),
    __metadata("design:returntype", Promise)
], NewsReleasesController.prototype, "findAll", null);
__decorate([
    (0, common_1.Get)(':id'),
    (0, roles_decorator_1.Roles)(shared_1.UserRole.SUPER_ADMIN),
    (0, swagger_1.ApiBearerAuth)(),
    (0, swagger_1.ApiOperation)({ summary: 'Get a news release by ID' }),
    (0, swagger_1.ApiParam)({ name: 'id', description: 'News release ID' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'News release found' }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'News release not found' }),
    __param(0, (0, common_1.Param)('id')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], NewsReleasesController.prototype, "findOne", null);
__decorate([
    (0, common_1.Patch)(':id'),
    (0, roles_decorator_1.Roles)(shared_1.UserRole.SUPER_ADMIN),
    (0, swagger_1.ApiBearerAuth)(),
    (0, swagger_1.ApiOperation)({ summary: 'Update a news release' }),
    (0, swagger_1.ApiParam)({ name: 'id', description: 'News release ID' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'News release updated' }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'News release not found' }),
    (0, throttler_1.Throttle)({ default: { limit: 20, ttl: 60000 } }),
    __param(0, (0, common_1.Param)('id')),
    __param(1, (0, common_1.Body)()),
    __param(2, (0, current_user_decorator_1.CurrentUser)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, update_news_release_dto_1.UpdateNewsReleaseDto, Object]),
    __metadata("design:returntype", Promise)
], NewsReleasesController.prototype, "update", null);
__decorate([
    (0, common_1.Delete)(':id'),
    (0, roles_decorator_1.Roles)(shared_1.UserRole.SUPER_ADMIN),
    (0, swagger_1.ApiBearerAuth)(),
    (0, swagger_1.ApiOperation)({ summary: 'Delete a news release (soft delete)' }),
    (0, swagger_1.ApiParam)({ name: 'id', description: 'News release ID' }),
    (0, swagger_1.ApiResponse)({ status: 204, description: 'News release deleted' }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'News release not found' }),
    (0, common_1.HttpCode)(common_1.HttpStatus.NO_CONTENT),
    __param(0, (0, common_1.Param)('id')),
    __param(1, (0, current_user_decorator_1.CurrentUser)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object]),
    __metadata("design:returntype", Promise)
], NewsReleasesController.prototype, "remove", null);
__decorate([
    (0, common_1.Post)(':id/restore'),
    (0, roles_decorator_1.Roles)(shared_1.UserRole.SUPER_ADMIN),
    (0, swagger_1.ApiBearerAuth)(),
    (0, swagger_1.ApiOperation)({ summary: 'Restore a deleted news release' }),
    (0, swagger_1.ApiParam)({ name: 'id', description: 'News release ID' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'News release restored' }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'News release not found' }),
    __param(0, (0, common_1.Param)('id')),
    __param(1, (0, current_user_decorator_1.CurrentUser)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object]),
    __metadata("design:returntype", Promise)
], NewsReleasesController.prototype, "restore", null);
__decorate([
    (0, common_1.Post)(':id/publish'),
    (0, roles_decorator_1.Roles)(shared_1.UserRole.SUPER_ADMIN),
    (0, swagger_1.ApiBearerAuth)(),
    (0, swagger_1.ApiOperation)({ summary: 'Publish a news release' }),
    (0, swagger_1.ApiParam)({ name: 'id', description: 'News release ID' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'News release published' }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'News release not found' }),
    (0, swagger_1.ApiResponse)({ status: 409, description: 'News release already published' }),
    __param(0, (0, common_1.Param)('id')),
    __param(1, (0, current_user_decorator_1.CurrentUser)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object]),
    __metadata("design:returntype", Promise)
], NewsReleasesController.prototype, "publish", null);
__decorate([
    (0, common_1.Post)(':id/archive'),
    (0, roles_decorator_1.Roles)(shared_1.UserRole.SUPER_ADMIN),
    (0, swagger_1.ApiBearerAuth)(),
    (0, swagger_1.ApiOperation)({ summary: 'Archive a news release' }),
    (0, swagger_1.ApiParam)({ name: 'id', description: 'News release ID' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'News release archived' }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'News release not found' }),
    __param(0, (0, common_1.Param)('id')),
    __param(1, (0, current_user_decorator_1.CurrentUser)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object]),
    __metadata("design:returntype", Promise)
], NewsReleasesController.prototype, "archive", null);
__decorate([
    (0, common_1.Post)(':id/images'),
    (0, roles_decorator_1.Roles)(shared_1.UserRole.SUPER_ADMIN),
    (0, swagger_1.ApiBearerAuth)(),
    (0, swagger_1.ApiOperation)({ summary: 'Upload image to news release' }),
    (0, swagger_1.ApiParam)({ name: 'id', description: 'News release ID' }),
    (0, swagger_1.ApiConsumes)('multipart/form-data'),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Image uploaded successfully' }),
    (0, swagger_1.ApiResponse)({ status: 400, description: 'Bad request' }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'News release not found' }),
    (0, common_1.UseInterceptors)((0, platform_express_1.FileInterceptor)('image')),
    (0, throttler_1.Throttle)({ default: { limit: 10, ttl: 60000 } }),
    __param(0, (0, common_1.Param)('id')),
    __param(1, (0, common_1.UploadedFile)()),
    __param(2, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object, image_upload_dto_1.ImageUploadDto]),
    __metadata("design:returntype", Promise)
], NewsReleasesController.prototype, "uploadImage", null);
__decorate([
    (0, common_1.Delete)(':id/images/:imageId'),
    (0, roles_decorator_1.Roles)(shared_1.UserRole.SUPER_ADMIN),
    (0, swagger_1.ApiBearerAuth)(),
    (0, swagger_1.ApiOperation)({ summary: 'Remove image from news release' }),
    (0, swagger_1.ApiParam)({ name: 'id', description: 'News release ID' }),
    (0, swagger_1.ApiParam)({ name: 'imageId', description: 'Image ID' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Image removed successfully' }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'News release or image not found' }),
    __param(0, (0, common_1.Param)('id')),
    __param(1, (0, common_1.Param)('imageId')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, String]),
    __metadata("design:returntype", Promise)
], NewsReleasesController.prototype, "removeImage", null);
__decorate([
    (0, common_1.Patch)(':id/images/reorder'),
    (0, roles_decorator_1.Roles)(shared_1.UserRole.SUPER_ADMIN),
    (0, swagger_1.ApiBearerAuth)(),
    (0, swagger_1.ApiOperation)({ summary: 'Reorder images in news release' }),
    (0, swagger_1.ApiParam)({ name: 'id', description: 'News release ID' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Images reordered successfully' }),
    (0, swagger_1.ApiResponse)({ status: 400, description: 'Bad request' }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'News release not found' }),
    __param(0, (0, common_1.Param)('id')),
    __param(1, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, image_upload_dto_1.ReorderImagesDto]),
    __metadata("design:returntype", Promise)
], NewsReleasesController.prototype, "reorderImages", null);
exports.NewsReleasesController = NewsReleasesController = __decorate([
    (0, swagger_1.ApiTags)('news-releases'),
    (0, common_1.Controller)('news-releases'),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, roles_guard_1.RolesGuard),
    __metadata("design:paramtypes", [news_releases_service_1.NewsReleasesService])
], NewsReleasesController);
let PublicNewsController = class PublicNewsController {
    newsReleasesService;
    constructor(newsReleasesService) {
        this.newsReleasesService = newsReleasesService;
    }
    async getPublicNews(page, limit, language, category, tag) {
        return this.newsReleasesService.getPublicNews({
            page,
            limit,
            language,
            category,
            tag,
        });
    }
    async getFeaturedNews(limit) {
        return this.newsReleasesService.getFeaturedNews(limit || 5);
    }
    async getRssFeed(lang = 'en', res) {
        const feed = await this.newsReleasesService.generateRssFeed(lang);
        res.header('Content-Type', 'application/rss+xml; charset=utf-8');
        res.send(feed);
    }
    async getAtomFeed(lang = 'en', res) {
        const feed = await this.newsReleasesService.generateAtomFeed(lang);
        res.header('Content-Type', 'application/atom+xml; charset=utf-8');
        res.send(feed);
    }
    async getBySlug(slug) {
        const newsRelease = await this.newsReleasesService.findBySlug(slug);
        await this.newsReleasesService.incrementViewCount(newsRelease._id.toString());
        return newsRelease;
    }
};
exports.PublicNewsController = PublicNewsController;
__decorate([
    (0, common_1.Get)(),
    (0, public_decorator_1.Public)(),
    (0, swagger_1.ApiOperation)({ summary: 'Get published news releases' }),
    (0, swagger_1.ApiQuery)({ name: 'page', required: false, type: Number }),
    (0, swagger_1.ApiQuery)({ name: 'limit', required: false, type: Number }),
    (0, swagger_1.ApiQuery)({ name: 'language', required: false, enum: ['pt-BR', 'en', 'es'] }),
    (0, swagger_1.ApiQuery)({ name: 'category', required: false, type: String }),
    (0, swagger_1.ApiQuery)({ name: 'tag', required: false, type: String }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'List of published news releases' }),
    (0, throttler_1.Throttle)({ default: { limit: 100, ttl: 60000 } }),
    __param(0, (0, common_1.Query)('page')),
    __param(1, (0, common_1.Query)('limit')),
    __param(2, (0, common_1.Query)('language')),
    __param(3, (0, common_1.Query)('category')),
    __param(4, (0, common_1.Query)('tag')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Number, Number, String, String, String]),
    __metadata("design:returntype", Promise)
], PublicNewsController.prototype, "getPublicNews", null);
__decorate([
    (0, common_1.Get)('featured'),
    (0, public_decorator_1.Public)(),
    (0, swagger_1.ApiOperation)({ summary: 'Get featured news releases' }),
    (0, swagger_1.ApiQuery)({ name: 'limit', required: false, type: Number, default: 5 }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'List of featured news releases' }),
    (0, throttler_1.Throttle)({ default: { limit: 100, ttl: 60000 } }),
    __param(0, (0, common_1.Query)('limit')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Number]),
    __metadata("design:returntype", Promise)
], PublicNewsController.prototype, "getFeaturedNews", null);
__decorate([
    (0, common_1.Get)('feed.rss'),
    (0, public_decorator_1.Public)(),
    (0, swagger_1.ApiOperation)({ summary: 'Get RSS feed of news releases' }),
    (0, swagger_1.ApiQuery)({ name: 'lang', required: false, enum: ['pt-BR', 'en', 'es'], default: 'en' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'RSS feed', content: { 'application/rss+xml': {} } }),
    (0, throttler_1.Throttle)({ default: { limit: 100, ttl: 60000 } }),
    __param(0, (0, common_1.Query)('lang')),
    __param(1, (0, common_1.Res)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object]),
    __metadata("design:returntype", Promise)
], PublicNewsController.prototype, "getRssFeed", null);
__decorate([
    (0, common_1.Get)('feed.atom'),
    (0, public_decorator_1.Public)(),
    (0, swagger_1.ApiOperation)({ summary: 'Get Atom feed of news releases' }),
    (0, swagger_1.ApiQuery)({ name: 'lang', required: false, enum: ['pt-BR', 'en', 'es'], default: 'en' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Atom feed', content: { 'application/atom+xml': {} } }),
    (0, throttler_1.Throttle)({ default: { limit: 100, ttl: 60000 } }),
    __param(0, (0, common_1.Query)('lang')),
    __param(1, (0, common_1.Res)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object]),
    __metadata("design:returntype", Promise)
], PublicNewsController.prototype, "getAtomFeed", null);
__decorate([
    (0, common_1.Get)(':slug'),
    (0, public_decorator_1.Public)(),
    (0, swagger_1.ApiOperation)({ summary: 'Get a news release by slug' }),
    (0, swagger_1.ApiParam)({ name: 'slug', description: 'News release slug' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'News release found' }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'News release not found' }),
    (0, throttler_1.Throttle)({ default: { limit: 100, ttl: 60000 } }),
    __param(0, (0, common_1.Param)('slug')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], PublicNewsController.prototype, "getBySlug", null);
exports.PublicNewsController = PublicNewsController = __decorate([
    (0, swagger_1.ApiTags)('public-news'),
    (0, common_1.Controller)('public/news'),
    __metadata("design:paramtypes", [news_releases_service_1.NewsReleasesService])
], PublicNewsController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,