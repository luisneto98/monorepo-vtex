45aed35e30a01c9febdb82439c08b649
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PressMaterialsController = void 0;
const common_1 = require("@nestjs/common");
const platform_express_1 = require("@nestjs/platform-express");
const swagger_1 = require("@nestjs/swagger");
const throttler_1 = require("@nestjs/throttler");
const press_materials_service_1 = require("./press-materials.service");
const update_press_material_dto_1 = require("./dto/update-press-material.dto");
const query_press_material_dto_1 = require("./dto/query-press-material.dto");
const jwt_auth_guard_1 = require("../auth/guards/jwt-auth.guard");
const roles_guard_1 = require("../auth/guards/roles.guard");
const roles_decorator_1 = require("../auth/decorators/roles.decorator");
const current_user_decorator_1 = require("../auth/decorators/current-user.decorator");
const public_decorator_1 = require("../auth/decorators/public.decorator");
const multer_config_1 = require("../../config/multer.config");
const shared_1 = require("@vtexday26/shared");
let PressMaterialsController = class PressMaterialsController {
    pressMaterialsService;
    constructor(pressMaterialsService) {
        this.pressMaterialsService = pressMaterialsService;
    }
    async create(file, body, user) {
        if (!file) {
            throw new common_1.BadRequestException('File is required');
        }
        // Parse multipart form data
        const dto = {
            type: body.type,
            title: {
                pt: body['title[pt]'] || body.title?.pt,
                en: body['title[en]'] || body.title?.en,
                es: body['title[es]'] || body.title?.es,
            },
            description: body.description
                ? {
                    pt: body['description[pt]'] || body.description?.pt,
                    en: body['description[en]'] || body.description?.en,
                    es: body['description[es]'] || body.description?.es,
                }
                : undefined,
            tags: Array.isArray(body.tags) ? body.tags : body.tags?.split(','),
            status: body.status,
            accessLevel: body.accessLevel,
        };
        return this.pressMaterialsService.create(dto, file, user.id);
    }
    async findAll(query) {
        return this.pressMaterialsService.findAll(query);
    }
    async findPublic() {
        return this.pressMaterialsService.findPublic();
    }
    async getTopDownloaded(limit) {
        return this.pressMaterialsService.getTopDownloaded(limit);
    }
    async findOne(id) {
        return this.pressMaterialsService.findOne(id);
    }
    async download(id, req, res, user) {
        const ipAddress = req.ip || req.socket.remoteAddress || '';
        const userAgent = req.get('user-agent') || '';
        const url = await this.pressMaterialsService.getDownloadUrl(id, ipAddress, userAgent, user?.id);
        res.json({ url });
    }
    async getStatistics(id) {
        return this.pressMaterialsService.getStatistics(id);
    }
    async update(id, dto, user) {
        return this.pressMaterialsService.update(id, dto, user.id);
    }
    async remove(id) {
        await this.pressMaterialsService.remove(id);
        return { message: 'Press material deleted successfully' };
    }
    async uploadFile(file, materialType, user) {
        if (!file) {
            throw new common_1.BadRequestException('File is required');
        }
        return this.pressMaterialsService.uploadFile(file, materialType, user.id);
    }
};
exports.PressMaterialsController = PressMaterialsController;
__decorate([
    (0, common_1.Post)(),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, roles_guard_1.RolesGuard),
    (0, roles_decorator_1.Roles)(shared_1.UserRole.SUPER_ADMIN, shared_1.UserRole.PRODUCER),
    (0, common_1.UseInterceptors)((0, platform_express_1.FileInterceptor)('file', multer_config_1.multerConfig)),
    (0, throttler_1.Throttle)({ default: { limit: 5, ttl: 60000 } }) // 5 uploads per minute
    ,
    (0, swagger_1.ApiOperation)({ summary: 'Create new press material' }),
    (0, swagger_1.ApiBearerAuth)(),
    (0, swagger_1.ApiConsumes)('multipart/form-data'),
    (0, swagger_1.ApiBody)({
        schema: {
            type: 'object',
            required: ['file', 'type', 'title'],
            properties: {
                file: {
                    type: 'string',
                    format: 'binary',
                },
                type: {
                    type: 'string',
                    enum: ['press_kit', 'logo_package', 'photo', 'video', 'presentation'],
                },
                'title[pt]': { type: 'string' },
                'title[en]': { type: 'string' },
                'title[es]': { type: 'string' },
                'description[pt]': { type: 'string' },
                'description[en]': { type: 'string' },
                'description[es]': { type: 'string' },
                tags: {
                    type: 'array',
                    items: { type: 'string' },
                },
                status: {
                    type: 'string',
                    enum: ['draft', 'published', 'archived'],
                },
                accessLevel: {
                    type: 'string',
                    enum: ['public', 'restricted'],
                },
            },
        },
    }),
    (0, swagger_1.ApiResponse)({ status: common_1.HttpStatus.CREATED, description: 'Press material created' }),
    __param(0, (0, common_1.UploadedFile)()),
    __param(1, (0, common_1.Body)()),
    __param(2, (0, current_user_decorator_1.CurrentUser)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object, Object]),
    __metadata("design:returntype", Promise)
], PressMaterialsController.prototype, "create", null);
__decorate([
    (0, common_1.Get)(),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, roles_guard_1.RolesGuard),
    (0, roles_decorator_1.Roles)(shared_1.UserRole.SUPER_ADMIN, shared_1.UserRole.PRODUCER),
    (0, swagger_1.ApiOperation)({ summary: 'Get all press materials with pagination' }),
    (0, swagger_1.ApiBearerAuth)(),
    (0, swagger_1.ApiResponse)({ status: common_1.HttpStatus.OK, description: 'List of press materials' }),
    __param(0, (0, common_1.Query)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [query_press_material_dto_1.QueryPressMaterialDto]),
    __metadata("design:returntype", Promise)
], PressMaterialsController.prototype, "findAll", null);
__decorate([
    (0, common_1.Get)('public'),
    (0, public_decorator_1.Public)(),
    (0, swagger_1.ApiOperation)({ summary: 'Get public press materials' }),
    (0, swagger_1.ApiResponse)({ status: common_1.HttpStatus.OK, description: 'List of public press materials' }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], PressMaterialsController.prototype, "findPublic", null);
__decorate([
    (0, common_1.Get)('top-downloaded'),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, roles_guard_1.RolesGuard),
    (0, roles_decorator_1.Roles)(shared_1.UserRole.SUPER_ADMIN, shared_1.UserRole.PRODUCER),
    (0, swagger_1.ApiOperation)({ summary: 'Get top downloaded materials' }),
    (0, swagger_1.ApiBearerAuth)(),
    (0, swagger_1.ApiResponse)({ status: common_1.HttpStatus.OK, description: 'Top downloaded materials' }),
    __param(0, (0, common_1.Query)('limit')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Number]),
    __metadata("design:returntype", Promise)
], PressMaterialsController.prototype, "getTopDownloaded", null);
__decorate([
    (0, common_1.Get)(':id'),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, roles_guard_1.RolesGuard),
    (0, roles_decorator_1.Roles)(shared_1.UserRole.SUPER_ADMIN, shared_1.UserRole.PRODUCER),
    (0, swagger_1.ApiOperation)({ summary: 'Get specific press material' }),
    (0, swagger_1.ApiBearerAuth)(),
    (0, swagger_1.ApiResponse)({ status: common_1.HttpStatus.OK, description: 'Press material details' }),
    __param(0, (0, common_1.Param)('id')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], PressMaterialsController.prototype, "findOne", null);
__decorate([
    (0, common_1.Get)(':id/download'),
    (0, public_decorator_1.Public)(),
    (0, throttler_1.Throttle)({ default: { limit: 10, ttl: 60000 } }) // 10 downloads per minute per IP
    ,
    (0, swagger_1.ApiOperation)({ summary: 'Get download URL for press material' }),
    (0, swagger_1.ApiResponse)({ status: common_1.HttpStatus.OK, description: 'Download URL' }),
    __param(0, (0, common_1.Param)('id')),
    __param(1, (0, common_1.Req)()),
    __param(2, (0, common_1.Res)()),
    __param(3, (0, current_user_decorator_1.CurrentUser)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object, Object, Object]),
    __metadata("design:returntype", Promise)
], PressMaterialsController.prototype, "download", null);
__decorate([
    (0, common_1.Get)(':id/statistics'),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, roles_guard_1.RolesGuard),
    (0, roles_decorator_1.Roles)(shared_1.UserRole.SUPER_ADMIN, shared_1.UserRole.PRODUCER),
    (0, swagger_1.ApiOperation)({ summary: 'Get download statistics for material' }),
    (0, swagger_1.ApiBearerAuth)(),
    (0, swagger_1.ApiResponse)({ status: common_1.HttpStatus.OK, description: 'Download statistics' }),
    __param(0, (0, common_1.Param)('id')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], PressMaterialsController.prototype, "getStatistics", null);
__decorate([
    (0, common_1.Put)(':id'),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, roles_guard_1.RolesGuard),
    (0, roles_decorator_1.Roles)(shared_1.UserRole.SUPER_ADMIN, shared_1.UserRole.PRODUCER),
    (0, swagger_1.ApiOperation)({ summary: 'Update press material' }),
    (0, swagger_1.ApiBearerAuth)(),
    (0, swagger_1.ApiResponse)({ status: common_1.HttpStatus.OK, description: 'Press material updated' }),
    __param(0, (0, common_1.Param)('id')),
    __param(1, (0, common_1.Body)()),
    __param(2, (0, current_user_decorator_1.CurrentUser)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, update_press_material_dto_1.UpdatePressMaterialDto, Object]),
    __metadata("design:returntype", Promise)
], PressMaterialsController.prototype, "update", null);
__decorate([
    (0, common_1.Delete)(':id'),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, roles_guard_1.RolesGuard),
    (0, roles_decorator_1.Roles)(shared_1.UserRole.SUPER_ADMIN, shared_1.UserRole.PRODUCER),
    (0, swagger_1.ApiOperation)({ summary: 'Delete press material' }),
    (0, swagger_1.ApiBearerAuth)(),
    (0, swagger_1.ApiResponse)({ status: common_1.HttpStatus.NO_CONTENT, description: 'Press material deleted' }),
    __param(0, (0, common_1.Param)('id')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], PressMaterialsController.prototype, "remove", null);
__decorate([
    (0, common_1.Post)('upload'),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, roles_guard_1.RolesGuard),
    (0, roles_decorator_1.Roles)(shared_1.UserRole.SUPER_ADMIN, shared_1.UserRole.PRODUCER),
    (0, common_1.UseInterceptors)((0, platform_express_1.FileInterceptor)('file', multer_config_1.multerConfig)),
    (0, throttler_1.Throttle)({ default: { limit: 5, ttl: 60000 } }) // 5 uploads per minute
    ,
    (0, swagger_1.ApiOperation)({ summary: 'Upload file to S3' }),
    (0, swagger_1.ApiBearerAuth)(),
    (0, swagger_1.ApiConsumes)('multipart/form-data'),
    (0, swagger_1.ApiBody)({
        schema: {
            type: 'object',
            required: ['file', 'materialType'],
            properties: {
                file: {
                    type: 'string',
                    format: 'binary',
                },
                materialType: {
                    type: 'string',
                    enum: ['press_kit', 'logo_package', 'photo', 'video', 'presentation'],
                },
            },
        },
    }),
    (0, swagger_1.ApiResponse)({ status: common_1.HttpStatus.OK, description: 'File uploaded successfully' }),
    __param(0, (0, common_1.UploadedFile)()),
    __param(1, (0, common_1.Body)('materialType')),
    __param(2, (0, current_user_decorator_1.CurrentUser)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, String, Object]),
    __metadata("design:returntype", Promise)
], PressMaterialsController.prototype, "uploadFile", null);
exports.PressMaterialsController = PressMaterialsController = __decorate([
    (0, swagger_1.ApiTags)('press-materials'),
    (0, common_1.Controller)('press-materials'),
    __metadata("design:paramtypes", [press_materials_service_1.PressMaterialsService])
], PressMaterialsController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,