{"file":"/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/users/users.controller.ts","mappings":"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","names":[],"sources":["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/users/users.controller.ts"],"sourcesContent":["import { Controller, Get, Post, Body, Patch, Param, Delete, UseGuards } from '@nestjs/common';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiBearerAuth,\n  ApiResponse as SwaggerApiResponse,\n  ApiParam,\n  ApiForbiddenResponse,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { UsersService } from './users.service';\nimport { JwtAuthGuard } from '@common/guards/jwt-auth.guard';\nimport { RolesGuard } from '@common/guards/roles.guard';\nimport { Roles } from '@common/decorators/roles.decorator';\nimport { UserRole } from '@shared/types/user.types';\n\n@ApiTags('Users')\n@ApiBearerAuth('JWT-auth')\n@Controller('users')\n@UseGuards(JwtAuthGuard, RolesGuard)\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Post()\n  @Roles(UserRole.SUPER_ADMIN)\n  @ApiOperation({ summary: 'Create new user (Super Admin only)' })\n  @SwaggerApiResponse({ status: 201, description: 'User created successfully' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized - Missing or invalid JWT token' })\n  @ApiForbiddenResponse({ description: 'Forbidden - Requires SUPER_ADMIN role' })\n  create(@Body() createUserDto: any) {\n    return this.usersService.create(createUserDto);\n  }\n\n  @Get()\n  @Roles(UserRole.SUPER_ADMIN, UserRole.PRODUCER)\n  @ApiOperation({ summary: 'List all users (Admin/Producer only)' })\n  @SwaggerApiResponse({ status: 200, description: 'Returns list of users' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized - Missing or invalid JWT token' })\n  @ApiForbiddenResponse({ description: 'Forbidden - Requires SUPER_ADMIN or PRODUCER role' })\n  findAll() {\n    return this.usersService.findAll();\n  }\n\n  @Get(':id')\n  @ApiOperation({ summary: 'Get user by ID (Authenticated users only)' })\n  @ApiParam({ name: 'id', description: 'User MongoDB ID' })\n  @SwaggerApiResponse({ status: 200, description: 'Returns user details' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized - Missing or invalid JWT token' })\n  findOne(@Param('id') id: string) {\n    return this.usersService.findById(id);\n  }\n\n  @Patch(':id')\n  @ApiOperation({ summary: 'Update user (Authenticated users only)' })\n  @ApiParam({ name: 'id', description: 'User MongoDB ID' })\n  @SwaggerApiResponse({ status: 200, description: 'User updated successfully' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized - Missing or invalid JWT token' })\n  update(@Param('id') id: string, @Body() updateUserDto: any) {\n    return this.usersService.update(id, updateUserDto);\n  }\n\n  @Delete(':id')\n  @Roles(UserRole.SUPER_ADMIN)\n  @ApiOperation({ summary: 'Delete user (Super Admin only)' })\n  @ApiParam({ name: 'id', description: 'User MongoDB ID' })\n  @SwaggerApiResponse({ status: 200, description: 'User deleted successfully' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized - Missing or invalid JWT token' })\n  @ApiForbiddenResponse({ description: 'Forbidden - Requires SUPER_ADMIN role' })\n  remove(@Param('id') id: string) {\n    return this.usersService.remove(id);\n  }\n}\n"],"version":3}