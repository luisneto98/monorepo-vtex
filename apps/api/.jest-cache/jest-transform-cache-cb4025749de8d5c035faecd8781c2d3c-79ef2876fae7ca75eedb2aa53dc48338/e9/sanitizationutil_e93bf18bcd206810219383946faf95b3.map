{"file":"/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/common/utils/sanitization.util.ts","mappings":";;;;;;AAAA,0DAAkC;AAClC,iCAA8B;AAE9B,MAAM,MAAM,GAAG,IAAI,aAAK,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC;AACpC,MAAM,MAAM,GAAG,IAAA,mBAAS,EAAC,MAAa,CAAC,CAAC;AAExC,MAAa,gBAAgB;IAC3B,MAAM,CAAC,YAAY,CAAC,IAAY;QAC9B,IAAI,CAAC,IAAI;YAAE,OAAO,IAAI,CAAC;QAEvB,mCAAmC;QACnC,OAAO,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE;YAC3B,YAAY,EAAE,EAAE;YAChB,YAAY,EAAE,EAAE;YAChB,YAAY,EAAE,IAAI;SACnB,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,uBAAuB,CAAC,GAAQ;QACrC,IAAI,CAAC,GAAG;YAAE,OAAO,GAAG,CAAC;QAErB,MAAM,SAAS,GAAG,EAAE,GAAG,GAAG,EAAE,CAAC;QAC7B,IAAI,GAAG,CAAC,EAAE;YAAE,SAAS,CAAC,EAAE,GAAG,gBAAgB,CAAC,YAAY,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;QACjE,IAAI,GAAG,CAAC,EAAE;YAAE,SAAS,CAAC,EAAE,GAAG,gBAAgB,CAAC,YAAY,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;QACjE,IAAI,GAAG,CAAC,EAAE;YAAE,SAAS,CAAC,EAAE,GAAG,gBAAgB,CAAC,YAAY,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;QAEjE,OAAO,SAAS,CAAC;IACnB,CAAC;IAED,MAAM,CAAC,YAAY,CAAC,IAAc;QAChC,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC;YAAE,OAAO,IAAI,CAAC;QAC/C,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,gBAAgB,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC;IAC/D,CAAC;IAED,MAAM,CAAC,gBAAgB,CAAC,IAAY;QAClC,IAAI,CAAC,IAAI;YAAE,OAAO,IAAI,CAAC;QAEvB,iCAAiC;QACjC,OAAO,IAAI;aACR,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC;aACpB,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;aACnB,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC;aACpB,OAAO,CAAC,mBAAmB,EAAE,EAAE,CAAC,CAAC;IACtC,CAAC;CACF;AAtCD,4CAsCC","names":[],"sources":["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/common/utils/sanitization.util.ts"],"sourcesContent":["import DOMPurify from 'dompurify';\nimport { JSDOM } from 'jsdom';\n\nconst window = new JSDOM('').window;\nconst purify = DOMPurify(window as any);\n\nexport class SanitizationUtil {\n  static sanitizeText(text: string): string {\n    if (!text) return text;\n\n    // Remove all HTML tags and scripts\n    return purify.sanitize(text, {\n      ALLOWED_TAGS: [],\n      ALLOWED_ATTR: [],\n      KEEP_CONTENT: true,\n    });\n  }\n\n  static sanitizeLocalizedString(obj: any): any {\n    if (!obj) return obj;\n\n    const sanitized = { ...obj };\n    if (obj.pt) sanitized.pt = SanitizationUtil.sanitizeText(obj.pt);\n    if (obj.en) sanitized.en = SanitizationUtil.sanitizeText(obj.en);\n    if (obj.es) sanitized.es = SanitizationUtil.sanitizeText(obj.es);\n\n    return sanitized;\n  }\n\n  static sanitizeTags(tags: string[]): string[] {\n    if (!tags || !Array.isArray(tags)) return tags;\n    return tags.map((tag) => SanitizationUtil.sanitizeText(tag));\n  }\n\n  static sanitizeFilePath(path: string): string {\n    if (!path) return path;\n\n    // Remove path traversal attempts\n    return path\n      .replace(/\\.\\./g, '')\n      .replace(/^\\/+/, '')\n      .replace(/\\/+/g, '/')\n      .replace(/[^a-zA-Z0-9-_./]/g, '');\n  }\n}\n"],"version":3}