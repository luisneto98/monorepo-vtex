d2228c333d1e94d6fea72ab96bdf2e0f
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SponsorSchema = exports.Sponsor = void 0;
const mongoose_1 = require("@nestjs/mongoose");
const mongoose_2 = require("mongoose");
let Description = class Description {
    'pt-BR';
    'en';
};
__decorate([
    (0, mongoose_1.Prop)({
        required: true,
        maxlength: 500,
        trim: true,
    }),
    __metadata("design:type", String)
], Description.prototype, "pt-BR", void 0);
__decorate([
    (0, mongoose_1.Prop)({
        required: true,
        maxlength: 500,
        trim: true,
    }),
    __metadata("design:type", String)
], Description.prototype, "en", void 0);
Description = __decorate([
    (0, mongoose_1.Schema)({ _id: false })
], Description);
let SocialLinks = class SocialLinks {
    linkedin;
    instagram;
    facebook;
};
__decorate([
    (0, mongoose_1.Prop)({
        match: /^https?:\/\/(www\.)?linkedin\.com\/.+/,
    }),
    __metadata("design:type", String)
], SocialLinks.prototype, "linkedin", void 0);
__decorate([
    (0, mongoose_1.Prop)({
        match: /^https?:\/\/(www\.)?instagram\.com\/.+/,
    }),
    __metadata("design:type", String)
], SocialLinks.prototype, "instagram", void 0);
__decorate([
    (0, mongoose_1.Prop)({
        match: /^https?:\/\/(www\.)?facebook\.com\/.+/,
    }),
    __metadata("design:type", String)
], SocialLinks.prototype, "facebook", void 0);
SocialLinks = __decorate([
    (0, mongoose_1.Schema)({ _id: false })
], SocialLinks);
let Sponsor = class Sponsor {
    name;
    slug;
    description;
    logoUrl;
    tier;
    orderInTier;
    websiteUrl;
    standLocation;
    adminEmail;
    contactEmail;
    socialLinks;
    maxPosts;
    postsUsed;
    tags;
    isVisible;
    deletedAt;
    deletedBy;
    deleteReason;
};
exports.Sponsor = Sponsor;
__decorate([
    (0, mongoose_1.Prop)({
        required: true,
        unique: true,
        maxlength: 100,
        trim: true,
    }),
    __metadata("design:type", String)
], Sponsor.prototype, "name", void 0);
__decorate([
    (0, mongoose_1.Prop)({
        required: true,
        unique: true,
        lowercase: true,
        trim: true,
        match: /^[a-z0-9-]+$/,
    }),
    __metadata("design:type", String)
], Sponsor.prototype, "slug", void 0);
__decorate([
    (0, mongoose_1.Prop)({
        type: Description,
        required: true,
    }),
    __metadata("design:type", Object)
], Sponsor.prototype, "description", void 0);
__decorate([
    (0, mongoose_1.Prop)({
        match: /^https?:\/\/.+/,
    }),
    __metadata("design:type", String)
], Sponsor.prototype, "logoUrl", void 0);
__decorate([
    (0, mongoose_1.Prop)({
        type: mongoose_2.Schema.Types.ObjectId,
        ref: 'SponsorTier',
        required: true,
        index: true,
    }),
    __metadata("design:type", String)
], Sponsor.prototype, "tier", void 0);
__decorate([
    (0, mongoose_1.Prop)({
        required: true,
        min: 1,
    }),
    __metadata("design:type", Number)
], Sponsor.prototype, "orderInTier", void 0);
__decorate([
    (0, mongoose_1.Prop)({
        match: /^https?:\/\/.+/,
    }),
    __metadata("design:type", String)
], Sponsor.prototype, "websiteUrl", void 0);
__decorate([
    (0, mongoose_1.Prop)({
        maxlength: 100,
        trim: true,
    }),
    __metadata("design:type", String)
], Sponsor.prototype, "standLocation", void 0);
__decorate([
    (0, mongoose_1.Prop)({
        required: true,
        lowercase: true,
        trim: true,
        match: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/,
    }),
    __metadata("design:type", String)
], Sponsor.prototype, "adminEmail", void 0);
__decorate([
    (0, mongoose_1.Prop)({
        lowercase: true,
        trim: true,
        match: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/,
    }),
    __metadata("design:type", String)
], Sponsor.prototype, "contactEmail", void 0);
__decorate([
    (0, mongoose_1.Prop)({
        type: SocialLinks,
        default: {},
    }),
    __metadata("design:type", Object)
], Sponsor.prototype, "socialLinks", void 0);
__decorate([
    (0, mongoose_1.Prop)({
        min: 0,
    }),
    __metadata("design:type", Number)
], Sponsor.prototype, "maxPosts", void 0);
__decorate([
    (0, mongoose_1.Prop)({
        default: 0,
        min: 0,
    }),
    __metadata("design:type", Number)
], Sponsor.prototype, "postsUsed", void 0);
__decorate([
    (0, mongoose_1.Prop)({
        type: [String],
        default: [],
    }),
    __metadata("design:type", Array)
], Sponsor.prototype, "tags", void 0);
__decorate([
    (0, mongoose_1.Prop)({
        default: true,
        index: true,
    }),
    __metadata("design:type", Boolean)
], Sponsor.prototype, "isVisible", void 0);
__decorate([
    (0, mongoose_1.Prop)({
        type: Date,
        default: null,
    }),
    __metadata("design:type", Date)
], Sponsor.prototype, "deletedAt", void 0);
__decorate([
    (0, mongoose_1.Prop)({
        type: mongoose_2.Schema.Types.ObjectId,
        ref: 'User',
    }),
    __metadata("design:type", mongoose_2.Schema.Types.ObjectId)
], Sponsor.prototype, "deletedBy", void 0);
__decorate([
    (0, mongoose_1.Prop)({
        type: String,
    }),
    __metadata("design:type", String)
], Sponsor.prototype, "deleteReason", void 0);
exports.Sponsor = Sponsor = __decorate([
    (0, mongoose_1.Schema)({ timestamps: true, collection: 'Sponsor' })
], Sponsor);
exports.SponsorSchema = mongoose_1.SchemaFactory.createForClass(Sponsor);
// Indexes
exports.SponsorSchema.index({ tier: 1, orderInTier: 1 });
exports.SponsorSchema.index({ slug: 1 });
exports.SponsorSchema.index({ isVisible: 1 });
exports.SponsorSchema.index({ deletedAt: 1 });
exports.SponsorSchema.index({ tags: 1 });
exports.SponsorSchema.index({ name: 'text', 'description.pt-BR': 'text', 'description.en': 'text' });
// Composite index for public API queries (optimizes {isVisible: true, deletedAt: null} pattern)
exports.SponsorSchema.index({ isVisible: 1, deletedAt: 1, tier: 1, orderInTier: 1 });
// Pre-save middleware for data normalization
exports.SponsorSchema.pre('save', function (next) {
    if (this.name) {
        this.name = this.name.trim();
    }
    if (this.slug) {
        this.slug = this.slug.toLowerCase().trim();
    }
    if (this.adminEmail) {
        this.adminEmail = this.adminEmail.toLowerCase().trim();
    }
    if (this.contactEmail) {
        this.contactEmail = this.contactEmail.toLowerCase().trim();
    }
    if (this.standLocation) {
        this.standLocation = this.standLocation.trim();
    }
    if (this.description) {
        if (this.description['pt-BR']) {
            this.description['pt-BR'] = this.description['pt-BR'].trim();
        }
        if (this.description['en']) {
            this.description['en'] = this.description['en'].trim();
        }
    }
    if (this.tags && Array.isArray(this.tags)) {
        this.tags = this.tags.map((tag) => tag.toLowerCase().trim());
    }
    next();
});
// Validation middleware
exports.SponsorSchema.pre('save', function (next) {
    if (this.maxPosts !== undefined && this.postsUsed > this.maxPosts) {
        next(new Error('Posts used cannot exceed max posts limit'));
        return;
    }
    next();
});
// Virtual fields
exports.SponsorSchema.virtual('postsRemaining').get(function () {
    if (this.maxPosts !== undefined) {
        return Math.max(0, this.maxPosts - this.postsUsed);
    }
    return null;
});
exports.SponsorSchema.virtual('hasReachedPostLimit').get(function () {
    if (this.maxPosts !== undefined) {
        return this.postsUsed >= this.maxPosts;
    }
    return false;
});
// Schema methods
exports.SponsorSchema.methods['getLocalizedDescription'] = function (language) {
    return this['description'][language] || this['description']['pt-BR'];
};
exports.SponsorSchema.methods['canCreatePost'] = function () {
    if (this['maxPosts'] === undefined) {
        return true;
    }
    return this['postsUsed'] < this['maxPosts'];
};
exports.SponsorSchema.methods['incrementPostCount'] = function () {
    this['postsUsed'] = (this['postsUsed'] || 0) + 1;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,