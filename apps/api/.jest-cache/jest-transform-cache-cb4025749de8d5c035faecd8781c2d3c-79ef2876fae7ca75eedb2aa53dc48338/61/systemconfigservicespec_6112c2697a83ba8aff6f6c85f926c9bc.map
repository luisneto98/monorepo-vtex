{"file":"/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/tests/unit/modules/system-config/system-config.service.spec.ts","mappings":"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","names":[],"sources":["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/tests/unit/modules/system-config/system-config.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { getModelToken } from '@nestjs/mongoose';\nimport { CACHE_MANAGER } from '@nestjs/cache-manager';\nimport { SystemConfigService } from '../../../../src/modules/system-config/system-config.service';\nimport { SystemConfig } from '../../../../src/modules/system-config/schemas/system-config.schema';\nimport { VisibilityAudit } from '../../../../src/modules/system-config/schemas/visibility-audit.schema';\n\ndescribe('SystemConfigService', () => {\n  let service: SystemConfigService;\n  let mockConfigModel: any;\n  let mockAuditModel: any;\n  let mockCacheManager: any;\n\n  beforeEach(async () => {\n    // Create mock models\n    mockConfigModel = {\n      findOne: jest.fn().mockReturnThis(),\n      exec: jest.fn(),\n      save: jest.fn(),\n      new: jest.fn(),\n    };\n\n    mockAuditModel = {\n      find: jest.fn().mockReturnThis(),\n      countDocuments: jest.fn().mockReturnThis(),\n      sort: jest.fn().mockReturnThis(),\n      skip: jest.fn().mockReturnThis(),\n      limit: jest.fn().mockReturnThis(),\n      exec: jest.fn(),\n      save: jest.fn(),\n      new: jest.fn(),\n    };\n\n    mockCacheManager = {\n      get: jest.fn(),\n      set: jest.fn(),\n      del: jest.fn(),\n    };\n\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        SystemConfigService,\n        {\n          provide: getModelToken(SystemConfig.name),\n          useValue: mockConfigModel,\n        },\n        {\n          provide: getModelToken(VisibilityAudit.name),\n          useValue: mockAuditModel,\n        },\n        {\n          provide: CACHE_MANAGER,\n          useValue: mockCacheManager,\n        },\n      ],\n    }).compile();\n\n    service = module.get<SystemConfigService>(SystemConfigService);\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n  });\n\n  describe('getConfig', () => {\n    it('should return cached config if available', async () => {\n      const cachedConfig = {\n        sections: {\n          speakers: { isVisible: true },\n          sponsors: { isVisible: false },\n        },\n      };\n      mockCacheManager.get.mockResolvedValue(cachedConfig);\n\n      const result = await service.getConfig();\n\n      expect(result).toEqual(cachedConfig);\n      expect(mockCacheManager.get).toHaveBeenCalledWith('system-config');\n      expect(mockConfigModel.findOne).not.toHaveBeenCalled();\n    });\n\n    it('should create default config if none exists', async () => {\n      mockCacheManager.get.mockResolvedValue(null);\n      mockConfigModel.exec.mockResolvedValue(null);\n\n      const defaultConfig = {\n        sections: {\n          speakers: { isVisible: true, lastChanged: new Date(), changedBy: 'system' },\n          sponsors: { isVisible: true, lastChanged: new Date(), changedBy: 'system' },\n          sessions: { isVisible: true, lastChanged: new Date(), changedBy: 'system' },\n          faq: { isVisible: true, lastChanged: new Date(), changedBy: 'system' },\n          registration: { isVisible: true, lastChanged: new Date(), changedBy: 'system' },\n          schedule: { isVisible: true, lastChanged: new Date(), changedBy: 'system' },\n        },\n        lastModifiedBy: 'system',\n        version: 1,\n        toObject: jest.fn().mockReturnThis(),\n      };\n\n      // Mock the constructor function\n      const MockConfigConstructor = jest.fn().mockImplementation(() => ({\n        ...defaultConfig,\n        save: jest.fn().mockResolvedValue(defaultConfig),\n      }));\n      mockConfigModel.constructor = MockConfigConstructor;\n      service['systemConfigModel'] = MockConfigConstructor as any;\n\n      await service.getConfig();\n\n      expect(mockCacheManager.get).toHaveBeenCalledWith('system-config');\n      expect(mockCacheManager.set).toHaveBeenCalled();\n    });\n  });\n\n  describe('getSectionVisibility', () => {\n    it('should return visibility for a specific section', async () => {\n      const mockConfig = {\n        sections: {\n          speakers: { isVisible: true, lastChanged: new Date(), changedBy: 'user1' },\n          sponsors: { isVisible: false, lastChanged: new Date(), changedBy: 'user2' },\n          sessions: { isVisible: true, lastChanged: new Date(), changedBy: 'user1' },\n          faq: { isVisible: true, lastChanged: new Date(), changedBy: 'user1' },\n          registration: { isVisible: true, lastChanged: new Date(), changedBy: 'user1' },\n          schedule: { isVisible: true, lastChanged: new Date(), changedBy: 'user1' },\n        },\n      };\n      mockCacheManager.get.mockResolvedValue(mockConfig);\n\n      const result = await service.getSectionVisibility('speakers');\n\n      expect(result).toEqual(mockConfig.sections.speakers);\n    });\n  });\n});\n"],"version":3}