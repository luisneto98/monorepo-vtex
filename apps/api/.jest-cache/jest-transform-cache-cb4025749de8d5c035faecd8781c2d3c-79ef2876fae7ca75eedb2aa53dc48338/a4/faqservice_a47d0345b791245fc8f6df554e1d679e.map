{"version":3,"names":["cov_261sd32qwf","actualCoverage","common_1","s","require","mongoose_1","mongoose_2","faq_schema_1","faq_category_schema_1","faq_constants_1","FaqService","faqModel","faqCategoryModel","constructor","f","createFaq","createFaqDto","category","findById","b","NotFoundException","order","undefined","maxOrderFaq","findOne","deletedAt","sort","exec","existingFaq","ConflictException","createdFaq","save","findAllFaqs","filterDto","page","limit","search","isVisible","lang","query","searchFields","langFields","$or","map","field","$regex","$options","skip","sortOptions","sortFields","split","startsWith","substring","data","total","Promise","all","find","populate","countDocuments","success","metadata","hasNext","length","hasPrev","findFaqById","id","faq","findOneAndUpdate","_id","$inc","viewCount","new","findPopularFaqs","FAQ_CONSTANTS","DEFAULT_POPULAR_LIMIT","updateFaq","updateFaqDto","categoryId","$ne","updatedFaq","findByIdAndUpdate","$set","runValidators","removeFaq","reason","userId","Date","deleteReason","deletedBy","Schema","Types","ObjectId","restoreFaq","createCategory","createCategoryDto","existingCategory","name","en","createdCategory","findAllCategories","findCategoryById","updateCategory","updateCategoryDto","nameConflict","oldOrder","newOrder","targetCategory","tempOrder","now","updatedCategory","removeCategory","faqsInCategory","result","deleteOne","deletedCount","exports","__decorate","Injectable","__param","InjectModel","Faq","FaqCategory","Model"],"sources":["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/faq/faq.service.ts"],"sourcesContent":["import { Injectable, NotFoundException, ConflictException } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, Schema as MongooseSchema } from 'mongoose';\nimport { Faq, FaqDocument } from './schemas/faq.schema';\nimport { FaqCategory, FaqCategoryDocument } from './schemas/faq-category.schema';\nimport { CreateFaqDto } from './dto/create-faq.dto';\nimport { UpdateFaqDto } from './dto/update-faq.dto';\nimport { FaqFilterDto } from './dto/faq-filter.dto';\nimport { CreateFaqCategoryDto } from './dto/create-faq-category.dto';\nimport { UpdateFaqCategoryDto } from './dto/update-faq-category.dto';\nimport { PaginatedResponse } from '@common/dto/pagination.dto';\nimport { FAQ_CONSTANTS } from './faq.constants';\n\n@Injectable()\nexport class FaqService {\n  constructor(\n    @InjectModel(Faq.name) private faqModel: Model<FaqDocument>,\n    @InjectModel(FaqCategory.name) private faqCategoryModel: Model<FaqCategoryDocument>,\n  ) {}\n\n  // FAQ CRUD\n  async createFaq(createFaqDto: CreateFaqDto): Promise<FaqDocument> {\n    // Verify category exists\n    const category = await this.faqCategoryModel.findById(createFaqDto.category);\n    if (!category) {\n      throw new NotFoundException(`FAQ category with ID ${createFaqDto.category} not found`);\n    }\n\n    // Auto-generate order if not provided\n    if (createFaqDto.order === undefined) {\n      const maxOrderFaq = await this.faqModel\n        .findOne({\n          category: createFaqDto.category,\n          deletedAt: null,\n        })\n        .sort({ order: -1 })\n        .exec();\n\n      createFaqDto.order = maxOrderFaq ? maxOrderFaq.order + 1 : 0;\n    } else {\n      // Check for order conflicts within the category if order is provided\n      const existingFaq = await this.faqModel.findOne({\n        category: createFaqDto.category,\n        order: createFaqDto.order,\n        deletedAt: null,\n      });\n\n      if (existingFaq) {\n        throw new ConflictException('Another FAQ with this order already exists in this category');\n      }\n    }\n\n    const createdFaq = new this.faqModel(createFaqDto);\n    return createdFaq.save();\n  }\n\n  async findAllFaqs(filterDto: FaqFilterDto): Promise<PaginatedResponse<FaqDocument>> {\n    const { page = 1, limit = 20, sort, search, category, isVisible, lang } = filterDto;\n\n    const query: any = { deletedAt: null };\n\n    if (search) {\n      const searchFields = ['question.pt-BR', 'question.en', 'answer.pt-BR', 'answer.en'];\n      if (lang) {\n        // If language specified, prioritize search in that language\n        const langFields = [`question.${lang}`, `answer.${lang}`];\n        query.$or = [\n          ...langFields.map((field) => ({ [field]: { $regex: search, $options: 'i' } })),\n          ...searchFields.map((field) => ({ [field]: { $regex: search, $options: 'i' } })),\n        ];\n      } else {\n        query.$or = searchFields.map((field) => ({ [field]: { $regex: search, $options: 'i' } }));\n      }\n    }\n\n    if (category) {\n      query.category = category;\n    }\n\n    if (typeof isVisible !== 'undefined') {\n      query.isVisible = isVisible;\n    }\n\n    const skip = (page - 1) * limit;\n\n    let sortOptions: any = { 'category.order': 1, order: 1 };\n    if (sort) {\n      sortOptions = {};\n      const sortFields = sort.split(',');\n      for (const field of sortFields) {\n        if (field.startsWith('-')) {\n          sortOptions[field.substring(1)] = -1;\n        } else {\n          sortOptions[field] = 1;\n        }\n      }\n    }\n\n    const [data, total] = await Promise.all([\n      this.faqModel\n        .find(query)\n        .populate('category')\n        .sort(sortOptions)\n        .skip(skip)\n        .limit(limit)\n        .exec(),\n      this.faqModel.countDocuments(query),\n    ]);\n\n    return {\n      success: true,\n      data,\n      metadata: {\n        total,\n        page,\n        limit,\n        hasNext: skip + data.length < total,\n        hasPrev: page > 1,\n      },\n    };\n  }\n\n  async findFaqById(id: string): Promise<FaqDocument> {\n    // Use atomic operation to increment view count and return updated document\n    const faq = await this.faqModel\n      .findOneAndUpdate(\n        {\n          _id: id,\n          deletedAt: null,\n        },\n        {\n          $inc: { viewCount: 1 },\n        },\n        {\n          new: true, // Return the updated document\n        },\n      )\n      .populate('category')\n      .exec();\n\n    if (!faq) {\n      throw new NotFoundException(`FAQ with ID ${id} not found`);\n    }\n\n    return faq;\n  }\n\n  async findPopularFaqs(\n    limit: number = FAQ_CONSTANTS.DEFAULT_POPULAR_LIMIT,\n  ): Promise<FaqDocument[]> {\n    return this.faqModel\n      .find({\n        isVisible: true,\n        deletedAt: null,\n      })\n      .populate('category')\n      .sort({ viewCount: -1 })\n      .limit(limit)\n      .exec();\n  }\n\n  async updateFaq(id: string, updateFaqDto: UpdateFaqDto): Promise<FaqDocument> {\n    const faq = await this.faqModel.findOne({\n      _id: id,\n      deletedAt: null,\n    });\n\n    if (!faq) {\n      throw new NotFoundException(`FAQ with ID ${id} not found`);\n    }\n\n    // Check category exists if being updated\n    if (updateFaqDto.category) {\n      const category = await this.faqCategoryModel.findById(updateFaqDto.category);\n      if (!category) {\n        throw new NotFoundException(`FAQ category with ID ${updateFaqDto.category} not found`);\n      }\n    }\n\n    // Check for order conflicts if category or order is being updated\n    if (updateFaqDto.category || updateFaqDto.order !== undefined) {\n      const categoryId = updateFaqDto.category || faq.category;\n      const order = updateFaqDto.order !== undefined ? updateFaqDto.order : faq.order;\n\n      const existingFaq = await this.faqModel.findOne({\n        _id: { $ne: id },\n        category: categoryId,\n        order: order,\n        deletedAt: null,\n      });\n\n      if (existingFaq) {\n        throw new ConflictException('Another FAQ with this order already exists in this category');\n      }\n    }\n\n    // Use findByIdAndUpdate to perform partial update without triggering validation on unchanged required fields\n    const updatedFaq = await this.faqModel.findByIdAndUpdate(\n      id,\n      { $set: updateFaqDto },\n      { new: true, runValidators: false },\n    );\n\n    return updatedFaq;\n  }\n\n  async removeFaq(id: string, reason?: string, userId?: string): Promise<void> {\n    const faq = await this.faqModel.findOne({\n      _id: id,\n      deletedAt: null,\n    });\n\n    if (!faq) {\n      throw new NotFoundException(`FAQ with ID ${id} not found`);\n    }\n\n    faq.deletedAt = new Date();\n    faq.deleteReason = reason;\n\n    if (userId) {\n      faq.deletedBy = new MongooseSchema.Types.ObjectId(userId);\n    }\n\n    await faq.save();\n  }\n\n  async restoreFaq(id: string): Promise<FaqDocument> {\n    const faq = await this.faqModel.findOne({\n      _id: id,\n      deletedAt: { $ne: null },\n    });\n\n    if (!faq) {\n      throw new NotFoundException(`Deleted FAQ with ID ${id} not found`);\n    }\n\n    faq.deletedAt = null;\n    faq.deletedBy = null;\n    faq.deleteReason = null;\n\n    return faq.save();\n  }\n\n  // FAQ Category CRUD\n  async createCategory(createCategoryDto: CreateFaqCategoryDto): Promise<FaqCategoryDocument> {\n    const existingCategory = await this.faqCategoryModel.findOne({\n      $or: [\n        { 'name.pt-BR': createCategoryDto.name['pt-BR'] },\n        { 'name.en': createCategoryDto.name.en },\n        { order: createCategoryDto.order },\n      ],\n    });\n\n    if (existingCategory) {\n      throw new ConflictException('Category with this name or order already exists');\n    }\n\n    const createdCategory = new this.faqCategoryModel(createCategoryDto);\n    return createdCategory.save();\n  }\n\n  async findAllCategories(): Promise<FaqCategoryDocument[]> {\n    return this.faqCategoryModel.find().sort({ order: 1 }).exec();\n  }\n\n  async findCategoryById(id: string): Promise<FaqCategoryDocument> {\n    const category = await this.faqCategoryModel.findById(id);\n    if (!category) {\n      throw new NotFoundException(`FAQ category with ID ${id} not found`);\n    }\n    return category;\n  }\n\n  async updateCategory(\n    id: string,\n    updateCategoryDto: UpdateFaqCategoryDto,\n  ): Promise<FaqCategoryDocument> {\n    const category = await this.faqCategoryModel.findById(id);\n    if (!category) {\n      throw new NotFoundException(`FAQ category with ID ${id} not found`);\n    }\n\n    // Check for name conflicts if name is being updated\n    if (updateCategoryDto.name) {\n      const nameConflict = await this.faqCategoryModel.findOne({\n        _id: { $ne: id },\n        $or: [\n          { 'name.pt-BR': updateCategoryDto.name['pt-BR'] },\n          { 'name.en': updateCategoryDto.name.en },\n        ],\n      });\n\n      if (nameConflict) {\n        throw new ConflictException('Another category with this name already exists');\n      }\n    }\n\n    // Handle order reordering if order is being updated\n    if (updateCategoryDto.order !== undefined && updateCategoryDto.order !== category.order) {\n      const oldOrder = category.order;\n      const newOrder = updateCategoryDto.order;\n\n      // Check if the new order position exists\n      const targetCategory = await this.faqCategoryModel.findOne({\n        _id: { $ne: id },\n        order: newOrder,\n      });\n\n      if (targetCategory) {\n        // Use a temporary negative value to avoid unique constraint violation during swap\n        const tempOrder = -1 - Date.now(); // Guaranteed unique temporary value\n\n        // Step 1: Move current category to temporary value\n        await this.faqCategoryModel.findByIdAndUpdate(id, {\n          $set: { order: tempOrder },\n        });\n\n        // Step 2: Move target category to old position\n        await this.faqCategoryModel.findByIdAndUpdate(targetCategory._id, {\n          $set: { order: oldOrder },\n        });\n\n        // Step 3: Move current category to new position\n        await this.faqCategoryModel.findByIdAndUpdate(id, {\n          $set: { order: newOrder },\n        });\n\n        // If there are other fields to update, apply them now\n        if (updateCategoryDto.name) {\n          const updatedCategory = await this.faqCategoryModel.findByIdAndUpdate(\n            id,\n            { $set: { name: updateCategoryDto.name } },\n            { new: true, runValidators: false },\n          );\n          return updatedCategory;\n        }\n\n        // Return the updated category\n        return this.faqCategoryModel.findById(id);\n      }\n    }\n\n    // Use findByIdAndUpdate to perform partial update without triggering validation on unchanged required fields\n    const updatedCategory = await this.faqCategoryModel.findByIdAndUpdate(\n      id,\n      { $set: updateCategoryDto },\n      { new: true, runValidators: false },\n    );\n\n    return updatedCategory;\n  }\n\n  async removeCategory(id: string): Promise<void> {\n    // Check if any FAQs are using this category\n    const faqsInCategory = await this.faqModel.findOne({\n      category: id,\n      deletedAt: null,\n    });\n\n    if (faqsInCategory) {\n      throw new ConflictException(\n        'Cannot delete category: FAQs are still assigned to this category',\n      );\n    }\n\n    const result = await this.faqCategoryModel.deleteOne({ _id: id });\n    if (result.deletedCount === 0) {\n      throw new NotFoundException(`FAQ category with ID ${id} not found`);\n    }\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}