{"version":3,"names":["common_1","cov_w7altho2r","s","require","storage_config_service_1","crypto","__importStar","VirusScannerService","VirusScannerService_1","storageConfigService","logger","Logger","name","constructor","f","scanFile","file","filename","mimeType","isVirusScanningEnabled","b","debug","performBasicChecks","clamavHost","getClamAvHost","clamavPort","getClamAvPort","scanWithClamAV","performHeuristicScanning","error","message","stack","BadRequestException","length","startsWith","checkImageSafety","checkPdfSafety","fileStr","toString","dangerousPatterns","pattern","test","warn","source","exifMarkers","match","pdfMagicBytes","Buffer","from","fileMagicBytes","slice","equals","suspiciousPatterns","fileContent","host","port","net","Promise","resolve","reject","client","Socket","setTimeout","connect","write","chunkSize","offset","chunk","Math","min","sizeBuffer","allocUnsafe","writeUInt32BE","endBuffer","on","data","response","trim","destroy","includes","virus","Error","_mimeType","fileHash","createHash","update","digest","obfuscationPatterns","suspiciousCount","matches","externalRefs","quarantineFile","reason","event","hash","timestamp","Date","toISOString","exports","__decorate","Injectable","StorageConfigService"],"sources":["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/storage/services/virus-scanner.service.ts"],"sourcesContent":["import { Injectable, Logger, BadRequestException } from '@nestjs/common';\nimport { StorageConfigService } from './storage-config.service';\nimport * as crypto from 'crypto';\n\n@Injectable()\nexport class VirusScannerService {\n  private readonly logger = new Logger(VirusScannerService.name);\n\n  constructor(private storageConfigService: StorageConfigService) {}\n\n  /**\n   * Scans a file for viruses and malicious content\n   * @param file - The file buffer to scan\n   * @param filename - The name of the file being scanned\n   * @param mimeType - The MIME type of the file\n   * @returns Promise<boolean> - true if file is clean, throws error if infected\n   */\n  async scanFile(file: Buffer, filename: string, mimeType: string): Promise<boolean> {\n    if (!this.storageConfigService.isVirusScanningEnabled()) {\n      this.logger.debug(`Virus scanning disabled, skipping scan for ${filename}`);\n      return true;\n    }\n\n    try {\n      // Perform basic checks based on file type\n      await this.performBasicChecks(file, filename, mimeType);\n\n      // If ClamAV is configured, use it\n      const clamavHost = this.storageConfigService.getClamAvHost();\n      const clamavPort = this.storageConfigService.getClamAvPort();\n\n      if (clamavHost) {\n        return await this.scanWithClamAV(file, filename, clamavHost, clamavPort);\n      }\n\n      // If no external scanner, perform enhanced heuristic checks\n      return await this.performHeuristicScanning(file, filename, mimeType);\n    } catch (error: any) {\n      this.logger.error(`Virus scanning failed for ${filename}: ${error.message}`, error.stack);\n\n      // If it's a validation error, rethrow it\n      if (error instanceof BadRequestException) {\n        throw error;\n      }\n\n      // Fail-safe: if scanning fails, reject the file for safety\n      throw new BadRequestException('File scanning failed. Please try again or contact support.');\n    }\n  }\n\n  /**\n   * Performs basic file validation checks\n   */\n  private async performBasicChecks(\n    file: Buffer,\n    filename: string,\n    mimeType: string,\n  ): Promise<void> {\n    // Check file size for anomalies (extremely small files)\n    if (file.length < 100) {\n      throw new BadRequestException(`File ${filename} is too small to be valid`);\n    }\n\n    // For images, check for embedded scripts or suspicious metadata\n    if (mimeType.startsWith('image/')) {\n      await this.checkImageSafety(file, filename);\n    }\n\n    // For PDFs, check for dangerous content\n    if (mimeType === 'application/pdf') {\n      await this.checkPdfSafety(file, filename);\n    }\n  }\n\n  /**\n   * Checks image files for suspicious content\n   */\n  private async checkImageSafety(file: Buffer, filename: string): Promise<void> {\n    const fileStr = file.toString('latin1');\n\n    // Check for embedded scripts or HTML\n    const dangerousPatterns = [\n      /<script/i,\n      /javascript:/i,\n      /onerror=/i,\n      /onload=/i,\n      /<iframe/i,\n      /<object/i,\n      /<embed/i,\n    ];\n\n    for (const pattern of dangerousPatterns) {\n      if (pattern.test(fileStr)) {\n        this.logger.warn(\n          `Potentially dangerous content detected in image ${filename}: ${pattern.source}`,\n        );\n        throw new BadRequestException(\n          `File ${filename} contains suspicious content and was rejected`,\n        );\n      }\n    }\n\n    // Check for excessive metadata (could hide malicious content)\n    const exifMarkers = fileStr.match(/Exif/gi) || [];\n    if (exifMarkers.length > 100) {\n      this.logger.warn(`File ${filename} contains excessive metadata`);\n      throw new BadRequestException(`File ${filename} contains suspicious metadata`);\n    }\n  }\n\n  /**\n   * Checks PDF files for dangerous content\n   */\n  private async checkPdfSafety(file: Buffer, filename: string): Promise<void> {\n    // Check for PDF magic bytes\n    const pdfMagicBytes = Buffer.from([0x25, 0x50, 0x44, 0x46]); // %PDF\n    const fileMagicBytes = file.slice(0, 4);\n\n    if (!fileMagicBytes.equals(pdfMagicBytes)) {\n      throw new BadRequestException(`File ${filename} is not a valid PDF file`);\n    }\n\n    // Check for suspicious patterns in the PDF\n    const suspiciousPatterns = [\n      /\\/JavaScript/i,\n      /\\/JS/i,\n      /\\/Launch/i,\n      /\\/EmbeddedFile/i,\n      /\\/OpenAction/i,\n      /\\/AA/i, // Additional Actions\n      /\\/SubmitForm/i,\n      /\\/ImportData/i,\n      /\\/Hide/i,\n    ];\n\n    const fileContent = file.toString('latin1');\n\n    for (const pattern of suspiciousPatterns) {\n      if (pattern.test(fileContent)) {\n        this.logger.warn(\n          `Potentially dangerous content detected in ${filename}: ${pattern.source}`,\n        );\n        // Allow with warning for now, but log for monitoring\n      }\n    }\n\n    // Check file size for anomalies\n    if (file.length < 1024) {\n      throw new BadRequestException(`File ${filename} is too small to be a valid PDF`);\n    }\n  }\n\n  /**\n   * Scans file using ClamAV antivirus\n   */\n  private async scanWithClamAV(\n    file: Buffer,\n    filename: string,\n    host: string,\n    port: number,\n  ): Promise<boolean> {\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const net = require('net');\n\n    return new Promise((resolve, reject) => {\n      const client = new net.Socket();\n\n      client.setTimeout(30000); // 30 second timeout\n\n      client.connect(port, host, () => {\n        this.logger.debug(`Connected to ClamAV at ${host}:${port}`);\n\n        // Send INSTREAM command\n        client.write('zINSTREAM\\0');\n\n        // Send file size and content in chunks\n        const chunkSize = 65536; // 64KB chunks\n        let offset = 0;\n\n        while (offset < file.length) {\n          const chunk = file.slice(offset, Math.min(offset + chunkSize, file.length));\n          const sizeBuffer = Buffer.allocUnsafe(4);\n          sizeBuffer.writeUInt32BE(chunk.length, 0);\n          client.write(sizeBuffer);\n          client.write(chunk);\n          offset += chunkSize;\n        }\n\n        // Send zero-length chunk to indicate end\n        const endBuffer = Buffer.allocUnsafe(4);\n        endBuffer.writeUInt32BE(0, 0);\n        client.write(endBuffer);\n      });\n\n      client.on('data', (data: Buffer) => {\n        const response = data.toString().trim();\n        client.destroy();\n\n        if (response === 'stream: OK') {\n          this.logger.debug(`File ${filename} is clean`);\n          resolve(true);\n        } else if (response.includes('FOUND')) {\n          const virus = response.match(/stream: (.+) FOUND/)?.[1] || 'Unknown';\n          this.logger.warn(`Virus detected in ${filename}: ${virus}`);\n          reject(new BadRequestException(`File failed security scan and was rejected.`));\n        } else {\n          this.logger.error(`Unknown ClamAV response: ${response}`);\n          reject(new Error('Unknown virus scan response'));\n        }\n      });\n\n      client.on('error', (error: Error) => {\n        this.logger.error(`ClamAV connection error: ${error.message}`);\n        client.destroy();\n        reject(error);\n      });\n\n      client.on('timeout', () => {\n        this.logger.error('ClamAV scan timeout');\n        client.destroy();\n        reject(new Error('Virus scan timeout'));\n      });\n    });\n  }\n\n  /**\n   * Performs heuristic virus scanning without external service\n   */\n  private async performHeuristicScanning(\n    file: Buffer,\n    filename: string,\n    _mimeType: string,\n  ): Promise<boolean> {\n    // Calculate file hash for comparison with known malware databases\n    const fileHash = crypto.createHash('sha256').update(file).digest('hex');\n\n    this.logger.debug(`Heuristic scanning ${filename} (SHA256: ${fileHash})`);\n\n    const fileStr = file.toString('latin1');\n\n    // Check for obfuscated JavaScript\n    const obfuscationPatterns = [\n      /eval\\s*\\(/i,\n      /unescape\\s*\\(/i,\n      /String\\.fromCharCode/i,\n      /\\\\x[0-9a-f]{2}/gi,\n      /\\\\u[0-9a-f]{4}/gi,\n    ];\n\n    let suspiciousCount = 0;\n    for (const pattern of obfuscationPatterns) {\n      const matches = fileStr.match(pattern);\n      if (matches && matches.length > 5) {\n        suspiciousCount++;\n      }\n    }\n\n    if (suspiciousCount >= 3) {\n      this.logger.warn(`File ${filename} contains suspicious obfuscation patterns`);\n      throw new BadRequestException(`File failed security scan and was rejected.`);\n    }\n\n    // Check for excessive external references (potential phishing)\n    const externalRefs = fileStr.match(/https?:\\/\\//gi) || [];\n    if (externalRefs.length > 20) {\n      this.logger.warn(`File ${filename} contains excessive external references`);\n      throw new BadRequestException(`File contains too many external references`);\n    }\n\n    // If all checks pass, file is considered clean\n    this.logger.debug(`File ${filename} passed heuristic scanning`);\n    return true;\n  }\n\n  /**\n   * Quarantines a suspicious file for later analysis\n   */\n  async quarantineFile(file: Buffer, filename: string, reason: string): Promise<void> {\n    const fileHash = crypto.createHash('sha256').update(file).digest('hex');\n\n    this.logger.warn(`Quarantining file ${filename} (${fileHash}): ${reason}`);\n\n    // Log the event for security monitoring\n    this.logger.warn({\n      event: 'FILE_QUARANTINED',\n      filename,\n      hash: fileHash,\n      reason,\n      timestamp: new Date().toISOString(),\n    });\n  }\n}\n"],"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","ignoreList":[]}