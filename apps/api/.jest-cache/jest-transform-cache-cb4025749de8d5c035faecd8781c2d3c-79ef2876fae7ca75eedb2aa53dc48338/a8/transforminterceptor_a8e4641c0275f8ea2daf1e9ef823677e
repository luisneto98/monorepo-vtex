d4648541ccd7c603bad4249531f1bbb2
"use strict";

/* istanbul ignore next */
function cov_pgbc49huk() {
  var path = "/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/common/interceptors/transform.interceptor.ts";
  var hash = "df6ace75e207a770d067976b72947ceaa8b709ec";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/common/interceptors/transform.interceptor.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 17
        },
        end: {
          line: 7,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 12
        },
        end: {
          line: 3,
          column: 28
        }
      },
      "2": {
        start: {
          line: 3,
          column: 34
        },
        end: {
          line: 3,
          column: 125
        }
      },
      "3": {
        start: {
          line: 4,
          column: 4
        },
        end: {
          line: 5,
          column: 150
        }
      },
      "4": {
        start: {
          line: 4,
          column: 79
        },
        end: {
          line: 4,
          column: 131
        }
      },
      "5": {
        start: {
          line: 5,
          column: 9
        },
        end: {
          line: 5,
          column: 150
        }
      },
      "6": {
        start: {
          line: 5,
          column: 22
        },
        end: {
          line: 5,
          column: 43
        }
      },
      "7": {
        start: {
          line: 5,
          column: 58
        },
        end: {
          line: 5,
          column: 150
        }
      },
      "8": {
        start: {
          line: 5,
          column: 81
        },
        end: {
          line: 5,
          column: 150
        }
      },
      "9": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 6,
          column: 66
        }
      },
      "10": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 8,
          column: 62
        }
      },
      "11": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 9,
          column: 38
        }
      },
      "12": {
        start: {
          line: 10,
          column: 17
        },
        end: {
          line: 10,
          column: 42
        }
      },
      "13": {
        start: {
          line: 11,
          column: 20
        },
        end: {
          line: 11,
          column: 45
        }
      },
      "14": {
        start: {
          line: 12,
          column: 27
        },
        end: {
          line: 23,
          column: 1
        }
      },
      "15": {
        start: {
          line: 14,
          column: 20
        },
        end: {
          line: 14,
          column: 42
        }
      },
      "16": {
        start: {
          line: 15,
          column: 25
        },
        end: {
          line: 15,
          column: 42
        }
      },
      "17": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 21,
          column: 13
        }
      },
      "18": {
        start: {
          line: 16,
          column: 66
        },
        end: {
          line: 21,
          column: 9
        }
      },
      "19": {
        start: {
          line: 24,
          column: 0
        },
        end: {
          line: 24,
          column: 52
        }
      },
      "20": {
        start: {
          line: 25,
          column: 0
        },
        end: {
          line: 27,
          column: 25
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 46
          },
          end: {
            line: 2,
            column: 47
          }
        },
        loc: {
          start: {
            line: 2,
            column: 87
          },
          end: {
            line: 7,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 29
          },
          end: {
            line: 22,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 16,
            column: 55
          },
          end: {
            line: 16,
            column: 56
          }
        },
        loc: {
          start: {
            line: 16,
            column: 66
          },
          end: {
            line: 21,
            column: 9
          }
        },
        line: 16
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 17
          },
          end: {
            line: 7,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 18
          },
          end: {
            line: 2,
            column: 22
          }
        }, {
          start: {
            line: 2,
            column: 26
          },
          end: {
            line: 2,
            column: 41
          }
        }, {
          start: {
            line: 2,
            column: 46
          },
          end: {
            line: 7,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 34
          },
          end: {
            line: 3,
            column: 125
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 42
          },
          end: {
            line: 3,
            column: 48
          }
        }, {
          start: {
            line: 3,
            column: 51
          },
          end: {
            line: 3,
            column: 125
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 51
          },
          end: {
            line: 3,
            column: 125
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 67
          },
          end: {
            line: 3,
            column: 118
          }
        }, {
          start: {
            line: 3,
            column: 121
          },
          end: {
            line: 3,
            column: 125
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 4,
            column: 4
          },
          end: {
            line: 5,
            column: 150
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 4,
            column: 4
          },
          end: {
            line: 5,
            column: 150
          }
        }, {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 150
          }
        }],
        line: 4
      },
      "4": {
        loc: {
          start: {
            line: 4,
            column: 8
          },
          end: {
            line: 4,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 4,
            column: 8
          },
          end: {
            line: 4,
            column: 35
          }
        }, {
          start: {
            line: 4,
            column: 39
          },
          end: {
            line: 4,
            column: 77
          }
        }],
        line: 4
      },
      "5": {
        loc: {
          start: {
            line: 5,
            column: 58
          },
          end: {
            line: 5,
            column: 150
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 5,
            column: 58
          },
          end: {
            line: 5,
            column: 150
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 5
      },
      "6": {
        loc: {
          start: {
            line: 5,
            column: 85
          },
          end: {
            line: 5,
            column: 149
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 86
          },
          end: {
            line: 5,
            column: 143
          }
        }, {
          start: {
            line: 5,
            column: 148
          },
          end: {
            line: 5,
            column: 149
          }
        }],
        line: 5
      },
      "7": {
        loc: {
          start: {
            line: 5,
            column: 86
          },
          end: {
            line: 5,
            column: 143
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 5,
            column: 94
          },
          end: {
            line: 5,
            column: 98
          }
        }, {
          start: {
            line: 5,
            column: 101
          },
          end: {
            line: 5,
            column: 143
          }
        }],
        line: 5
      },
      "8": {
        loc: {
          start: {
            line: 5,
            column: 101
          },
          end: {
            line: 5,
            column: 143
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 5,
            column: 109
          },
          end: {
            line: 5,
            column: 126
          }
        }, {
          start: {
            line: 5,
            column: 129
          },
          end: {
            line: 5,
            column: 143
          }
        }],
        line: 5
      },
      "9": {
        loc: {
          start: {
            line: 6,
            column: 11
          },
          end: {
            line: 6,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 6,
            column: 11
          },
          end: {
            line: 6,
            column: 16
          }
        }, {
          start: {
            line: 6,
            column: 20
          },
          end: {
            line: 6,
            column: 21
          }
        }, {
          start: {
            line: 6,
            column: 25
          },
          end: {
            line: 6,
            column: 62
          }
        }],
        line: 6
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0, 0]
    },
    inputSourceMap: {
      file: "/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/common/interceptors/transform.interceptor.ts",
      mappings: ";;;;;;;;;AAAA,2CAA4F;AAE5F,8CAAqC;AAU9B,IAAM,oBAAoB,GAA1B,MAAM,oBAAoB;IAC/B,SAAS,CAAC,OAAyB,EAAE,IAAiB;QACpD,MAAM,GAAG,GAAG,OAAO,CAAC,YAAY,EAAE,CAAC;QACnC,MAAM,QAAQ,GAAG,GAAG,CAAC,WAAW,EAAE,CAAC;QAEnC,OAAO,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,CACvB,IAAA,eAAG,EAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;YACb,UAAU,EAAE,QAAQ,CAAC,UAAU;YAC/B,OAAO,EAAE,SAAS;YAClB,IAAI;YACJ,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;SACpC,CAAC,CAAC,CACJ,CAAC;IACJ,CAAC;CACF,CAAA;AAdY,oDAAoB;+BAApB,oBAAoB;IADhC,IAAA,mBAAU,GAAE;GACA,oBAAoB,CAchC",
      names: [],
      sources: ["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/common/interceptors/transform.interceptor.ts"],
      sourcesContent: ["import { Injectable, NestInterceptor, ExecutionContext, CallHandler } from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport interface Response<T> {\n  statusCode: number;\n  message: string;\n  data: T;\n  timestamp: string;\n}\n\n@Injectable()\nexport class TransformInterceptor<T> implements NestInterceptor<T, Response<T>> {\n  intercept(context: ExecutionContext, next: CallHandler): Observable<Response<T>> {\n    const ctx = context.switchToHttp();\n    const response = ctx.getResponse();\n\n    return next.handle().pipe(\n      map((data) => ({\n        statusCode: response.statusCode,\n        message: 'Success',\n        data,\n        timestamp: new Date().toISOString(),\n      })),\n    );\n  }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "df6ace75e207a770d067976b72947ceaa8b709ec"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_pgbc49huk = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_pgbc49huk();
var __decorate =
/* istanbul ignore next */
(cov_pgbc49huk().s[0]++,
/* istanbul ignore next */
(cov_pgbc49huk().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_pgbc49huk().b[0][1]++, this.__decorate) ||
/* istanbul ignore next */
(cov_pgbc49huk().b[0][2]++, function (decorators, target, key, desc) {
  /* istanbul ignore next */
  cov_pgbc49huk().f[0]++;
  var c =
    /* istanbul ignore next */
    (cov_pgbc49huk().s[1]++, arguments.length),
    r =
    /* istanbul ignore next */
    (cov_pgbc49huk().s[2]++, c < 3 ?
    /* istanbul ignore next */
    (cov_pgbc49huk().b[1][0]++, target) :
    /* istanbul ignore next */
    (cov_pgbc49huk().b[1][1]++, desc === null ?
    /* istanbul ignore next */
    (cov_pgbc49huk().b[2][0]++, desc = Object.getOwnPropertyDescriptor(target, key)) :
    /* istanbul ignore next */
    (cov_pgbc49huk().b[2][1]++, desc))),
    d;
  /* istanbul ignore next */
  cov_pgbc49huk().s[3]++;
  if (
  /* istanbul ignore next */
  (cov_pgbc49huk().b[4][0]++, typeof Reflect === "object") &&
  /* istanbul ignore next */
  (cov_pgbc49huk().b[4][1]++, typeof Reflect.decorate === "function")) {
    /* istanbul ignore next */
    cov_pgbc49huk().b[3][0]++;
    cov_pgbc49huk().s[4]++;
    r = Reflect.decorate(decorators, target, key, desc);
  } else {
    /* istanbul ignore next */
    cov_pgbc49huk().b[3][1]++;
    cov_pgbc49huk().s[5]++;
    for (var i =
    /* istanbul ignore next */
    (cov_pgbc49huk().s[6]++, decorators.length - 1); i >= 0; i--) {
      /* istanbul ignore next */
      cov_pgbc49huk().s[7]++;
      if (d = decorators[i]) {
        /* istanbul ignore next */
        cov_pgbc49huk().b[5][0]++;
        cov_pgbc49huk().s[8]++;
        r =
        /* istanbul ignore next */
        (cov_pgbc49huk().b[6][0]++, c < 3 ?
        /* istanbul ignore next */
        (cov_pgbc49huk().b[7][0]++, d(r)) :
        /* istanbul ignore next */
        (cov_pgbc49huk().b[7][1]++, c > 3 ?
        /* istanbul ignore next */
        (cov_pgbc49huk().b[8][0]++, d(target, key, r)) :
        /* istanbul ignore next */
        (cov_pgbc49huk().b[8][1]++, d(target, key)))) ||
        /* istanbul ignore next */
        (cov_pgbc49huk().b[6][1]++, r);
      } else
      /* istanbul ignore next */
      {
        cov_pgbc49huk().b[5][1]++;
      }
    }
  }
  /* istanbul ignore next */
  cov_pgbc49huk().s[9]++;
  return /* istanbul ignore next */(cov_pgbc49huk().b[9][0]++, c > 3) &&
  /* istanbul ignore next */
  (cov_pgbc49huk().b[9][1]++, r) &&
  /* istanbul ignore next */
  (cov_pgbc49huk().b[9][2]++, Object.defineProperty(target, key, r)), r;
}));
/* istanbul ignore next */
cov_pgbc49huk().s[10]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_pgbc49huk().s[11]++;
exports.TransformInterceptor = void 0;
const common_1 =
/* istanbul ignore next */
(cov_pgbc49huk().s[12]++, require("@nestjs/common"));
const operators_1 =
/* istanbul ignore next */
(cov_pgbc49huk().s[13]++, require("rxjs/operators"));
/* istanbul ignore next */
cov_pgbc49huk().s[14]++;
let TransformInterceptor = class TransformInterceptor {
  intercept(context, next) {
    /* istanbul ignore next */
    cov_pgbc49huk().f[1]++;
    const ctx =
    /* istanbul ignore next */
    (cov_pgbc49huk().s[15]++, context.switchToHttp());
    const response =
    /* istanbul ignore next */
    (cov_pgbc49huk().s[16]++, ctx.getResponse());
    /* istanbul ignore next */
    cov_pgbc49huk().s[17]++;
    return next.handle().pipe((0, operators_1.map)(data => {
      /* istanbul ignore next */
      cov_pgbc49huk().f[2]++;
      cov_pgbc49huk().s[18]++;
      return {
        statusCode: response.statusCode,
        message: 'Success',
        data,
        timestamp: new Date().toISOString()
      };
    }));
  }
};
/* istanbul ignore next */
cov_pgbc49huk().s[19]++;
exports.TransformInterceptor = TransformInterceptor;
/* istanbul ignore next */
cov_pgbc49huk().s[20]++;
exports.TransformInterceptor = TransformInterceptor = __decorate([(0, common_1.Injectable)()], TransformInterceptor);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfcGdiYzQ5aHVrIiwiYWN0dWFsQ292ZXJhZ2UiLCJjb21tb25fMSIsInMiLCJyZXF1aXJlIiwib3BlcmF0b3JzXzEiLCJUcmFuc2Zvcm1JbnRlcmNlcHRvciIsImludGVyY2VwdCIsImNvbnRleHQiLCJuZXh0IiwiZiIsImN0eCIsInN3aXRjaFRvSHR0cCIsInJlc3BvbnNlIiwiZ2V0UmVzcG9uc2UiLCJoYW5kbGUiLCJwaXBlIiwibWFwIiwiZGF0YSIsInN0YXR1c0NvZGUiLCJtZXNzYWdlIiwidGltZXN0YW1wIiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwiZXhwb3J0cyIsIl9fZGVjb3JhdGUiLCJJbmplY3RhYmxlIl0sInNvdXJjZXMiOlsiL2hvbWUvbHVpc25ldG85OC9Eb2N1bWVudG9zL0NvZGUvbW9ub3JlcG8tdnRleC9hcHBzL2FwaS9zcmMvY29tbW9uL2ludGVyY2VwdG9ycy90cmFuc2Zvcm0uaW50ZXJjZXB0b3IudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgTmVzdEludGVyY2VwdG9yLCBFeGVjdXRpb25Db250ZXh0LCBDYWxsSGFuZGxlciB9IGZyb20gJ0BuZXN0anMvY29tbW9uJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuZXhwb3J0IGludGVyZmFjZSBSZXNwb25zZTxUPiB7XG4gIHN0YXR1c0NvZGU6IG51bWJlcjtcbiAgbWVzc2FnZTogc3RyaW5nO1xuICBkYXRhOiBUO1xuICB0aW1lc3RhbXA6IHN0cmluZztcbn1cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFRyYW5zZm9ybUludGVyY2VwdG9yPFQ+IGltcGxlbWVudHMgTmVzdEludGVyY2VwdG9yPFQsIFJlc3BvbnNlPFQ+PiB7XG4gIGludGVyY2VwdChjb250ZXh0OiBFeGVjdXRpb25Db250ZXh0LCBuZXh0OiBDYWxsSGFuZGxlcik6IE9ic2VydmFibGU8UmVzcG9uc2U8VD4+IHtcbiAgICBjb25zdCBjdHggPSBjb250ZXh0LnN3aXRjaFRvSHR0cCgpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0gY3R4LmdldFJlc3BvbnNlKCk7XG5cbiAgICByZXR1cm4gbmV4dC5oYW5kbGUoKS5waXBlKFxuICAgICAgbWFwKChkYXRhKSA9PiAoe1xuICAgICAgICBzdGF0dXNDb2RlOiByZXNwb25zZS5zdGF0dXNDb2RlLFxuICAgICAgICBtZXNzYWdlOiAnU3VjY2VzcycsXG4gICAgICAgIGRhdGEsXG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgfSkpLFxuICAgICk7XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQWlCSTtJQUFBQSxhQUFBLFlBQUFBLENBQUE7TUFBQSxPQUFBQyxjQUFBO0lBQUE7RUFBQTtFQUFBLE9BQUFBLGNBQUE7QUFBQTtBQUFBRCxhQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFqQkosTUFBQUUsUUFBQTtBQUFBO0FBQUEsQ0FBQUYsYUFBQSxHQUFBRyxDQUFBLFFBQUFDLE9BQUE7QUFFQSxNQUFBQyxXQUFBO0FBQUE7QUFBQSxDQUFBTCxhQUFBLEdBQUFHLENBQUEsUUFBQUMsT0FBQTtBQUFxQztBQUFBSixhQUFBLEdBQUFHLENBQUE7QUFVOUIsSUFBTUcsb0JBQW9CLEdBQTFCLE1BQU1BLG9CQUFvQjtFQUMvQkMsU0FBU0EsQ0FBQ0MsT0FBeUIsRUFBRUMsSUFBaUI7SUFBQTtJQUFBVCxhQUFBLEdBQUFVLENBQUE7SUFDcEQsTUFBTUMsR0FBRztJQUFBO0lBQUEsQ0FBQVgsYUFBQSxHQUFBRyxDQUFBLFFBQUdLLE9BQU8sQ0FBQ0ksWUFBWSxFQUFFO0lBQ2xDLE1BQU1DLFFBQVE7SUFBQTtJQUFBLENBQUFiLGFBQUEsR0FBQUcsQ0FBQSxRQUFHUSxHQUFHLENBQUNHLFdBQVcsRUFBRTtJQUFDO0lBQUFkLGFBQUEsR0FBQUcsQ0FBQTtJQUVuQyxPQUFPTSxJQUFJLENBQUNNLE1BQU0sRUFBRSxDQUFDQyxJQUFJLENBQ3ZCLElBQUFYLFdBQUEsQ0FBQVksR0FBRyxFQUFFQyxJQUFJLElBQU07TUFBQTtNQUFBbEIsYUFBQSxHQUFBVSxDQUFBO01BQUFWLGFBQUEsR0FBQUcsQ0FBQTtNQUFBO1FBQ2JnQixVQUFVLEVBQUVOLFFBQVEsQ0FBQ00sVUFBVTtRQUMvQkMsT0FBTyxFQUFFLFNBQVM7UUFDbEJGLElBQUk7UUFDSkcsU0FBUyxFQUFFLElBQUlDLElBQUksRUFBRSxDQUFDQyxXQUFXO09BQ2xDO0tBQUMsQ0FBQyxDQUNKO0VBQ0g7Q0FDRDtBQUFBO0FBQUF2QixhQUFBLEdBQUFHLENBQUE7QUFkWXFCLE9BQUEsQ0FBQWxCLG9CQUFBLEdBQUFBLG9CQUFBO0FBQW9CO0FBQUFOLGFBQUEsR0FBQUcsQ0FBQTsrQkFBcEJHLG9CQUFvQixHQUFBbUIsVUFBQSxFQURoQyxJQUFBdkIsUUFBQSxDQUFBd0IsVUFBVSxHQUFFLEMsRUFDQXBCLG9CQUFvQixDQWNoQyIsImlnbm9yZUxpc3QiOltdfQ==