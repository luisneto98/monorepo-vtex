fc1457c818bfd13ae290022e5f7a3135
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FaqSchema = exports.Faq = void 0;
const mongoose_1 = require("@nestjs/mongoose");
const mongoose_2 = require("mongoose");
const DOMPurify = __importStar(require("isomorphic-dompurify"));
const faq_constants_1 = require("../faq.constants");
let Question = class Question {
    'pt-BR';
    'en';
};
__decorate([
    (0, mongoose_1.Prop)({
        required: true,
        maxlength: faq_constants_1.FAQ_CONSTANTS.QUESTION_MAX_LENGTH,
        trim: true,
    }),
    __metadata("design:type", String)
], Question.prototype, "pt-BR", void 0);
__decorate([
    (0, mongoose_1.Prop)({
        required: true,
        maxlength: faq_constants_1.FAQ_CONSTANTS.QUESTION_MAX_LENGTH,
        trim: true,
    }),
    __metadata("design:type", String)
], Question.prototype, "en", void 0);
Question = __decorate([
    (0, mongoose_1.Schema)({ _id: false })
], Question);
let Answer = class Answer {
    'pt-BR';
    'en';
};
__decorate([
    (0, mongoose_1.Prop)({
        required: true,
        maxlength: faq_constants_1.FAQ_CONSTANTS.ANSWER_MAX_LENGTH,
        trim: true,
    }),
    __metadata("design:type", String)
], Answer.prototype, "pt-BR", void 0);
__decorate([
    (0, mongoose_1.Prop)({
        required: true,
        maxlength: faq_constants_1.FAQ_CONSTANTS.ANSWER_MAX_LENGTH,
        trim: true,
    }),
    __metadata("design:type", String)
], Answer.prototype, "en", void 0);
Answer = __decorate([
    (0, mongoose_1.Schema)({ _id: false })
], Answer);
let Faq = class Faq {
    question;
    answer;
    category;
    order;
    viewCount;
    isVisible;
    deletedAt;
    deletedBy;
    deleteReason;
};
exports.Faq = Faq;
__decorate([
    (0, mongoose_1.Prop)({
        type: Question,
        required: true,
    }),
    __metadata("design:type", Object)
], Faq.prototype, "question", void 0);
__decorate([
    (0, mongoose_1.Prop)({
        type: Answer,
        required: true,
    }),
    __metadata("design:type", Object)
], Faq.prototype, "answer", void 0);
__decorate([
    (0, mongoose_1.Prop)({
        type: mongoose_2.Schema.Types.ObjectId,
        ref: 'FaqCategory',
        required: true,
        index: true,
    }),
    __metadata("design:type", String)
], Faq.prototype, "category", void 0);
__decorate([
    (0, mongoose_1.Prop)({
        required: true,
        min: faq_constants_1.FAQ_CONSTANTS.ORDER_MIN_VALUE,
    }),
    __metadata("design:type", Number)
], Faq.prototype, "order", void 0);
__decorate([
    (0, mongoose_1.Prop)({
        default: 0,
        min: faq_constants_1.FAQ_CONSTANTS.VIEW_COUNT_MIN_VALUE,
    }),
    __metadata("design:type", Number)
], Faq.prototype, "viewCount", void 0);
__decorate([
    (0, mongoose_1.Prop)({
        default: true,
        index: true,
    }),
    __metadata("design:type", Boolean)
], Faq.prototype, "isVisible", void 0);
__decorate([
    (0, mongoose_1.Prop)({
        type: Date,
        default: null,
    }),
    __metadata("design:type", Date)
], Faq.prototype, "deletedAt", void 0);
__decorate([
    (0, mongoose_1.Prop)({
        type: mongoose_2.Schema.Types.ObjectId,
        ref: 'User',
    }),
    __metadata("design:type", mongoose_2.Schema.Types.ObjectId)
], Faq.prototype, "deletedBy", void 0);
__decorate([
    (0, mongoose_1.Prop)({
        type: String,
    }),
    __metadata("design:type", String)
], Faq.prototype, "deleteReason", void 0);
exports.Faq = Faq = __decorate([
    (0, mongoose_1.Schema)({ timestamps: true, collection: 'Faq' })
], Faq);
exports.FaqSchema = mongoose_1.SchemaFactory.createForClass(Faq);
// Indexes
exports.FaqSchema.index({ category: 1, order: 1 });
exports.FaqSchema.index({ viewCount: -1 });
exports.FaqSchema.index({ isVisible: 1 });
exports.FaqSchema.index({ deletedAt: 1 });
// Compound index for common query pattern (category + visibility + soft delete)
exports.FaqSchema.index({ category: 1, isVisible: 1, deletedAt: 1 });
exports.FaqSchema.index({
    'question.pt-BR': 'text',
    'question.en': 'text',
    'answer.pt-BR': 'text',
    'answer.en': 'text',
});
// Pre-save middleware for data normalization and HTML sanitization
exports.FaqSchema.pre('save', function (next) {
    if (this.question) {
        if (this.question['pt-BR']) {
            this.question['pt-BR'] = this.question['pt-BR'].trim();
        }
        if (this.question['en']) {
            this.question['en'] = this.question['en'].trim();
        }
    }
    if (this.answer) {
        if (this.answer['pt-BR']) {
            this.answer['pt-BR'] = sanitizeHtml(this.answer['pt-BR'].trim());
        }
        if (this.answer['en']) {
            this.answer['en'] = sanitizeHtml(this.answer['en'].trim());
        }
    }
    next();
});
// Helper function for HTML sanitization
function sanitizeHtml(html) {
    const config = {
        ALLOWED_TAGS: [
            'b',
            'i',
            'em',
            'strong',
            'a',
            'p',
            'br',
            'ul',
            'ol',
            'li',
            'h3',
            'h4',
            'h5',
            'h6',
        ],
        ALLOWED_ATTR: ['href', 'target', 'rel'],
        ALLOW_DATA_ATTR: false,
    };
    return DOMPurify.sanitize(html, config);
}
// Virtual fields
exports.FaqSchema.virtual('popularity').get(function () {
    return this.viewCount || 0;
});
// Schema methods
exports.FaqSchema.methods['getLocalizedQuestion'] = function (language) {
    return this['question'][language] || this['question']['pt-BR'];
};
exports.FaqSchema.methods['getLocalizedAnswer'] = function (language) {
    return this['answer'][language] || this['answer']['pt-BR'];
};
exports.FaqSchema.methods['incrementViewCount'] = function () {
    this['viewCount'] = (this['viewCount'] || 0) + 1;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,