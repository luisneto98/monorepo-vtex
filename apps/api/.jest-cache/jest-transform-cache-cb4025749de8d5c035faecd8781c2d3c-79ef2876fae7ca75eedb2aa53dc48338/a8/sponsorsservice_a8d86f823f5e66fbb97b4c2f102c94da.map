{"file":"/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/sponsors/sponsors.service.ts","mappings":"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","names":[],"sources":["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/sponsors/sponsors.service.ts"],"sourcesContent":["import { Injectable, NotFoundException, ConflictException } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { Sponsor, SponsorDocument } from './schemas/sponsor.schema';\nimport { SponsorTier, SponsorTierDocument } from './schemas/sponsor-tier.schema';\nimport { CreateSponsorDto } from './dto/create-sponsor.dto';\nimport { UpdateSponsorDto } from './dto/update-sponsor.dto';\nimport { SponsorFilterDto } from './dto/sponsor-filter.dto';\nimport { CreateSponsorTierDto } from './dto/create-sponsor-tier.dto';\nimport { UpdateSponsorTierDto } from './dto/update-sponsor-tier.dto';\nimport { PaginatedResponse } from '@common/dto/pagination.dto';\nimport { StorageService } from '../storage/services/storage.service';\nimport { FileCategory } from '../storage/types/storage.types';\n\n@Injectable()\nexport class SponsorsService {\n  constructor(\n    @InjectModel(Sponsor.name) private sponsorModel: Model<SponsorDocument>,\n    @InjectModel(SponsorTier.name) private sponsorTierModel: Model<SponsorTierDocument>,\n    private storageService: StorageService,\n  ) {}\n\n  // Sponsor CRUD\n  async createSponsor(createSponsorDto: CreateSponsorDto): Promise<SponsorDocument> {\n    const existingSponsor = await this.sponsorModel.findOne({\n      $or: [\n        { name: createSponsorDto.name, deletedAt: null },\n        { slug: createSponsorDto.slug, deletedAt: null },\n      ],\n    });\n\n    if (existingSponsor) {\n      throw new ConflictException('Sponsor with this name or slug already exists');\n    }\n\n    // Verify tier exists\n    const tier = await this.sponsorTierModel.findById(createSponsorDto.tier);\n    if (!tier) {\n      throw new NotFoundException(`Sponsor tier with ID ${createSponsorDto.tier} not found`);\n    }\n\n    const createdSponsor = new this.sponsorModel(createSponsorDto);\n    return createdSponsor.save();\n  }\n\n  async findAllSponsors(filterDto: SponsorFilterDto): Promise<PaginatedResponse<SponsorDocument>> {\n    const { page = 1, limit = 20, sort, search, tier, tags, isVisible, standLocation } = filterDto;\n\n    const query: any = { deletedAt: null };\n\n    if (search) {\n      query.$or = [\n        { name: { $regex: search, $options: 'i' } },\n        { 'description.pt-BR': { $regex: search, $options: 'i' } },\n        { 'description.en': { $regex: search, $options: 'i' } },\n      ];\n    }\n\n    if (tier) {\n      query.tier = tier;\n    }\n\n    if (tags && tags.length > 0) {\n      query.tags = { $in: tags };\n    }\n\n    if (typeof isVisible !== 'undefined') {\n      query.isVisible = isVisible;\n    }\n\n    if (standLocation) {\n      query.standLocation = { $regex: standLocation, $options: 'i' };\n    }\n\n    const skip = (page - 1) * limit;\n\n    let sortOptions: any = { 'tier.order': 1, orderInTier: 1 };\n    if (sort) {\n      sortOptions = {};\n      const sortFields = sort.split(',');\n      for (const field of sortFields) {\n        if (field.startsWith('-')) {\n          sortOptions[field.substring(1)] = -1;\n        } else {\n          sortOptions[field] = 1;\n        }\n      }\n    }\n\n    const [data, total] = await Promise.all([\n      this.sponsorModel\n        .find(query)\n        .populate('tier')\n        .sort(sortOptions)\n        .skip(skip)\n        .limit(limit)\n        .exec(),\n      this.sponsorModel.countDocuments(query),\n    ]);\n\n    return {\n      success: true,\n      data,\n      metadata: {\n        total,\n        page,\n        limit,\n        hasNext: skip + data.length < total,\n        hasPrev: page > 1,\n      },\n    };\n  }\n\n  async findSponsorById(id: string): Promise<SponsorDocument> {\n    const sponsor = await this.sponsorModel\n      .findOne({\n        _id: id,\n        deletedAt: null,\n      })\n      .populate('tier')\n      .exec();\n\n    if (!sponsor) {\n      throw new NotFoundException(`Sponsor with ID ${id} not found`);\n    }\n\n    return sponsor;\n  }\n\n  async findSponsorsByTier(): Promise<{ [tierName: string]: SponsorDocument[] }> {\n    const sponsors = await this.sponsorModel\n      .find({\n        isVisible: true,\n        deletedAt: null,\n      })\n      .populate('tier')\n      .sort({ 'tier.order': 1, orderInTier: 1 })\n      .exec();\n\n    const groupedSponsors: { [tierName: string]: SponsorDocument[] } = {};\n\n    sponsors.forEach((sponsor) => {\n      const tierName = (sponsor.tier as any).name;\n      if (!groupedSponsors[tierName]) {\n        groupedSponsors[tierName] = [];\n      }\n      groupedSponsors[tierName].push(sponsor);\n    });\n\n    return groupedSponsors;\n  }\n\n  async updateSponsor(id: string, updateSponsorDto: UpdateSponsorDto): Promise<SponsorDocument> {\n    const sponsor = await this.sponsorModel.findOne({\n      _id: id,\n      deletedAt: null,\n    });\n\n    if (!sponsor) {\n      throw new NotFoundException(`Sponsor with ID ${id} not found`);\n    }\n\n    // Check for name/slug conflicts if being updated\n    if (updateSponsorDto.name || updateSponsorDto.slug) {\n      const conflictQuery: any = {\n        _id: { $ne: id },\n        deletedAt: null,\n        $or: [],\n      };\n\n      if (updateSponsorDto.name) {\n        conflictQuery.$or.push({ name: updateSponsorDto.name });\n      }\n      if (updateSponsorDto.slug) {\n        conflictQuery.$or.push({ slug: updateSponsorDto.slug });\n      }\n\n      const existingSponsor = await this.sponsorModel.findOne(conflictQuery);\n      if (existingSponsor) {\n        throw new ConflictException('Another sponsor with this name or slug already exists');\n      }\n    }\n\n    // Verify tier exists if being updated\n    if (updateSponsorDto.tier) {\n      const tier = await this.sponsorTierModel.findById(updateSponsorDto.tier);\n      if (!tier) {\n        throw new NotFoundException(`Sponsor tier with ID ${updateSponsorDto.tier} not found`);\n      }\n    }\n\n    // Use findByIdAndUpdate to avoid validation issues with required fields\n    const updatedSponsor = await this.sponsorModel.findByIdAndUpdate(\n      id,\n      { $set: updateSponsorDto },\n      {\n        new: true,\n        runValidators: true,\n        context: 'query',\n      },\n    );\n\n    return updatedSponsor;\n  }\n\n  async removeSponsor(id: string, reason?: string, userId?: string): Promise<void> {\n    const sponsor = await this.sponsorModel.findOne({\n      _id: id,\n      deletedAt: null,\n    });\n\n    if (!sponsor) {\n      throw new NotFoundException(`Sponsor with ID ${id} not found`);\n    }\n\n    sponsor.deletedAt = new Date();\n    sponsor.deleteReason = reason;\n\n    if (userId) {\n      sponsor.deletedBy = userId as any;\n    }\n\n    await sponsor.save();\n  }\n\n  async restoreSponsor(id: string): Promise<SponsorDocument> {\n    const sponsor = await this.sponsorModel.findOne({\n      _id: id,\n      deletedAt: { $ne: null },\n    });\n\n    if (!sponsor) {\n      throw new NotFoundException(`Deleted sponsor with ID ${id} not found`);\n    }\n\n    sponsor.deletedAt = null;\n    sponsor.deletedBy = null;\n    sponsor.deleteReason = null;\n\n    return sponsor.save();\n  }\n\n  // SponsorTier CRUD\n  async createTier(createTierDto: CreateSponsorTierDto): Promise<SponsorTierDocument> {\n    const existingTier = await this.sponsorTierModel.findOne({\n      $or: [{ name: createTierDto.name }, { order: createTierDto.order }],\n    });\n\n    if (existingTier) {\n      throw new ConflictException('Sponsor tier with this name or order already exists');\n    }\n\n    const createdTier = new this.sponsorTierModel(createTierDto);\n    return createdTier.save();\n  }\n\n  async findAllTiers(): Promise<SponsorTierDocument[]> {\n    return this.sponsorTierModel.find().sort({ order: 1 }).exec();\n  }\n\n  async findTierById(id: string): Promise<SponsorTierDocument> {\n    const tier = await this.sponsorTierModel.findById(id);\n    if (!tier) {\n      throw new NotFoundException(`Sponsor tier with ID ${id} not found`);\n    }\n    return tier;\n  }\n\n  async updateTier(id: string, updateTierDto: UpdateSponsorTierDto): Promise<SponsorTierDocument> {\n    const tier = await this.sponsorTierModel.findById(id);\n    if (!tier) {\n      throw new NotFoundException(`Sponsor tier with ID ${id} not found`);\n    }\n\n    // Check for conflicts if name or order is being updated\n    if (updateTierDto.name || updateTierDto.order) {\n      const conflictQuery: any = {\n        _id: { $ne: id },\n        $or: [],\n      };\n\n      if (updateTierDto.name) {\n        conflictQuery.$or.push({ name: updateTierDto.name });\n      }\n      if (updateTierDto.order) {\n        conflictQuery.$or.push({ order: updateTierDto.order });\n      }\n\n      const existingTier = await this.sponsorTierModel.findOne(conflictQuery);\n      if (existingTier) {\n        throw new ConflictException('Another tier with this name or order already exists');\n      }\n    }\n\n    Object.assign(tier, updateTierDto);\n    return tier.save();\n  }\n\n  async removeTier(id: string): Promise<void> {\n    // Check if any sponsors are using this tier\n    const sponsorsWithTier = await this.sponsorModel.findOne({\n      tier: id,\n      deletedAt: null,\n    });\n\n    if (sponsorsWithTier) {\n      throw new ConflictException('Cannot delete tier: sponsors are still assigned to this tier');\n    }\n\n    const result = await this.sponsorTierModel.deleteOne({ _id: id });\n    if (result.deletedCount === 0) {\n      throw new NotFoundException(`Sponsor tier with ID ${id} not found`);\n    }\n  }\n\n  async reorderTiers(tierIds: string[]): Promise<void> {\n    // Validate all tiers exist\n    const tiers = await this.sponsorTierModel.find({ _id: { $in: tierIds } });\n\n    if (tiers.length !== tierIds.length) {\n      throw new NotFoundException('One or more tier IDs not found');\n    }\n\n    // First, set all orders to negative values to avoid unique constraint conflicts\n    const tempUpdatePromises = tierIds.map((tierId, index) =>\n      this.sponsorTierModel.updateOne({ _id: tierId }, { $set: { order: -(index + 1) } }),\n    );\n    await Promise.all(tempUpdatePromises);\n\n    // Then update to final positive values\n    const finalUpdatePromises = tierIds.map((tierId, index) =>\n      this.sponsorTierModel.updateOne({ _id: tierId }, { $set: { order: index + 1 } }),\n    );\n    await Promise.all(finalUpdatePromises);\n  }\n\n  async uploadLogo(id: string, file: Express.Multer.File): Promise<string> {\n    // Verify sponsor exists\n    const sponsor = await this.sponsorModel.findOne({\n      _id: id,\n      deletedAt: null,\n    });\n\n    if (!sponsor) {\n      throw new NotFoundException(`Sponsor with ID ${id} not found`);\n    }\n\n    // Upload file to S3\n    const uploadResult = await this.storageService.uploadFile(file, FileCategory.SPONSOR_LOGOS);\n\n    // Update sponsor logoUrl\n    sponsor.logoUrl = uploadResult.url;\n    await sponsor.save();\n\n    return uploadResult.url;\n  }\n\n  // Public methods for mobile app\n  async findPublicSponsors(page = 1, limit = 20): Promise<PaginatedResponse<any>> {\n    const query = { isVisible: true, deletedAt: null };\n    const skip = (page - 1) * limit;\n\n    const [data, total] = await Promise.all([\n      this.sponsorModel\n        .find(query)\n        .populate('tier')\n        .sort({ 'tier.order': 1, orderInTier: 1 })\n        .skip(skip)\n        .limit(limit)\n        .select('-maxPosts -postsUsed -adminEmail -deletedAt -deletedBy -deleteReason -__v')\n        .lean()\n        .exec(),\n      this.sponsorModel.countDocuments(query),\n    ]);\n\n    return {\n      success: true,\n      data,\n      metadata: {\n        total,\n        page,\n        limit,\n        hasNext: skip + data.length < total,\n        hasPrev: page > 1,\n      },\n    };\n  }\n\n  async findPublicSponsorsByTier(): Promise<any[]> {\n    const sponsors = await this.sponsorModel\n      .find({\n        isVisible: true,\n        deletedAt: null,\n      })\n      .populate('tier')\n      .sort({ 'tier.order': 1, orderInTier: 1 })\n      .select('-maxPosts -postsUsed -adminEmail -deletedAt -deletedBy -deleteReason -__v')\n      .lean()\n      .exec();\n\n    // Group sponsors by tier\n    const tierMap = new Map<string, any>();\n\n    sponsors.forEach((sponsor: any) => {\n      const tierId = sponsor.tier._id.toString();\n\n      if (!tierMap.has(tierId)) {\n        tierMap.set(tierId, {\n          tier: {\n            _id: sponsor.tier._id,\n            name: sponsor.tier.name,\n            displayName: sponsor.tier.displayName,\n            order: sponsor.tier.order,\n          },\n          sponsors: [],\n        });\n      }\n\n      tierMap.get(tierId).sponsors.push(sponsor);\n    });\n\n    // Convert map to array and sort by tier order\n    return Array.from(tierMap.values()).sort((a, b) => a.tier.order - b.tier.order);\n  }\n}\n"],"version":3}