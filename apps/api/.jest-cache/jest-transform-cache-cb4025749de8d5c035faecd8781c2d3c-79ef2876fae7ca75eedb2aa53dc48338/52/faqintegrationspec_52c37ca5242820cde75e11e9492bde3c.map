{"file":"/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/tests/integration/faq.integration.spec.ts","mappings":";;;;;AAAA,6CAAsD;AAEtD,+CAAkD;AAClD,0DAAgC;AAChC,iEAA6D;AAC7D,oEAAgE;AAChE,gFAA4E;AAC5E,qCAAyC;AAEzC,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;IACrC,IAAI,GAAqB,CAAC;IAC1B,IAAI,UAAsB,CAAC;IAC3B,IAAI,SAAiB,CAAC;IACtB,IAAI,aAAqB,CAAC;IAE1B,MAAM,QAAQ,GAAG;QACf,GAAG,EAAE,0BAA0B;QAC/B,KAAK,EAAE,mBAAmB;QAC1B,IAAI,EAAE,aAAa;KACpB,CAAC;IAEF,MAAM,oBAAoB,GAAG;QAC3B,IAAI,EAAE;YACJ,OAAO,EAAE,OAAO;YAChB,EAAE,EAAE,SAAS;SACd;QACD,WAAW,EAAE;YACX,OAAO,EAAE,iCAAiC;YAC1C,EAAE,EAAE,mCAAmC;SACxC;QACD,QAAQ,EAAE,CAAC;KACZ,CAAC;IAEF,MAAM,YAAY,GAAG;QACnB,QAAQ,EAAE;YACR,OAAO,EAAE,yBAAyB;YAClC,EAAE,EAAE,qBAAqB;SAC1B;QACD,MAAM,EAAE;YACN,OAAO,EAAE,4DAA4D;YACrE,EAAE,EAAE,mDAAmD;SACxD;QACD,IAAI,EAAE,CAAC,SAAS,EAAE,UAAU,CAAC;KAC9B,CAAC;IAEF,SAAS,CAAC,KAAK,IAAI,EAAE;QACnB,MAAM,aAAa,GAAkB,MAAM,cAAI,CAAC,mBAAmB,CAAC;YAClE,OAAO,EAAE;gBACP,yBAAc,CAAC,OAAO,CACpB,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,IAAI,yCAAyC,CAC7E;gBACD,gCAAc;gBACd,wBAAU;gBACV,sBAAS;aACV;SACF,CAAC,CAAC,OAAO,EAAE,CAAC;QAEb,GAAG,GAAG,aAAa,CAAC,qBAAqB,EAAE,CAAC;QAC5C,UAAU,GAAG,aAAa,CAAC,GAAG,CAAa,gBAAU,CAAC,CAAC;QAEvD,SAAS,GAAG,UAAU,CAAC,IAAI,CAAC;YAC1B,GAAG,EAAE,QAAQ,CAAC,GAAG;YACjB,KAAK,EAAE,QAAQ,CAAC,KAAK;YACrB,IAAI,EAAE,QAAQ,CAAC,IAAI;SACpB,CAAC,CAAC;QAEH,MAAM,GAAG,CAAC,IAAI,EAAE,CAAC;QAEjB,qCAAqC;QACrC,MAAM,gBAAgB,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC,aAAa,EAAE,CAAC;aACxD,IAAI,CAAC,iBAAiB,CAAC;aACvB,GAAG,CAAC,eAAe,EAAE,UAAU,SAAS,EAAE,CAAC;aAC3C,IAAI,CAAC,oBAAoB,CAAC,CAAC;QAC9B,aAAa,GAAG,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;IACjD,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,KAAK,IAAI,EAAE;QAClB,MAAM,GAAG,CAAC,KAAK,EAAE,CAAC;IACpB,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;QAC9B,QAAQ,CAAC,sBAAsB,EAAE,GAAG,EAAE;YACpC,EAAE,CAAC,+CAA+C,EAAE,KAAK,IAAI,EAAE;gBAC7D,MAAM,WAAW,GAAG;oBAClB,IAAI,EAAE;wBACJ,OAAO,EAAE,cAAc;wBACvB,EAAE,EAAE,UAAU;qBACf;oBACD,WAAW,EAAE;wBACX,OAAO,EAAE,8BAA8B;wBACvC,EAAE,EAAE,0BAA0B;qBAC/B;oBACD,QAAQ,EAAE,CAAC;iBACZ,CAAC;gBAEF,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC,aAAa,EAAE,CAAC;qBAChD,IAAI,CAAC,iBAAiB,CAAC;qBACvB,GAAG,CAAC,eAAe,EAAE,UAAU,SAAS,EAAE,CAAC;qBAC3C,IAAI,CAAC,WAAW,CAAC;qBACjB,MAAM,CAAC,GAAG,CAAC,CAAC;gBAEf,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACzC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;gBACjD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;gBAC1D,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;YACjE,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;gBAC5D,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC,aAAa,EAAE,CAAC;qBAC/B,IAAI,CAAC,iBAAiB,CAAC;qBACvB,IAAI,CAAC,oBAAoB,CAAC;qBAC1B,MAAM,CAAC,GAAG,CAAC,CAAC;YACjB,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,wCAAwC,EAAE,KAAK,IAAI,EAAE;gBACtD,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC,aAAa,EAAE,CAAC;qBAC/B,IAAI,CAAC,iBAAiB,CAAC;qBACvB,GAAG,CAAC,eAAe,EAAE,UAAU,SAAS,EAAE,CAAC;qBAC3C,IAAI,CAAC;oBACJ,GAAG,oBAAoB;oBACvB,IAAI,EAAE;wBACJ,OAAO,EAAE,OAAO,EAAE,iBAAiB;wBACnC,EAAE,EAAE,SAAS;qBACd;iBACF,CAAC;qBACD,MAAM,CAAC,GAAG,CAAC,CAAC;YACjB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;YACnC,EAAE,CAAC,oDAAoD,EAAE,KAAK,IAAI,EAAE;gBAClE,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC,aAAa,EAAE,CAAC,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;gBAEvF,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACzC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACrD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YACvD,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,2BAA2B,EAAE,GAAG,EAAE;YACzC,EAAE,CAAC,4CAA4C,EAAE,KAAK,IAAI,EAAE;gBAC1D,MAAM,SAAS,GAAG;oBAChB,QAAQ,EAAE,CAAC;oBACX,WAAW,EAAE;wBACX,OAAO,EAAE,sBAAsB;wBAC/B,EAAE,EAAE,qBAAqB;qBAC1B;iBACF,CAAC;gBAEF,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC,aAAa,EAAE,CAAC;qBAChD,KAAK,CAAC,mBAAmB,aAAa,EAAE,CAAC;qBACzC,GAAG,CAAC,eAAe,EAAE,UAAU,SAAS,EAAE,CAAC;qBAC3C,IAAI,CAAC,SAAS,CAAC;qBACf,MAAM,CAAC,GAAG,CAAC,CAAC;gBAEf,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACzC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;gBAC7D,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;YACxE,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;gBAC5D,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC,aAAa,EAAE,CAAC;qBAC/B,KAAK,CAAC,mBAAmB,aAAa,EAAE,CAAC;qBACzC,IAAI,CAAC,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC;qBACtB,MAAM,CAAC,GAAG,CAAC,CAAC;YACjB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,WAAW,EAAE,GAAG,EAAE;QACzB,QAAQ,CAAC,UAAU,EAAE,GAAG,EAAE;YACxB,EAAE,CAAC,oDAAoD,EAAE,KAAK,IAAI,EAAE;gBAClE,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC,aAAa,EAAE,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;gBAE5E,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;gBACtD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;gBAC7C,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;gBACjD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;gBACvD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;gBACtD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;YACzD,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,wCAAwC,EAAE,KAAK,IAAI,EAAE;gBACtD,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC,aAAa,EAAE,CAAC;qBAChD,GAAG,CAAC,iBAAiB,aAAa,EAAE,CAAC;qBACrC,MAAM,CAAC,GAAG,CAAC,CAAC;gBAEf,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC3C,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,sCAAsC,EAAE,KAAK,IAAI,EAAE;gBACpD,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC,aAAa,EAAE,CAAC,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;gBAE5F,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC3C,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,mCAAmC,EAAE,KAAK,IAAI,EAAE;gBACjD,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC,aAAa,EAAE,CAAC,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;gBAE3F,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBAC5C,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC/C,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,WAAW,EAAE,GAAG,EAAE;YACzB,EAAE,CAAC,sCAAsC,EAAE,KAAK,IAAI,EAAE;gBACpD,MAAM,MAAM,GAAG;oBACb,GAAG,YAAY;oBACf,QAAQ,EAAE,aAAa;iBACxB,CAAC;gBAEF,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC,aAAa,EAAE,CAAC;qBAChD,IAAI,CAAC,MAAM,CAAC;qBACZ,GAAG,CAAC,eAAe,EAAE,UAAU,SAAS,EAAE,CAAC;qBAC3C,IAAI,CAAC,MAAM,CAAC;qBACZ,MAAM,CAAC,GAAG,CAAC,CAAC;gBAEf,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACzC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;gBACjD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;gBAC7D,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;gBACzD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;gBAC1D,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC/C,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;gBAC5D,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC,aAAa,EAAE,CAAC;qBAC/B,IAAI,CAAC,MAAM,CAAC;qBACZ,IAAI,CAAC;oBACJ,GAAG,YAAY;oBACf,QAAQ,EAAE,aAAa;iBACxB,CAAC;qBACD,MAAM,CAAC,GAAG,CAAC,CAAC;YACjB,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,iCAAiC,EAAE,KAAK,IAAI,EAAE;gBAC/C,MAAM,UAAU,GAAG;oBACjB,QAAQ,EAAE;wBACR,OAAO,EAAE,EAAE,EAAE,iBAAiB;qBAC/B;oBACD,QAAQ,EAAE,aAAa;iBACxB,CAAC;gBAEF,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC,aAAa,EAAE,CAAC;qBAC/B,IAAI,CAAC,MAAM,CAAC;qBACZ,GAAG,CAAC,eAAe,EAAE,UAAU,SAAS,EAAE,CAAC;qBAC3C,IAAI,CAAC,UAAU,CAAC;qBAChB,MAAM,CAAC,GAAG,CAAC,CAAC;YACjB,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;gBAC9C,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC,aAAa,EAAE,CAAC;qBAC/B,IAAI,CAAC,MAAM,CAAC;qBACZ,GAAG,CAAC,eAAe,EAAE,UAAU,SAAS,EAAE,CAAC;qBAC3C,IAAI,CAAC;oBACJ,GAAG,YAAY;oBACf,QAAQ,EAAE,0BAA0B,EAAE,wBAAwB;iBAC/D,CAAC;qBACD,MAAM,CAAC,GAAG,CAAC,CAAC;YACjB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;YAC5B,IAAI,KAAa,CAAC;YAElB,SAAS,CAAC,KAAK,IAAI,EAAE;gBACnB,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC,aAAa,EAAE,CAAC;qBAChD,IAAI,CAAC,MAAM,CAAC;qBACZ,GAAG,CAAC,eAAe,EAAE,UAAU,SAAS,EAAE,CAAC;qBAC3C,IAAI,CAAC;oBACJ,GAAG,YAAY;oBACf,QAAQ,EAAE;wBACR,OAAO,EAAE,kCAAkC;wBAC3C,EAAE,EAAE,2BAA2B;qBAChC;oBACD,QAAQ,EAAE,aAAa;iBACxB,CAAC,CAAC;gBACL,KAAK,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;YACjC,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,4EAA4E,EAAE,KAAK,IAAI,EAAE;gBAC1F,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC,aAAa,EAAE,CAAC,CAAC,GAAG,CAAC,QAAQ,KAAK,EAAE,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;gBAErF,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACzC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;gBACxD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;gBACtD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;gBACpD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;gBACtD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBAE7C,6CAA6C;gBAC7C,MAAM,cAAc,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC,aAAa,EAAE,CAAC,CAAC,GAAG,CAAC,QAAQ,KAAK,EAAE,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;gBAE3F,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACrD,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,wCAAwC,EAAE,KAAK,IAAI,EAAE;gBACtD,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC,aAAa,EAAE,CAAC,CAAC,GAAG,CAAC,+BAA+B,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YACtF,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;YAC9B,IAAI,KAAa,CAAC;YAElB,SAAS,CAAC,KAAK,IAAI,EAAE;gBACnB,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC,aAAa,EAAE,CAAC;qBAChD,IAAI,CAAC,MAAM,CAAC;qBACZ,GAAG,CAAC,eAAe,EAAE,UAAU,SAAS,EAAE,CAAC;qBAC3C,IAAI,CAAC;oBACJ,GAAG,YAAY;oBACf,QAAQ,EAAE;wBACR,OAAO,EAAE,qCAAqC;wBAC9C,EAAE,EAAE,2BAA2B;qBAChC;oBACD,QAAQ,EAAE,aAAa;iBACxB,CAAC,CAAC;gBACL,KAAK,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;YACjC,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;gBAC9C,MAAM,SAAS,GAAG;oBAChB,QAAQ,EAAE,GAAG;oBACb,IAAI,EAAE,CAAC,SAAS,EAAE,MAAM,CAAC;iBAC1B,CAAC;gBAEF,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC,aAAa,EAAE,CAAC;qBAChD,KAAK,CAAC,QAAQ,KAAK,EAAE,CAAC;qBACtB,GAAG,CAAC,eAAe,EAAE,UAAU,SAAS,EAAE,CAAC;qBAC3C,IAAI,CAAC,SAAS,CAAC;qBACf,MAAM,CAAC,GAAG,CAAC,CAAC;gBAEf,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACzC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;gBAC7D,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YAC1D,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;gBAC5D,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC,aAAa,EAAE,CAAC;qBAC/B,KAAK,CAAC,QAAQ,KAAK,EAAE,CAAC;qBACtB,IAAI,CAAC,EAAE,QAAQ,EAAE,GAAG,EAAE,CAAC;qBACvB,MAAM,CAAC,GAAG,CAAC,CAAC;YACjB,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,wCAAwC,EAAE,KAAK,IAAI,EAAE;gBACtD,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC,aAAa,EAAE,CAAC;qBAC/B,KAAK,CAAC,+BAA+B,CAAC;qBACtC,GAAG,CAAC,eAAe,EAAE,UAAU,SAAS,EAAE,CAAC;qBAC3C,IAAI,CAAC,EAAE,QAAQ,EAAE,GAAG,EAAE,CAAC;qBACvB,MAAM,CAAC,GAAG,CAAC,CAAC;YACjB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;YAC/B,IAAI,KAAa,CAAC;YAElB,SAAS,CAAC,KAAK,IAAI,EAAE;gBACnB,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC,aAAa,EAAE,CAAC;qBAChD,IAAI,CAAC,MAAM,CAAC;qBACZ,GAAG,CAAC,eAAe,EAAE,UAAU,SAAS,EAAE,CAAC;qBAC3C,IAAI,CAAC;oBACJ,GAAG,YAAY;oBACf,QAAQ,EAAE;wBACR,OAAO,EAAE,kCAAkC;wBAC3C,EAAE,EAAE,2BAA2B;qBAChC;oBACD,QAAQ,EAAE,aAAa;iBACxB,CAAC,CAAC;gBACL,KAAK,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;YACjC,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;gBACnD,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC,aAAa,EAAE,CAAC;qBAChD,MAAM,CAAC,QAAQ,KAAK,EAAE,CAAC;qBACvB,GAAG,CAAC,eAAe,EAAE,UAAU,SAAS,EAAE,CAAC;qBAC3C,IAAI,CAAC,EAAE,MAAM,EAAE,eAAe,EAAE,CAAC;qBACjC,MAAM,CAAC,GAAG,CAAC,CAAC;gBAEf,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAEzC,yDAAyD;gBACzD,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC,aAAa,EAAE,CAAC,CAAC,GAAG,CAAC,QAAQ,KAAK,EAAE,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YACtE,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;gBAC5D,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC,aAAa,EAAE,CAAC,CAAC,MAAM,CAAC,QAAQ,KAAK,EAAE,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YACzE,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,wCAAwC,EAAE,KAAK,IAAI,EAAE;gBACtD,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC,aAAa,EAAE,CAAC;qBAC/B,MAAM,CAAC,+BAA+B,CAAC;qBACvC,GAAG,CAAC,eAAe,EAAE,UAAU,SAAS,EAAE,CAAC;qBAC3C,MAAM,CAAC,GAAG,CAAC,CAAC;YACjB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;YACrC,IAAI,KAAa,CAAC;YAElB,SAAS,CAAC,KAAK,IAAI,EAAE;gBACnB,2BAA2B;gBAC3B,MAAM,cAAc,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC,aAAa,EAAE,CAAC;qBACtD,IAAI,CAAC,MAAM,CAAC;qBACZ,GAAG,CAAC,eAAe,EAAE,UAAU,SAAS,EAAE,CAAC;qBAC3C,IAAI,CAAC;oBACJ,GAAG,YAAY;oBACf,QAAQ,EAAE;wBACR,OAAO,EAAE,qCAAqC;wBAC9C,EAAE,EAAE,4BAA4B;qBACjC;oBACD,QAAQ,EAAE,aAAa;iBACxB,CAAC,CAAC;gBACL,KAAK,GAAG,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;gBAErC,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC,aAAa,EAAE,CAAC;qBAC/B,MAAM,CAAC,QAAQ,KAAK,EAAE,CAAC;qBACvB,GAAG,CAAC,eAAe,EAAE,UAAU,SAAS,EAAE,CAAC;qBAC3C,IAAI,CAAC,EAAE,MAAM,EAAE,sBAAsB,EAAE,CAAC,CAAC;YAC9C,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;gBAC5D,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC,aAAa,EAAE,CAAC;qBAChD,IAAI,CAAC,QAAQ,KAAK,UAAU,CAAC;qBAC7B,GAAG,CAAC,eAAe,EAAE,UAAU,SAAS,EAAE,CAAC;qBAC3C,MAAM,CAAC,GAAG,CAAC,CAAC;gBAEf,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAEzC,qDAAqD;gBACrD,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC,aAAa,EAAE,CAAC,CAAC,GAAG,CAAC,QAAQ,KAAK,EAAE,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YACtE,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;gBAC5D,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC,aAAa,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,KAAK,UAAU,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC/E,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;YAC/B,SAAS,CAAC,KAAK,IAAI,EAAE;gBACnB,qCAAqC;gBACrC,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC,aAAa,EAAE,CAAC;qBAC/B,IAAI,CAAC,MAAM,CAAC;qBACZ,GAAG,CAAC,eAAe,EAAE,UAAU,SAAS,EAAE,CAAC;qBAC3C,IAAI,CAAC;oBACJ,QAAQ,EAAE;wBACR,OAAO,EAAE,8BAA8B;wBACvC,EAAE,EAAE,sCAAsC;qBAC3C;oBACD,MAAM,EAAE;wBACN,OAAO,EAAE,+DAA+D;wBACxE,EAAE,EAAE,4DAA4D;qBACjE;oBACD,QAAQ,EAAE,aAAa;oBACvB,IAAI,EAAE,CAAC,UAAU,EAAE,OAAO,EAAE,SAAS,CAAC;iBACvC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;gBAC5D,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC,aAAa,EAAE,CAAC;qBAChD,GAAG,CAAC,wBAAwB,CAAC;qBAC7B,MAAM,CAAC,GAAG,CAAC,CAAC;gBAEf,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACzC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACvD,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,4BAA4B,EAAE,KAAK,IAAI,EAAE;gBAC1C,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC,aAAa,EAAE,CAAC;qBAChD,GAAG,CAAC,wBAAwB,CAAC;qBAC7B,MAAM,CAAC,GAAG,CAAC,CAAC;gBAEf,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC3C,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,+BAA+B,EAAE,GAAG,EAAE;YAC7C,SAAS,CAAC,KAAK,IAAI,EAAE;gBACnB,mCAAmC;gBACnC,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC,aAAa,EAAE,CAAC;qBAC/B,IAAI,CAAC,MAAM,CAAC;qBACZ,GAAG,CAAC,eAAe,EAAE,UAAU,SAAS,EAAE,CAAC;qBAC3C,IAAI,CAAC;oBACJ,QAAQ,EAAE;wBACR,OAAO,EAAE,mCAAmC;wBAC5C,EAAE,EAAE,6BAA6B;qBAClC;oBACD,MAAM,EAAE;wBACN,OAAO,EAAE,mCAAmC;wBAC5C,EAAE,EAAE,2BAA2B;qBAChC;oBACD,QAAQ,EAAE,aAAa;oBACvB,IAAI,EAAE,CAAC,mBAAmB,CAAC;iBAC5B,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,4DAA4D,EAAE,KAAK,IAAI,EAAE;gBAC1E,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC,aAAa,EAAE,CAAC;qBAChD,GAAG,CAAC,iBAAiB,aAAa,EAAE,CAAC;qBACrC,MAAM,CAAC,GAAG,CAAC,CAAC;gBAEf,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACzC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAErD,4DAA4D;gBAC5D,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,GAAQ,EAAE,EAAE;oBACtC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;gBAC3C,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,4BAA4B,EAAE,GAAG,EAAE;YAC1C,IAAI,eAAuB,CAAC;YAE5B,SAAS,CAAC,KAAK,IAAI,EAAE;gBACnB,iCAAiC;gBACjC,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC,aAAa,EAAE,CAAC;qBAChD,IAAI,CAAC,iBAAiB,CAAC;qBACvB,GAAG,CAAC,eAAe,EAAE,UAAU,SAAS,EAAE,CAAC;qBAC3C,IAAI,CAAC;oBACJ,IAAI,EAAE;wBACJ,OAAO,EAAE,iBAAiB;wBAC1B,EAAE,EAAE,gBAAgB;qBACrB;oBACD,WAAW,EAAE;wBACX,OAAO,EAAE,yBAAyB;wBAClC,EAAE,EAAE,4BAA4B;qBACjC;oBACD,QAAQ,EAAE,GAAG;iBACd,CAAC,CAAC;gBACL,eAAe,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;YAC3C,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,+CAA+C,EAAE,KAAK,IAAI,EAAE;gBAC7D,MAAM,QAAQ,GAAG,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC,aAAa,EAAE,CAAC;qBAChD,MAAM,CAAC,mBAAmB,eAAe,EAAE,CAAC;qBAC5C,GAAG,CAAC,eAAe,EAAE,UAAU,SAAS,EAAE,CAAC;qBAC3C,MAAM,CAAC,GAAG,CAAC,CAAC;gBAEf,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC3C,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;gBAC5D,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC,aAAa,EAAE,CAAC;qBAC/B,MAAM,CAAC,mBAAmB,aAAa,EAAE,CAAC;qBAC1C,GAAG,CAAC,eAAe,EAAE,UAAU,SAAS,EAAE,CAAC;qBAC3C,MAAM,CAAC,GAAG,CAAC,CAAC;YACjB,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;gBAC5D,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC,aAAa,EAAE,CAAC,CAAC,MAAM,CAAC,mBAAmB,eAAe,EAAE,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC9F,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/tests/integration/faq.integration.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { INestApplication } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport request from 'supertest';\nimport { FaqModule } from '../../src/modules/faq/faq.module';\nimport { AuthModule } from '../../src/modules/auth/auth.module';\nimport { DatabaseModule } from '../../src/modules/database/database.module';\nimport { JwtService } from '@nestjs/jwt';\n\ndescribe('FAQ Integration Tests', () => {\n  let app: INestApplication;\n  let jwtService: JwtService;\n  let authToken: string;\n  let faqCategoryId: string;\n\n  const testUser = {\n    _id: '507f1f77bcf86cd799439020',\n    email: 'admin@vtexday.com',\n    role: 'super_admin',\n  };\n\n  const createFaqCategoryDto = {\n    name: {\n      'pt-BR': 'Geral',\n      en: 'General',\n    },\n    description: {\n      'pt-BR': 'Perguntas gerais sobre o evento',\n      en: 'General questions about the event',\n    },\n    priority: 1,\n  };\n\n  const createFaqDto = {\n    question: {\n      'pt-BR': 'Como comprar ingressos?',\n      en: 'How to buy tickets?',\n    },\n    answer: {\n      'pt-BR': 'Você pode comprar ingressos através do nosso site oficial.',\n      en: 'You can buy tickets through our official website.',\n    },\n    tags: ['tickets', 'purchase'],\n  };\n\n  beforeAll(async () => {\n    const moduleFixture: TestingModule = await Test.createTestingModule({\n      imports: [\n        MongooseModule.forRoot(\n          process.env['MONGODB_TEST_URI'] || 'mongodb://localhost:27017/vtex-day-test',\n        ),\n        DatabaseModule,\n        AuthModule,\n        FaqModule,\n      ],\n    }).compile();\n\n    app = moduleFixture.createNestApplication();\n    jwtService = moduleFixture.get<JwtService>(JwtService);\n\n    authToken = jwtService.sign({\n      sub: testUser._id,\n      email: testUser.email,\n      role: testUser.role,\n    });\n\n    await app.init();\n\n    // Create an FAQ category for testing\n    const categoryResponse = await request(app.getHttpServer())\n      .post('/faq/categories')\n      .set('Authorization', `Bearer ${authToken}`)\n      .send(createFaqCategoryDto);\n    faqCategoryId = categoryResponse.body.data._id;\n  });\n\n  afterAll(async () => {\n    await app.close();\n  });\n\n  describe('FAQ Categories', () => {\n    describe('POST /faq/categories', () => {\n      it('should create a new FAQ category (admin only)', async () => {\n        const categoryDto = {\n          name: {\n            'pt-BR': 'Palestrantes',\n            en: 'Speakers',\n          },\n          description: {\n            'pt-BR': 'Perguntas sobre palestrantes',\n            en: 'Questions about speakers',\n          },\n          priority: 2,\n        };\n\n        const response = await request(app.getHttpServer())\n          .post('/faq/categories')\n          .set('Authorization', `Bearer ${authToken}`)\n          .send(categoryDto)\n          .expect(201);\n\n        expect(response.body.success).toBe(true);\n        expect(response.body.data).toHaveProperty('_id');\n        expect(response.body.data.name).toEqual(categoryDto.name);\n        expect(response.body.data.priority).toBe(categoryDto.priority);\n      });\n\n      it('should reject request without authentication', async () => {\n        await request(app.getHttpServer())\n          .post('/faq/categories')\n          .send(createFaqCategoryDto)\n          .expect(401);\n      });\n\n      it('should reject duplicate category names', async () => {\n        await request(app.getHttpServer())\n          .post('/faq/categories')\n          .set('Authorization', `Bearer ${authToken}`)\n          .send({\n            ...createFaqCategoryDto,\n            name: {\n              'pt-BR': 'Geral', // Already exists\n              en: 'General',\n            },\n          })\n          .expect(409);\n      });\n    });\n\n    describe('GET /faq/categories', () => {\n      it('should return all FAQ categories (public endpoint)', async () => {\n        const response = await request(app.getHttpServer()).get('/faq/categories').expect(200);\n\n        expect(response.body.success).toBe(true);\n        expect(Array.isArray(response.body.data)).toBe(true);\n        expect(response.body.data.length).toBeGreaterThan(0);\n      });\n    });\n\n    describe('PATCH /faq/categories/:id', () => {\n      it('should update an FAQ category (admin only)', async () => {\n        const updateDto = {\n          priority: 5,\n          description: {\n            'pt-BR': 'Descrição atualizada',\n            en: 'Updated description',\n          },\n        };\n\n        const response = await request(app.getHttpServer())\n          .patch(`/faq/categories/${faqCategoryId}`)\n          .set('Authorization', `Bearer ${authToken}`)\n          .send(updateDto)\n          .expect(200);\n\n        expect(response.body.success).toBe(true);\n        expect(response.body.data.priority).toBe(updateDto.priority);\n        expect(response.body.data.description).toEqual(updateDto.description);\n      });\n\n      it('should reject request without authentication', async () => {\n        await request(app.getHttpServer())\n          .patch(`/faq/categories/${faqCategoryId}`)\n          .send({ priority: 10 })\n          .expect(401);\n      });\n    });\n  });\n\n  describe('FAQ Items', () => {\n    describe('GET /faq', () => {\n      it('should return paginated FAQ list (public endpoint)', async () => {\n        const response = await request(app.getHttpServer()).get('/faq').expect(200);\n\n        expect(response.body).toHaveProperty('success', true);\n        expect(response.body).toHaveProperty('data');\n        expect(response.body).toHaveProperty('metadata');\n        expect(response.body.metadata).toHaveProperty('total');\n        expect(response.body.metadata).toHaveProperty('page');\n        expect(response.body.metadata).toHaveProperty('limit');\n      });\n\n      it('should apply category filter correctly', async () => {\n        const response = await request(app.getHttpServer())\n          .get(`/faq?category=${faqCategoryId}`)\n          .expect(200);\n\n        expect(response.body.success).toBe(true);\n      });\n\n      it('should apply search filter correctly', async () => {\n        const response = await request(app.getHttpServer()).get('/faq?search=ingresso').expect(200);\n\n        expect(response.body.success).toBe(true);\n      });\n\n      it('should apply pagination correctly', async () => {\n        const response = await request(app.getHttpServer()).get('/faq?page=1&limit=5').expect(200);\n\n        expect(response.body.metadata.page).toBe(1);\n        expect(response.body.metadata.limit).toBe(5);\n      });\n    });\n\n    describe('POST /faq', () => {\n      it('should create a new FAQ (admin only)', async () => {\n        const faqDto = {\n          ...createFaqDto,\n          category: faqCategoryId,\n        };\n\n        const response = await request(app.getHttpServer())\n          .post('/faq')\n          .set('Authorization', `Bearer ${authToken}`)\n          .send(faqDto)\n          .expect(201);\n\n        expect(response.body.success).toBe(true);\n        expect(response.body.data).toHaveProperty('_id');\n        expect(response.body.data.question).toEqual(faqDto.question);\n        expect(response.body.data.answer).toEqual(faqDto.answer);\n        expect(response.body.data.category).toBe(faqDto.category);\n        expect(response.body.data.viewCount).toBe(0);\n      });\n\n      it('should reject request without authentication', async () => {\n        await request(app.getHttpServer())\n          .post('/faq')\n          .send({\n            ...createFaqDto,\n            category: faqCategoryId,\n          })\n          .expect(401);\n      });\n\n      it('should validate required fields', async () => {\n        const invalidDto = {\n          question: {\n            'pt-BR': '', // Empty question\n          },\n          category: faqCategoryId,\n        };\n\n        await request(app.getHttpServer())\n          .post('/faq')\n          .set('Authorization', `Bearer ${authToken}`)\n          .send(invalidDto)\n          .expect(400);\n      });\n\n      it('should reject invalid category', async () => {\n        await request(app.getHttpServer())\n          .post('/faq')\n          .set('Authorization', `Bearer ${authToken}`)\n          .send({\n            ...createFaqDto,\n            category: '507f1f77bcf86cd799439999', // Non-existent category\n          })\n          .expect(404);\n      });\n    });\n\n    describe('GET /faq/:id', () => {\n      let faqId: string;\n\n      beforeAll(async () => {\n        const response = await request(app.getHttpServer())\n          .post('/faq')\n          .set('Authorization', `Bearer ${authToken}`)\n          .send({\n            ...createFaqDto,\n            question: {\n              'pt-BR': 'Pergunta para teste de detalhes?',\n              en: 'Question for detail test?',\n            },\n            category: faqCategoryId,\n          });\n        faqId = response.body.data._id;\n      });\n\n      it('should return FAQ details by id and increment view count (public endpoint)', async () => {\n        const response = await request(app.getHttpServer()).get(`/faq/${faqId}`).expect(200);\n\n        expect(response.body.success).toBe(true);\n        expect(response.body.data).toHaveProperty('_id', faqId);\n        expect(response.body.data).toHaveProperty('question');\n        expect(response.body.data).toHaveProperty('answer');\n        expect(response.body.data).toHaveProperty('category');\n        expect(response.body.data.viewCount).toBe(1);\n\n        // Second request should increment view count\n        const secondResponse = await request(app.getHttpServer()).get(`/faq/${faqId}`).expect(200);\n\n        expect(secondResponse.body.data.viewCount).toBe(2);\n      });\n\n      it('should return 404 for non-existent FAQ', async () => {\n        await request(app.getHttpServer()).get('/faq/507f1f77bcf86cd799439999').expect(404);\n      });\n    });\n\n    describe('PATCH /faq/:id', () => {\n      let faqId: string;\n\n      beforeAll(async () => {\n        const response = await request(app.getHttpServer())\n          .post('/faq')\n          .set('Authorization', `Bearer ${authToken}`)\n          .send({\n            ...createFaqDto,\n            question: {\n              'pt-BR': 'Pergunta para teste de atualização?',\n              en: 'Question for update test?',\n            },\n            category: faqCategoryId,\n          });\n        faqId = response.body.data._id;\n      });\n\n      it('should update FAQ (admin only)', async () => {\n        const updateDto = {\n          priority: 200,\n          tags: ['updated', 'test'],\n        };\n\n        const response = await request(app.getHttpServer())\n          .patch(`/faq/${faqId}`)\n          .set('Authorization', `Bearer ${authToken}`)\n          .send(updateDto)\n          .expect(200);\n\n        expect(response.body.success).toBe(true);\n        expect(response.body.data.priority).toBe(updateDto.priority);\n        expect(response.body.data.tags).toEqual(updateDto.tags);\n      });\n\n      it('should reject request without authentication', async () => {\n        await request(app.getHttpServer())\n          .patch(`/faq/${faqId}`)\n          .send({ priority: 500 })\n          .expect(401);\n      });\n\n      it('should return 404 for non-existent FAQ', async () => {\n        await request(app.getHttpServer())\n          .patch('/faq/507f1f77bcf86cd799439999')\n          .set('Authorization', `Bearer ${authToken}`)\n          .send({ priority: 300 })\n          .expect(404);\n      });\n    });\n\n    describe('DELETE /faq/:id', () => {\n      let faqId: string;\n\n      beforeAll(async () => {\n        const response = await request(app.getHttpServer())\n          .post('/faq')\n          .set('Authorization', `Bearer ${authToken}`)\n          .send({\n            ...createFaqDto,\n            question: {\n              'pt-BR': 'Pergunta para teste de exclusão?',\n              en: 'Question for delete test?',\n            },\n            category: faqCategoryId,\n          });\n        faqId = response.body.data._id;\n      });\n\n      it('should soft delete FAQ (admin only)', async () => {\n        const response = await request(app.getHttpServer())\n          .delete(`/faq/${faqId}`)\n          .set('Authorization', `Bearer ${authToken}`)\n          .send({ reason: 'Test deletion' })\n          .expect(200);\n\n        expect(response.body.success).toBe(true);\n\n        // Verify FAQ is no longer accessible via public endpoint\n        await request(app.getHttpServer()).get(`/faq/${faqId}`).expect(404);\n      });\n\n      it('should reject request without authentication', async () => {\n        await request(app.getHttpServer()).delete(`/faq/${faqId}`).expect(401);\n      });\n\n      it('should return 404 for non-existent FAQ', async () => {\n        await request(app.getHttpServer())\n          .delete('/faq/507f1f77bcf86cd799439999')\n          .set('Authorization', `Bearer ${authToken}`)\n          .expect(404);\n      });\n    });\n\n    describe('POST /faq/:id/restore', () => {\n      let faqId: string;\n\n      beforeAll(async () => {\n        // Create and delete an FAQ\n        const createResponse = await request(app.getHttpServer())\n          .post('/faq')\n          .set('Authorization', `Bearer ${authToken}`)\n          .send({\n            ...createFaqDto,\n            question: {\n              'pt-BR': 'Pergunta para teste de restauração?',\n              en: 'Question for restore test?',\n            },\n            category: faqCategoryId,\n          });\n        faqId = createResponse.body.data._id;\n\n        await request(app.getHttpServer())\n          .delete(`/faq/${faqId}`)\n          .set('Authorization', `Bearer ${authToken}`)\n          .send({ reason: 'Test for restoration' });\n      });\n\n      it('should restore soft-deleted FAQ (admin only)', async () => {\n        const response = await request(app.getHttpServer())\n          .post(`/faq/${faqId}/restore`)\n          .set('Authorization', `Bearer ${authToken}`)\n          .expect(200);\n\n        expect(response.body.success).toBe(true);\n\n        // Verify FAQ is accessible again via public endpoint\n        await request(app.getHttpServer()).get(`/faq/${faqId}`).expect(200);\n      });\n\n      it('should reject request without authentication', async () => {\n        await request(app.getHttpServer()).post(`/faq/${faqId}/restore`).expect(401);\n      });\n    });\n\n    describe('GET /faq/search', () => {\n      beforeAll(async () => {\n        // Create FAQ with searchable content\n        await request(app.getHttpServer())\n          .post('/faq')\n          .set('Authorization', `Bearer ${authToken}`)\n          .send({\n            question: {\n              'pt-BR': 'Onde fica o evento VTEX Day?',\n              en: 'Where is the VTEX Day event located?',\n            },\n            answer: {\n              'pt-BR': 'O evento será realizado no Centro de Convenções de São Paulo.',\n              en: 'The event will be held at the São Paulo Convention Center.',\n            },\n            category: faqCategoryId,\n            tags: ['location', 'venue', 'address'],\n          });\n      });\n\n      it('should search FAQs by text (public endpoint)', async () => {\n        const response = await request(app.getHttpServer())\n          .get('/faq/search?q=VTEX Day')\n          .expect(200);\n\n        expect(response.body.success).toBe(true);\n        expect(Array.isArray(response.body.data)).toBe(true);\n      });\n\n      it('should search FAQs by tags', async () => {\n        const response = await request(app.getHttpServer())\n          .get('/faq/search?q=location')\n          .expect(200);\n\n        expect(response.body.success).toBe(true);\n      });\n    });\n\n    describe('GET /faq/category/:categoryId', () => {\n      beforeAll(async () => {\n        // Create FAQ for specific category\n        await request(app.getHttpServer())\n          .post('/faq')\n          .set('Authorization', `Bearer ${authToken}`)\n          .send({\n            question: {\n              'pt-BR': 'Pergunta específica da categoria?',\n              en: 'Category specific question?',\n            },\n            answer: {\n              'pt-BR': 'Resposta específica da categoria.',\n              en: 'Category specific answer.',\n            },\n            category: faqCategoryId,\n            tags: ['category-specific'],\n          });\n      });\n\n      it('should return FAQs for specific category (public endpoint)', async () => {\n        const response = await request(app.getHttpServer())\n          .get(`/faq/category/${faqCategoryId}`)\n          .expect(200);\n\n        expect(response.body.success).toBe(true);\n        expect(Array.isArray(response.body.data)).toBe(true);\n\n        // All returned FAQs should belong to the specified category\n        response.body.data.forEach((faq: any) => {\n          expect(faq.category).toBe(faqCategoryId);\n        });\n      });\n    });\n\n    describe('DELETE /faq/categories/:id', () => {\n      let emptyCategoryId: string;\n\n      beforeAll(async () => {\n        // Create a category without FAQs\n        const response = await request(app.getHttpServer())\n          .post('/faq/categories')\n          .set('Authorization', `Bearer ${authToken}`)\n          .send({\n            name: {\n              'pt-BR': 'Categoria Vazia',\n              en: 'Empty Category',\n            },\n            description: {\n              'pt-BR': 'Categoria sem perguntas',\n              en: 'Category without questions',\n            },\n            priority: 100,\n          });\n        emptyCategoryId = response.body.data._id;\n      });\n\n      it('should delete empty FAQ category (admin only)', async () => {\n        const response = await request(app.getHttpServer())\n          .delete(`/faq/categories/${emptyCategoryId}`)\n          .set('Authorization', `Bearer ${authToken}`)\n          .expect(200);\n\n        expect(response.body.success).toBe(true);\n      });\n\n      it('should reject deletion of category with FAQs', async () => {\n        await request(app.getHttpServer())\n          .delete(`/faq/categories/${faqCategoryId}`)\n          .set('Authorization', `Bearer ${authToken}`)\n          .expect(409);\n      });\n\n      it('should reject request without authentication', async () => {\n        await request(app.getHttpServer()).delete(`/faq/categories/${emptyCategoryId}`).expect(401);\n      });\n    });\n  });\n});\n"],"version":3}