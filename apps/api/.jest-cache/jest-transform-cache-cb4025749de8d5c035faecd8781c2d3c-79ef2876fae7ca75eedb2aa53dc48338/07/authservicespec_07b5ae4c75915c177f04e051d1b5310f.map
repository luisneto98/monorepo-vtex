{"file":"/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/tests/unit/modules/auth/auth.service.spec.ts","mappings":"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","names":[],"sources":["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/tests/unit/modules/auth/auth.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { UnauthorizedException } from '@nestjs/common';\nimport * as bcrypt from 'bcrypt';\nimport { AuthService } from '../../../../src/modules/auth/auth.service';\nimport { UsersService } from '../../../../src/modules/users/users.service';\n\ndescribe('AuthService', () => {\n  let service: AuthService;\n\n  const mockUser = {\n    _id: '507f1f77bcf86cd799439011',\n    email: 'admin@example.com',\n    password: '$2b$10$hashedPasswordHere',\n    role: 'super_admin',\n    name: 'Admin User',\n    isActive: true,\n    refreshToken: '$2b$10$hashedRefreshTokenHere',\n    toObject: function () {\n      return { ...this };\n    },\n  };\n\n  const mockUsersService = {\n    findByEmail: jest.fn(),\n    findById: jest.fn(),\n    updateRefreshToken: jest.fn(),\n    create: jest.fn(),\n  };\n\n  const mockJwtService = {\n    signAsync: jest.fn(),\n    verifyAsync: jest.fn(),\n  };\n\n  const mockConfigService = {\n    get: jest.fn((key: string) => {\n      const config: Record<string, string> = {\n        'jwt.secret': 'test-secret',\n        'jwt.accessExpiration': '15m',\n        'jwt.refreshExpiration': '7d',\n        'jwt.refreshSecret': 'test-refresh-secret',\n      };\n      return config[key];\n    }),\n  };\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        AuthService,\n        {\n          provide: UsersService,\n          useValue: mockUsersService,\n        },\n        {\n          provide: JwtService,\n          useValue: mockJwtService,\n        },\n        {\n          provide: ConfigService,\n          useValue: mockConfigService,\n        },\n      ],\n    }).compile();\n\n    service = module.get<AuthService>(AuthService);\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('validateUser', () => {\n    it('should return user data when credentials are valid', async () => {\n      mockUsersService.findByEmail.mockResolvedValue(mockUser);\n      jest.spyOn(bcrypt, 'compare').mockImplementation(() => Promise.resolve(true));\n\n      const result = await service.validateUser('admin@example.com', 'password123');\n\n      expect(result).toBeDefined();\n      expect(result.email).toBe('admin@example.com');\n      expect(result.password).toBeUndefined();\n      expect(result.refreshToken).toBeUndefined();\n    });\n\n    it('should throw UnauthorizedException when user not found', async () => {\n      mockUsersService.findByEmail.mockResolvedValue(null);\n\n      await expect(service.validateUser('nonexistent@example.com', 'password123')).rejects.toThrow(\n        UnauthorizedException,\n      );\n    });\n\n    it('should throw UnauthorizedException when user is inactive', async () => {\n      mockUsersService.findByEmail.mockResolvedValue({ ...mockUser, isActive: false });\n\n      await expect(service.validateUser('admin@example.com', 'password123')).rejects.toThrow(\n        UnauthorizedException,\n      );\n    });\n\n    it('should throw UnauthorizedException when password is invalid', async () => {\n      mockUsersService.findByEmail.mockResolvedValue(mockUser);\n      jest.spyOn(bcrypt, 'compare').mockImplementation(() => Promise.resolve(false));\n\n      await expect(service.validateUser('admin@example.com', 'wrongpassword')).rejects.toThrow(\n        UnauthorizedException,\n      );\n    });\n  });\n\n  describe('login', () => {\n    it('should return access token and user data on successful login', async () => {\n      const loginDto = { email: 'admin@example.com', password: 'password123' };\n      mockUsersService.findByEmail.mockResolvedValue(mockUser);\n      jest.spyOn(bcrypt, 'compare').mockImplementation(() => Promise.resolve(true));\n      mockJwtService.signAsync.mockResolvedValueOnce('access-token');\n      mockJwtService.signAsync.mockResolvedValueOnce('refresh-token');\n      jest.spyOn(bcrypt, 'hash').mockImplementation(() => Promise.resolve('hashedToken'));\n      mockUsersService.updateRefreshToken.mockResolvedValue(undefined);\n\n      const result = await service.login(loginDto);\n\n      expect(result).toHaveProperty('accessToken', 'access-token');\n      expect(result).toHaveProperty('refreshToken', 'refresh-token');\n      expect(result).toHaveProperty('expiresIn');\n      expect(result).toHaveProperty('tokenType', 'Bearer');\n      expect(result.user).toEqual({\n        id: mockUser._id.toString(),\n        email: mockUser.email,\n        role: mockUser.role,\n        name: mockUser.name,\n      });\n    });\n  });\n\n  describe('refreshTokens', () => {\n    it('should return new tokens when refresh token is valid', async () => {\n      const refreshToken = 'valid-refresh-token';\n      const payload = { sub: mockUser._id, email: mockUser.email, role: mockUser.role };\n\n      mockJwtService.verifyAsync.mockResolvedValue(payload);\n      mockUsersService.findById.mockResolvedValue(mockUser);\n      jest.spyOn(bcrypt, 'compare').mockImplementation(() => Promise.resolve(true));\n      mockJwtService.signAsync.mockResolvedValueOnce('new-access-token');\n      mockJwtService.signAsync.mockResolvedValueOnce('new-refresh-token');\n      jest.spyOn(bcrypt, 'hash').mockImplementation(() => Promise.resolve('hashedToken'));\n      mockUsersService.updateRefreshToken.mockResolvedValue(undefined);\n\n      const result = await service.refreshTokens(refreshToken);\n\n      expect(result).toHaveProperty('accessToken', 'new-access-token');\n      expect(result).toHaveProperty('refreshToken', 'new-refresh-token');\n      expect(result).toHaveProperty('expiresIn');\n      expect(result).toHaveProperty('tokenType', 'Bearer');\n    });\n\n    it('should throw UnauthorizedException when refresh token is invalid', async () => {\n      const refreshToken = 'invalid-refresh-token';\n\n      mockJwtService.verifyAsync.mockRejectedValue(new Error('Invalid token'));\n\n      await expect(service.refreshTokens(refreshToken)).rejects.toThrow(UnauthorizedException);\n    });\n\n    it('should throw UnauthorizedException when user not found', async () => {\n      const refreshToken = 'valid-refresh-token';\n      const payload = { sub: 'nonexistent', email: mockUser.email, role: mockUser.role };\n\n      mockJwtService.verifyAsync.mockResolvedValue(payload);\n      mockUsersService.findById.mockResolvedValue(null);\n\n      await expect(service.refreshTokens(refreshToken)).rejects.toThrow(UnauthorizedException);\n    });\n\n    it('should throw UnauthorizedException when refresh token does not match', async () => {\n      const refreshToken = 'valid-refresh-token';\n      const payload = { sub: mockUser._id, email: mockUser.email, role: mockUser.role };\n\n      mockJwtService.verifyAsync.mockResolvedValue(payload);\n      mockUsersService.findById.mockResolvedValue(mockUser);\n      jest.spyOn(bcrypt, 'compare').mockImplementation(() => Promise.resolve(false));\n\n      await expect(service.refreshTokens(refreshToken)).rejects.toThrow(UnauthorizedException);\n    });\n  });\n\n  describe('logout', () => {\n    it('should clear refresh token for user', async () => {\n      mockUsersService.updateRefreshToken.mockResolvedValue(undefined);\n\n      await service.logout(mockUser._id);\n\n      expect(mockUsersService.updateRefreshToken).toHaveBeenCalledWith(mockUser._id, null);\n    });\n  });\n});\n"],"version":3}