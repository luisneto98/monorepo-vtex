{"file":"/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/tests/integration/speakers.integration.spec.ts","mappings":"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","names":[],"sources":["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/tests/integration/speakers.integration.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { INestApplication } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport request from 'supertest';\nimport { SpeakersModule } from '../../src/modules/speakers/speakers.module';\nimport { AuthModule } from '../../src/modules/auth/auth.module';\nimport { DatabaseModule } from '../../src/modules/database/database.module';\nimport { JwtService } from '@nestjs/jwt';\n\ndescribe('Speakers Integration Tests', () => {\n  let app: INestApplication;\n  let jwtService: JwtService;\n  let authToken: string;\n\n  const testUser = {\n    _id: '507f1f77bcf86cd799439020',\n    email: 'admin@vtexday.com',\n    role: 'super_admin',\n  };\n\n  const createSpeakerDto = {\n    name: 'John Doe',\n    bio: {\n      'pt-BR':\n        'Biografia em português do palestrante com mais de cem caracteres para atender ao requisito mínimo de comprimento',\n      en: 'Speaker biography in English with more than one hundred characters to meet the minimum length requirement',\n    },\n    photoUrl: 'https://example.com/photo.jpg',\n    company: 'Tech Corp',\n    position: {\n      'pt-BR': 'Diretor de Tecnologia',\n      en: 'Technology Director',\n    },\n    socialLinks: {\n      linkedin: 'https://linkedin.com/in/johndoe',\n      twitter: 'https://twitter.com/johndoe',\n    },\n    isHighlight: false,\n    tags: ['AI', 'Cloud'],\n  };\n\n  beforeAll(async () => {\n    const moduleFixture: TestingModule = await Test.createTestingModule({\n      imports: [\n        MongooseModule.forRoot(\n          process.env['MONGODB_TEST_URI'] || 'mongodb://localhost:27017/vtex-day-test',\n        ),\n        DatabaseModule,\n        AuthModule,\n        SpeakersModule,\n      ],\n    }).compile();\n\n    app = moduleFixture.createNestApplication();\n    jwtService = moduleFixture.get<JwtService>(JwtService);\n\n    authToken = jwtService.sign({\n      sub: testUser._id,\n      email: testUser.email,\n      role: testUser.role,\n    });\n\n    await app.init();\n  });\n\n  afterAll(async () => {\n    await app.close();\n  });\n\n  describe('GET /speakers', () => {\n    it('should return paginated speakers list (public endpoint)', async () => {\n      const response = await request(app.getHttpServer()).get('/speakers').expect(200);\n\n      expect(response.body).toHaveProperty('success', true);\n      expect(response.body).toHaveProperty('data');\n      expect(response.body).toHaveProperty('metadata');\n      expect(response.body.metadata).toHaveProperty('total');\n      expect(response.body.metadata).toHaveProperty('page');\n      expect(response.body.metadata).toHaveProperty('limit');\n      expect(response.body.metadata).toHaveProperty('hasNext');\n      expect(response.body.metadata).toHaveProperty('hasPrev');\n    });\n\n    it('should apply pagination correctly', async () => {\n      const response = await request(app.getHttpServer())\n        .get('/speakers?page=1&limit=5')\n        .expect(200);\n\n      expect(response.body.metadata.page).toBe(1);\n      expect(response.body.metadata.limit).toBe(5);\n    });\n\n    it('should apply filters correctly', async () => {\n      const response = await request(app.getHttpServer())\n        .get('/speakers?isHighlight=true&tags=AI,Cloud')\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n    });\n\n    it('should apply sorting correctly', async () => {\n      const response = await request(app.getHttpServer())\n        .get('/speakers?sort=-priority,name')\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n    });\n\n    it('should apply search correctly', async () => {\n      const response = await request(app.getHttpServer())\n        .get('/speakers?search=technology')\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n    });\n  });\n\n  describe('POST /speakers', () => {\n    it('should create a new speaker (admin only)', async () => {\n      const response = await request(app.getHttpServer())\n        .post('/speakers')\n        .set('Authorization', `Bearer ${authToken}`)\n        .send(createSpeakerDto)\n        .expect(201);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data).toHaveProperty('_id');\n      expect(response.body.data.name).toBe(createSpeakerDto.name);\n      expect(response.body.data.company).toBe(createSpeakerDto.company);\n    });\n\n    it('should reject request without authentication', async () => {\n      await request(app.getHttpServer()).post('/speakers').send(createSpeakerDto).expect(401);\n    });\n\n    it('should validate required fields', async () => {\n      const invalidDto = {\n        name: 'A', // Too short\n        bio: {\n          'pt-BR': 'Bio curta', // Too short\n        },\n      };\n\n      await request(app.getHttpServer())\n        .post('/speakers')\n        .set('Authorization', `Bearer ${authToken}`)\n        .send(invalidDto)\n        .expect(400);\n    });\n\n    it('should reject duplicate speaker names', async () => {\n      // First creation should succeed\n      await request(app.getHttpServer())\n        .post('/speakers')\n        .set('Authorization', `Bearer ${authToken}`)\n        .send({\n          ...createSpeakerDto,\n          name: 'Unique Speaker',\n        })\n        .expect(201);\n\n      // Second creation with same name should fail\n      await request(app.getHttpServer())\n        .post('/speakers')\n        .set('Authorization', `Bearer ${authToken}`)\n        .send({\n          ...createSpeakerDto,\n          name: 'Unique Speaker',\n        })\n        .expect(409);\n    });\n  });\n\n  describe('GET /speakers/:id', () => {\n    let speakerId: string;\n\n    beforeAll(async () => {\n      const response = await request(app.getHttpServer())\n        .post('/speakers')\n        .set('Authorization', `Bearer ${authToken}`)\n        .send({\n          ...createSpeakerDto,\n          name: 'Speaker For Detail Test',\n        });\n      speakerId = response.body.data._id;\n    });\n\n    it('should return speaker details by id (public endpoint)', async () => {\n      const response = await request(app.getHttpServer()).get(`/speakers/${speakerId}`).expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data).toHaveProperty('_id', speakerId);\n      expect(response.body.data).toHaveProperty('name');\n      expect(response.body.data).toHaveProperty('bio');\n      expect(response.body.data).toHaveProperty('company');\n    });\n\n    it('should return 404 for non-existent speaker', async () => {\n      await request(app.getHttpServer()).get('/speakers/507f1f77bcf86cd799439999').expect(404);\n    });\n  });\n\n  describe('PATCH /speakers/:id', () => {\n    let speakerId: string;\n\n    beforeAll(async () => {\n      const response = await request(app.getHttpServer())\n        .post('/speakers')\n        .set('Authorization', `Bearer ${authToken}`)\n        .send({\n          ...createSpeakerDto,\n          name: 'Speaker For Update Test',\n        });\n      speakerId = response.body.data._id;\n    });\n\n    it('should update speaker (admin only)', async () => {\n      const updateDto = {\n        company: 'Updated Tech Corp',\n        isHighlight: true,\n      };\n\n      const response = await request(app.getHttpServer())\n        .patch(`/speakers/${speakerId}`)\n        .set('Authorization', `Bearer ${authToken}`)\n        .send(updateDto)\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data.company).toBe(updateDto.company);\n      expect(response.body.data.isHighlight).toBe(updateDto.isHighlight);\n    });\n\n    it('should reject request without authentication', async () => {\n      await request(app.getHttpServer())\n        .patch(`/speakers/${speakerId}`)\n        .send({ company: 'Unauthorized Update' })\n        .expect(401);\n    });\n\n    it('should return 404 for non-existent speaker', async () => {\n      await request(app.getHttpServer())\n        .patch('/speakers/507f1f77bcf86cd799439999')\n        .set('Authorization', `Bearer ${authToken}`)\n        .send({ company: 'Updated Company' })\n        .expect(404);\n    });\n  });\n\n  describe('DELETE /speakers/:id', () => {\n    let speakerId: string;\n\n    beforeAll(async () => {\n      const response = await request(app.getHttpServer())\n        .post('/speakers')\n        .set('Authorization', `Bearer ${authToken}`)\n        .send({\n          ...createSpeakerDto,\n          name: 'Speaker For Delete Test',\n        });\n      speakerId = response.body.data._id;\n    });\n\n    it('should soft delete speaker (admin only)', async () => {\n      const response = await request(app.getHttpServer())\n        .delete(`/speakers/${speakerId}`)\n        .set('Authorization', `Bearer ${authToken}`)\n        .send({ reason: 'Test deletion' })\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n\n      // Verify speaker is no longer accessible via public endpoint\n      await request(app.getHttpServer()).get(`/speakers/${speakerId}`).expect(404);\n    });\n\n    it('should reject request without authentication', async () => {\n      await request(app.getHttpServer()).delete(`/speakers/${speakerId}`).expect(401);\n    });\n\n    it('should return 404 for non-existent speaker', async () => {\n      await request(app.getHttpServer())\n        .delete('/speakers/507f1f77bcf86cd799439999')\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(404);\n    });\n  });\n\n  describe('POST /speakers/:id/restore', () => {\n    let speakerId: string;\n\n    beforeAll(async () => {\n      // Create and delete a speaker\n      const createResponse = await request(app.getHttpServer())\n        .post('/speakers')\n        .set('Authorization', `Bearer ${authToken}`)\n        .send({\n          ...createSpeakerDto,\n          name: 'Speaker For Restore Test',\n        });\n      speakerId = createResponse.body.data._id;\n\n      await request(app.getHttpServer())\n        .delete(`/speakers/${speakerId}`)\n        .set('Authorization', `Bearer ${authToken}`)\n        .send({ reason: 'Test for restoration' });\n    });\n\n    it('should restore soft-deleted speaker (admin only)', async () => {\n      const response = await request(app.getHttpServer())\n        .post(`/speakers/${speakerId}/restore`)\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(200);\n\n      expect(response.body.success).toBe(true);\n\n      // Verify speaker is accessible again via public endpoint\n      await request(app.getHttpServer()).get(`/speakers/${speakerId}`).expect(200);\n    });\n\n    it('should reject request without authentication', async () => {\n      await request(app.getHttpServer()).post(`/speakers/${speakerId}/restore`).expect(401);\n    });\n  });\n\n  describe('GET /speakers/highlights', () => {\n    beforeAll(async () => {\n      // Create a highlighted speaker\n      await request(app.getHttpServer())\n        .post('/speakers')\n        .set('Authorization', `Bearer ${authToken}`)\n        .send({\n          ...createSpeakerDto,\n          name: 'Highlighted Speaker',\n          isHighlight: true,\n        });\n    });\n\n    it('should return highlighted speakers (public endpoint)', async () => {\n      const response = await request(app.getHttpServer()).get('/speakers/highlights').expect(200);\n\n      expect(response.body.success).toBe(true);\n      expect(Array.isArray(response.body.data)).toBe(true);\n\n      // All returned speakers should have isHighlight: true\n      response.body.data.forEach((speaker: any) => {\n        expect(speaker.isHighlight).toBe(true);\n      });\n    });\n  });\n});\n"],"version":3}