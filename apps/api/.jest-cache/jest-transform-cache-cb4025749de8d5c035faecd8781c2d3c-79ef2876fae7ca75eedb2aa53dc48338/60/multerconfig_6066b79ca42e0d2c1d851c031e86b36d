b207140e6fd62705d99040b5c8771df0
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMulterOptionsForType = exports.multerConfig = void 0;
const common_1 = require("@nestjs/common");
const s3_config_1 = require("./s3.config");
exports.multerConfig = {
    limits: {
        fileSize: s3_config_1.S3_CONFIG.MAX_FILE_SIZE.default,
    },
    fileFilter: (_req, file, callback) => {
        const extension = file.originalname.split('.').pop()?.toLowerCase();
        if (!extension) {
            return callback(new common_1.BadRequestException('File must have an extension'), false);
        }
        // Check if extension is allowed for any material type
        const isAllowed = Object.values(s3_config_1.S3_CONFIG.ALLOWED_FORMATS).some((formats) => formats.includes(extension));
        if (!isAllowed) {
            return callback(new common_1.BadRequestException(`File type .${extension} is not allowed`), false);
        }
        callback(null, true);
    },
};
const getMulterOptionsForType = (materialType) => {
    const allowedFormats = s3_config_1.S3_CONFIG.ALLOWED_FORMATS[materialType];
    const maxSize = materialType === 'video' ? s3_config_1.S3_CONFIG.MAX_FILE_SIZE.video : s3_config_1.S3_CONFIG.MAX_FILE_SIZE.default;
    return {
        limits: {
            fileSize: maxSize,
        },
        fileFilter: (_req, file, callback) => {
            const extension = file.originalname.split('.').pop()?.toLowerCase();
            if (!extension) {
                return callback(new common_1.BadRequestException('File must have an extension'), false);
            }
            if (!allowedFormats || !allowedFormats.includes(extension)) {
                return callback(new common_1.BadRequestException(`File type .${extension} is not allowed for ${materialType}`), false);
            }
            callback(null, true);
        },
    };
};
exports.getMulterOptionsForType = getMulterOptionsForType;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvbHVpc25ldG85OC9Eb2N1bWVudG9zL0NvZGUvbW9ub3JlcG8tdnRleC9hcHBzL2FwaS9zcmMvY29uZmlnL211bHRlci5jb25maWcudHMiLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsMkNBQXFEO0FBQ3JELDJDQUF3QztBQUUzQixRQUFBLFlBQVksR0FBa0I7SUFDekMsTUFBTSxFQUFFO1FBQ04sUUFBUSxFQUFFLHFCQUFTLENBQUMsYUFBYSxDQUFDLE9BQU87S0FDMUM7SUFDRCxVQUFVLEVBQUUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxFQUFFO1FBQ25DLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLFdBQVcsRUFBRSxDQUFDO1FBRXBFLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUNmLE9BQU8sUUFBUSxDQUFDLElBQUksNEJBQW1CLENBQUMsNkJBQTZCLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNqRixDQUFDO1FBRUQsc0RBQXNEO1FBQ3RELE1BQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMscUJBQVMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUMxRSxPQUFPLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUM1QixDQUFDO1FBRUYsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1lBQ2YsT0FBTyxRQUFRLENBQUMsSUFBSSw0QkFBbUIsQ0FBQyxjQUFjLFNBQVMsaUJBQWlCLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUM1RixDQUFDO1FBRUQsUUFBUSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN2QixDQUFDO0NBQ0YsQ0FBQztBQUVLLE1BQU0sdUJBQXVCLEdBQUcsQ0FBQyxZQUFvQixFQUFpQixFQUFFO0lBQzdFLE1BQU0sY0FBYyxHQUFHLHFCQUFTLENBQUMsZUFBZSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQy9ELE1BQU0sT0FBTyxHQUNYLFlBQVksS0FBSyxPQUFPLENBQUMsQ0FBQyxDQUFDLHFCQUFTLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMscUJBQVMsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDO0lBRTdGLE9BQU87UUFDTCxNQUFNLEVBQUU7WUFDTixRQUFRLEVBQUUsT0FBTztTQUNsQjtRQUNELFVBQVUsRUFBRSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLEVBQUU7WUFDbkMsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsV0FBVyxFQUFFLENBQUM7WUFFcEUsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO2dCQUNmLE9BQU8sUUFBUSxDQUFDLElBQUksNEJBQW1CLENBQUMsNkJBQTZCLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztZQUNqRixDQUFDO1lBRUQsSUFBSSxDQUFDLGNBQWMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQztnQkFDM0QsT0FBTyxRQUFRLENBQ2IsSUFBSSw0QkFBbUIsQ0FBQyxjQUFjLFNBQVMsdUJBQXVCLFlBQVksRUFBRSxDQUFDLEVBQ3JGLEtBQUssQ0FDTixDQUFDO1lBQ0osQ0FBQztZQUVELFFBQVEsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDdkIsQ0FBQztLQUNGLENBQUM7QUFDSixDQUFDLENBQUM7QUExQlcsUUFBQSx1QkFBdUIsMkJBMEJsQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS9sdWlzbmV0bzk4L0RvY3VtZW50b3MvQ29kZS9tb25vcmVwby12dGV4L2FwcHMvYXBpL3NyYy9jb25maWcvbXVsdGVyLmNvbmZpZy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNdWx0ZXJPcHRpb25zIH0gZnJvbSAnQG5lc3Rqcy9wbGF0Zm9ybS1leHByZXNzL211bHRlci9pbnRlcmZhY2VzL211bHRlci1vcHRpb25zLmludGVyZmFjZSc7XG5pbXBvcnQgeyBCYWRSZXF1ZXN0RXhjZXB0aW9uIH0gZnJvbSAnQG5lc3Rqcy9jb21tb24nO1xuaW1wb3J0IHsgUzNfQ09ORklHIH0gZnJvbSAnLi9zMy5jb25maWcnO1xuXG5leHBvcnQgY29uc3QgbXVsdGVyQ29uZmlnOiBNdWx0ZXJPcHRpb25zID0ge1xuICBsaW1pdHM6IHtcbiAgICBmaWxlU2l6ZTogUzNfQ09ORklHLk1BWF9GSUxFX1NJWkUuZGVmYXVsdCxcbiAgfSxcbiAgZmlsZUZpbHRlcjogKF9yZXEsIGZpbGUsIGNhbGxiYWNrKSA9PiB7XG4gICAgY29uc3QgZXh0ZW5zaW9uID0gZmlsZS5vcmlnaW5hbG5hbWUuc3BsaXQoJy4nKS5wb3AoKT8udG9Mb3dlckNhc2UoKTtcblxuICAgIGlmICghZXh0ZW5zaW9uKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2sobmV3IEJhZFJlcXVlc3RFeGNlcHRpb24oJ0ZpbGUgbXVzdCBoYXZlIGFuIGV4dGVuc2lvbicpLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgaWYgZXh0ZW5zaW9uIGlzIGFsbG93ZWQgZm9yIGFueSBtYXRlcmlhbCB0eXBlXG4gICAgY29uc3QgaXNBbGxvd2VkID0gT2JqZWN0LnZhbHVlcyhTM19DT05GSUcuQUxMT1dFRF9GT1JNQVRTKS5zb21lKChmb3JtYXRzKSA9PlxuICAgICAgZm9ybWF0cy5pbmNsdWRlcyhleHRlbnNpb24pLFxuICAgICk7XG5cbiAgICBpZiAoIWlzQWxsb3dlZCkge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKG5ldyBCYWRSZXF1ZXN0RXhjZXB0aW9uKGBGaWxlIHR5cGUgLiR7ZXh0ZW5zaW9ufSBpcyBub3QgYWxsb3dlZGApLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgY2FsbGJhY2sobnVsbCwgdHJ1ZSk7XG4gIH0sXG59O1xuXG5leHBvcnQgY29uc3QgZ2V0TXVsdGVyT3B0aW9uc0ZvclR5cGUgPSAobWF0ZXJpYWxUeXBlOiBzdHJpbmcpOiBNdWx0ZXJPcHRpb25zID0+IHtcbiAgY29uc3QgYWxsb3dlZEZvcm1hdHMgPSBTM19DT05GSUcuQUxMT1dFRF9GT1JNQVRTW21hdGVyaWFsVHlwZV07XG4gIGNvbnN0IG1heFNpemUgPVxuICAgIG1hdGVyaWFsVHlwZSA9PT0gJ3ZpZGVvJyA/IFMzX0NPTkZJRy5NQVhfRklMRV9TSVpFLnZpZGVvIDogUzNfQ09ORklHLk1BWF9GSUxFX1NJWkUuZGVmYXVsdDtcblxuICByZXR1cm4ge1xuICAgIGxpbWl0czoge1xuICAgICAgZmlsZVNpemU6IG1heFNpemUsXG4gICAgfSxcbiAgICBmaWxlRmlsdGVyOiAoX3JlcSwgZmlsZSwgY2FsbGJhY2spID0+IHtcbiAgICAgIGNvbnN0IGV4dGVuc2lvbiA9IGZpbGUub3JpZ2luYWxuYW1lLnNwbGl0KCcuJykucG9wKCk/LnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgIGlmICghZXh0ZW5zaW9uKSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjayhuZXcgQmFkUmVxdWVzdEV4Y2VwdGlvbignRmlsZSBtdXN0IGhhdmUgYW4gZXh0ZW5zaW9uJyksIGZhbHNlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFhbGxvd2VkRm9ybWF0cyB8fCAhYWxsb3dlZEZvcm1hdHMuaW5jbHVkZXMoZXh0ZW5zaW9uKSkge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2soXG4gICAgICAgICAgbmV3IEJhZFJlcXVlc3RFeGNlcHRpb24oYEZpbGUgdHlwZSAuJHtleHRlbnNpb259IGlzIG5vdCBhbGxvd2VkIGZvciAke21hdGVyaWFsVHlwZX1gKSxcbiAgICAgICAgICBmYWxzZSxcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgY2FsbGJhY2sobnVsbCwgdHJ1ZSk7XG4gICAgfSxcbiAgfTtcbn07XG4iXSwidmVyc2lvbiI6M30=