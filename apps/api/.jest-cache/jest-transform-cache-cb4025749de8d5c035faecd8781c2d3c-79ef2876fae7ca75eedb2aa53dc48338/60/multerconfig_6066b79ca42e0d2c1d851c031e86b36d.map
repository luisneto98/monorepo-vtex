{"file":"/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/config/multer.config.ts","mappings":";;;AACA,2CAAqD;AACrD,2CAAwC;AAE3B,QAAA,YAAY,GAAkB;IACzC,MAAM,EAAE;QACN,QAAQ,EAAE,qBAAS,CAAC,aAAa,CAAC,OAAO;KAC1C;IACD,UAAU,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAE;QACnC,MAAM,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,WAAW,EAAE,CAAC;QAEpE,IAAI,CAAC,SAAS,EAAE,CAAC;YACf,OAAO,QAAQ,CAAC,IAAI,4BAAmB,CAAC,6BAA6B,CAAC,EAAE,KAAK,CAAC,CAAC;QACjF,CAAC;QAED,sDAAsD;QACtD,MAAM,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,qBAAS,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE,CAC1E,OAAO,CAAC,QAAQ,CAAC,SAAS,CAAC,CAC5B,CAAC;QAEF,IAAI,CAAC,SAAS,EAAE,CAAC;YACf,OAAO,QAAQ,CAAC,IAAI,4BAAmB,CAAC,cAAc,SAAS,iBAAiB,CAAC,EAAE,KAAK,CAAC,CAAC;QAC5F,CAAC;QAED,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IACvB,CAAC;CACF,CAAC;AAEK,MAAM,uBAAuB,GAAG,CAAC,YAAoB,EAAiB,EAAE;IAC7E,MAAM,cAAc,GAAG,qBAAS,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC;IAC/D,MAAM,OAAO,GACX,YAAY,KAAK,OAAO,CAAC,CAAC,CAAC,qBAAS,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,qBAAS,CAAC,aAAa,CAAC,OAAO,CAAC;IAE7F,OAAO;QACL,MAAM,EAAE;YACN,QAAQ,EAAE,OAAO;SAClB;QACD,UAAU,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAE;YACnC,MAAM,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,WAAW,EAAE,CAAC;YAEpE,IAAI,CAAC,SAAS,EAAE,CAAC;gBACf,OAAO,QAAQ,CAAC,IAAI,4BAAmB,CAAC,6BAA6B,CAAC,EAAE,KAAK,CAAC,CAAC;YACjF,CAAC;YAED,IAAI,CAAC,cAAc,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE,CAAC;gBAC3D,OAAO,QAAQ,CACb,IAAI,4BAAmB,CAAC,cAAc,SAAS,uBAAuB,YAAY,EAAE,CAAC,EACrF,KAAK,CACN,CAAC;YACJ,CAAC;YAED,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QACvB,CAAC;KACF,CAAC;AACJ,CAAC,CAAC;AA1BW,QAAA,uBAAuB,2BA0BlC","names":[],"sources":["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/config/multer.config.ts"],"sourcesContent":["import { MulterOptions } from '@nestjs/platform-express/multer/interfaces/multer-options.interface';\nimport { BadRequestException } from '@nestjs/common';\nimport { S3_CONFIG } from './s3.config';\n\nexport const multerConfig: MulterOptions = {\n  limits: {\n    fileSize: S3_CONFIG.MAX_FILE_SIZE.default,\n  },\n  fileFilter: (_req, file, callback) => {\n    const extension = file.originalname.split('.').pop()?.toLowerCase();\n\n    if (!extension) {\n      return callback(new BadRequestException('File must have an extension'), false);\n    }\n\n    // Check if extension is allowed for any material type\n    const isAllowed = Object.values(S3_CONFIG.ALLOWED_FORMATS).some((formats) =>\n      formats.includes(extension),\n    );\n\n    if (!isAllowed) {\n      return callback(new BadRequestException(`File type .${extension} is not allowed`), false);\n    }\n\n    callback(null, true);\n  },\n};\n\nexport const getMulterOptionsForType = (materialType: string): MulterOptions => {\n  const allowedFormats = S3_CONFIG.ALLOWED_FORMATS[materialType];\n  const maxSize =\n    materialType === 'video' ? S3_CONFIG.MAX_FILE_SIZE.video : S3_CONFIG.MAX_FILE_SIZE.default;\n\n  return {\n    limits: {\n      fileSize: maxSize,\n    },\n    fileFilter: (_req, file, callback) => {\n      const extension = file.originalname.split('.').pop()?.toLowerCase();\n\n      if (!extension) {\n        return callback(new BadRequestException('File must have an extension'), false);\n      }\n\n      if (!allowedFormats || !allowedFormats.includes(extension)) {\n        return callback(\n          new BadRequestException(`File type .${extension} is not allowed for ${materialType}`),\n          false,\n        );\n      }\n\n      callback(null, true);\n    },\n  };\n};\n"],"version":3}