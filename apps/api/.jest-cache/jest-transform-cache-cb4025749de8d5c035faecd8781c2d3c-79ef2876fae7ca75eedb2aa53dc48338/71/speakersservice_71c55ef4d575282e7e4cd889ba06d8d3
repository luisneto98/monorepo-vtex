d3331bd13f0138b2cf0024f50d050439
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SpeakersService = void 0;
const common_1 = require("@nestjs/common");
const mongoose_1 = require("@nestjs/mongoose");
const mongoose_2 = require("mongoose");
const speaker_schema_1 = require("./schemas/speaker.schema");
const storage_service_1 = require("../storage/services/storage.service");
const storage_types_1 = require("../storage/types/storage.types");
let SpeakersService = class SpeakersService {
    speakerModel;
    storageService;
    constructor(speakerModel, storageService) {
        this.speakerModel = speakerModel;
        this.storageService = storageService;
    }
    async create(createSpeakerDto) {
        const existingSpeaker = await this.speakerModel.findOne({
            name: createSpeakerDto.name,
            deletedAt: null,
        });
        if (existingSpeaker) {
            throw new common_1.ConflictException('Speaker with this name already exists');
        }
        const createdSpeaker = new this.speakerModel(createSpeakerDto);
        return createdSpeaker.save();
    }
    async findAll(filterDto) {
        const { page = 1, limit = 20, sort, search, isHighlight, isVisible, company, tags } = filterDto;
        const query = { deletedAt: null };
        if (search) {
            query.$or = [
                { name: { $regex: search, $options: 'i' } },
                { company: { $regex: search, $options: 'i' } },
                { 'bio.pt-BR': { $regex: search, $options: 'i' } },
                { 'bio.en': { $regex: search, $options: 'i' } },
            ];
        }
        if (typeof isHighlight !== 'undefined') {
            query.isHighlight = isHighlight;
        }
        if (typeof isVisible !== 'undefined') {
            query.isVisible = isVisible;
        }
        if (company) {
            query.company = { $regex: company, $options: 'i' };
        }
        if (tags && tags.length > 0) {
            query.tags = { $in: tags };
        }
        const skip = (page - 1) * limit;
        let sortOptions = { priority: 1 };
        if (sort) {
            sortOptions = {};
            const sortFields = sort.split(',');
            for (const field of sortFields) {
                if (field.startsWith('-')) {
                    sortOptions[field.substring(1)] = -1;
                }
                else {
                    sortOptions[field] = 1;
                }
            }
        }
        const [data, total] = await Promise.all([
            this.speakerModel.find(query).sort(sortOptions).skip(skip).limit(limit).exec(),
            this.speakerModel.countDocuments(query),
        ]);
        return {
            success: true,
            data,
            metadata: {
                total,
                page,
                limit,
                hasNext: skip + data.length < total,
                hasPrev: page > 1,
            },
        };
    }
    async findById(id) {
        const speaker = await this.speakerModel
            .findOne({
            _id: id,
            deletedAt: null,
        })
            .exec();
        if (!speaker) {
            throw new common_1.NotFoundException(`Speaker with ID ${id} not found`);
        }
        return speaker;
    }
    async findHighlights() {
        return this.speakerModel
            .find({
            isHighlight: true,
            isVisible: true,
            deletedAt: null,
        })
            .sort({ priority: 1 })
            .exec();
    }
    async update(id, updateSpeakerDto) {
        const speaker = await this.speakerModel.findOne({
            _id: id,
            deletedAt: null,
        });
        if (!speaker) {
            throw new common_1.NotFoundException(`Speaker with ID ${id} not found`);
        }
        if ('name' in updateSpeakerDto && updateSpeakerDto.name !== speaker.name) {
            const existingSpeaker = await this.speakerModel.findOne({
                name: updateSpeakerDto.name,
                _id: { $ne: id },
                deletedAt: null,
            });
            if (existingSpeaker) {
                throw new common_1.ConflictException('Another speaker with this name already exists');
            }
        }
        Object.assign(speaker, updateSpeakerDto);
        return speaker.save();
    }
    async remove(id, reason, userId) {
        const speaker = await this.speakerModel.findOne({
            _id: id,
            deletedAt: null,
        });
        if (!speaker) {
            throw new common_1.NotFoundException(`Speaker with ID ${id} not found`);
        }
        speaker.deletedAt = new Date();
        speaker.deleteReason = reason;
        if (userId) {
            speaker.deletedBy = userId;
        }
        await speaker.save();
    }
    async restore(id) {
        const speaker = await this.speakerModel.findOne({
            _id: id,
            deletedAt: { $ne: null },
        });
        if (!speaker) {
            throw new common_1.NotFoundException(`Deleted speaker with ID ${id} not found`);
        }
        speaker.deletedAt = null;
        speaker.deletedBy = null;
        speaker.deleteReason = null;
        return speaker.save();
    }
    async uploadPhoto(id, file) {
        // Verify speaker exists
        const speaker = await this.speakerModel.findOne({
            _id: id,
            deletedAt: null,
        });
        if (!speaker) {
            throw new common_1.NotFoundException(`Speaker with ID ${id} not found`);
        }
        // Upload file to S3
        const uploadResult = await this.storageService.uploadFile(file, storage_types_1.FileCategory.SPEAKER_PHOTOS);
        // Update speaker photoUrl
        speaker.photoUrl = uploadResult.url;
        await speaker.save();
        return uploadResult.url;
    }
};
exports.SpeakersService = SpeakersService;
exports.SpeakersService = SpeakersService = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, mongoose_1.InjectModel)(speaker_schema_1.Speaker.name)),
    __metadata("design:paramtypes", [mongoose_2.Model,
        storage_service_1.StorageService])
], SpeakersService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,