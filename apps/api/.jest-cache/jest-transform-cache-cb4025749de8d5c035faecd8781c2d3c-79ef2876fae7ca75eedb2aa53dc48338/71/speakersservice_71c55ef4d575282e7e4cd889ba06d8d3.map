{"file":"/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/speakers/speakers.service.ts","mappings":"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","names":[],"sources":["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/speakers/speakers.service.ts"],"sourcesContent":["import { Injectable, NotFoundException, ConflictException } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { Speaker, SpeakerDocument } from './schemas/speaker.schema';\nimport { CreateSpeakerDto } from './dto/create-speaker.dto';\nimport { UpdateSpeakerDto } from './dto/update-speaker.dto';\nimport { SpeakerFilterDto } from './dto/speaker-filter.dto';\nimport { PaginatedResponse } from '@common/dto/pagination.dto';\nimport { StorageService } from '../storage/services/storage.service';\nimport { FileCategory } from '../storage/types/storage.types';\n\n@Injectable()\nexport class SpeakersService {\n  constructor(\n    @InjectModel(Speaker.name) private speakerModel: Model<SpeakerDocument>,\n    private storageService: StorageService,\n  ) {}\n\n  async create(createSpeakerDto: CreateSpeakerDto): Promise<SpeakerDocument> {\n    const existingSpeaker = await this.speakerModel.findOne({\n      name: createSpeakerDto.name,\n      deletedAt: null,\n    });\n\n    if (existingSpeaker) {\n      throw new ConflictException('Speaker with this name already exists');\n    }\n\n    const createdSpeaker = new this.speakerModel(createSpeakerDto);\n    return createdSpeaker.save();\n  }\n\n  async findAll(filterDto: SpeakerFilterDto): Promise<PaginatedResponse<SpeakerDocument>> {\n    const { page = 1, limit = 20, sort, search, isHighlight, isVisible, company, tags } = filterDto;\n\n    const query: any = { deletedAt: null };\n\n    if (search) {\n      query.$or = [\n        { name: { $regex: search, $options: 'i' } },\n        { company: { $regex: search, $options: 'i' } },\n        { 'bio.pt-BR': { $regex: search, $options: 'i' } },\n        { 'bio.en': { $regex: search, $options: 'i' } },\n      ];\n    }\n\n    if (typeof isHighlight !== 'undefined') {\n      query.isHighlight = isHighlight;\n    }\n\n    if (typeof isVisible !== 'undefined') {\n      query.isVisible = isVisible;\n    }\n\n    if (company) {\n      query.company = { $regex: company, $options: 'i' };\n    }\n\n    if (tags && tags.length > 0) {\n      query.tags = { $in: tags };\n    }\n\n    const skip = (page - 1) * limit;\n\n    let sortOptions: any = { priority: 1 };\n    if (sort) {\n      sortOptions = {};\n      const sortFields = sort.split(',');\n      for (const field of sortFields) {\n        if (field.startsWith('-')) {\n          sortOptions[field.substring(1)] = -1;\n        } else {\n          sortOptions[field] = 1;\n        }\n      }\n    }\n\n    const [data, total] = await Promise.all([\n      this.speakerModel.find(query).sort(sortOptions).skip(skip).limit(limit).exec(),\n      this.speakerModel.countDocuments(query),\n    ]);\n\n    return {\n      success: true,\n      data,\n      metadata: {\n        total,\n        page,\n        limit,\n        hasNext: skip + data.length < total,\n        hasPrev: page > 1,\n      },\n    };\n  }\n\n  async findById(id: string): Promise<SpeakerDocument> {\n    const speaker = await this.speakerModel\n      .findOne({\n        _id: id,\n        deletedAt: null,\n      })\n      .exec();\n\n    if (!speaker) {\n      throw new NotFoundException(`Speaker with ID ${id} not found`);\n    }\n\n    return speaker;\n  }\n\n  async findHighlights(): Promise<SpeakerDocument[]> {\n    return this.speakerModel\n      .find({\n        isHighlight: true,\n        isVisible: true,\n        deletedAt: null,\n      })\n      .sort({ priority: 1 })\n      .exec();\n  }\n\n  async update(id: string, updateSpeakerDto: UpdateSpeakerDto): Promise<SpeakerDocument> {\n    const speaker = await this.speakerModel.findOne({\n      _id: id,\n      deletedAt: null,\n    });\n\n    if (!speaker) {\n      throw new NotFoundException(`Speaker with ID ${id} not found`);\n    }\n\n    if ('name' in updateSpeakerDto && updateSpeakerDto.name !== speaker.name) {\n      const existingSpeaker = await this.speakerModel.findOne({\n        name: updateSpeakerDto.name,\n        _id: { $ne: id },\n        deletedAt: null,\n      });\n\n      if (existingSpeaker) {\n        throw new ConflictException('Another speaker with this name already exists');\n      }\n    }\n\n    Object.assign(speaker, updateSpeakerDto);\n    return speaker.save();\n  }\n\n  async remove(id: string, reason?: string, userId?: string): Promise<void> {\n    const speaker = await this.speakerModel.findOne({\n      _id: id,\n      deletedAt: null,\n    });\n\n    if (!speaker) {\n      throw new NotFoundException(`Speaker with ID ${id} not found`);\n    }\n\n    speaker.deletedAt = new Date();\n    speaker.deleteReason = reason;\n\n    if (userId) {\n      speaker.deletedBy = userId as any;\n    }\n\n    await speaker.save();\n  }\n\n  async restore(id: string): Promise<SpeakerDocument> {\n    const speaker = await this.speakerModel.findOne({\n      _id: id,\n      deletedAt: { $ne: null },\n    });\n\n    if (!speaker) {\n      throw new NotFoundException(`Deleted speaker with ID ${id} not found`);\n    }\n\n    speaker.deletedAt = null;\n    speaker.deletedBy = null;\n    speaker.deleteReason = null;\n\n    return speaker.save();\n  }\n\n  async uploadPhoto(id: string, file: Express.Multer.File): Promise<string> {\n    // Verify speaker exists\n    const speaker = await this.speakerModel.findOne({\n      _id: id,\n      deletedAt: null,\n    });\n\n    if (!speaker) {\n      throw new NotFoundException(`Speaker with ID ${id} not found`);\n    }\n\n    // Upload file to S3\n    const uploadResult = await this.storageService.uploadFile(file, FileCategory.SPEAKER_PHOTOS);\n\n    // Update speaker photoUrl\n    speaker.photoUrl = uploadResult.url;\n    await speaker.save();\n\n    return uploadResult.url;\n  }\n}\n"],"version":3}