{"file":"/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/tests/unit/modules/sponsors/controllers/sponsors.controller.spec.ts","mappings":"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","names":[],"sources":["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/tests/unit/modules/sponsors/controllers/sponsors.controller.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { BadRequestException, NotFoundException } from '@nestjs/common';\nimport { SponsorsController } from '../../../../../src/modules/sponsors/sponsors.controller';\nimport { SponsorsService } from '../../../../../src/modules/sponsors/sponsors.service';\nimport { JwtAuthGuard } from '../../../../../src/modules/auth/guards/jwt-auth.guard';\nimport { RolesGuard } from '../../../../../src/modules/auth/guards/roles.guard';\nimport { ThrottlerGuard } from '@nestjs/throttler';\n\ndescribe('SponsorsController - Upload Logo', () => {\n  let controller: SponsorsController;\n  let sponsorsService: SponsorsService;\n\n  const mockSponsorsService = {\n    uploadLogo: jest.fn(),\n  };\n\n  const mockFile: Express.Multer.File = {\n    fieldname: 'file',\n    originalname: 'test-logo.jpg',\n    encoding: '7bit',\n    mimetype: 'image/jpeg',\n    size: 1024 * 500, // 500KB\n    buffer: Buffer.from('fake-image-data'),\n    stream: null as any,\n    destination: '',\n    filename: '',\n    path: '',\n  };\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      controllers: [SponsorsController],\n      providers: [\n        {\n          provide: SponsorsService,\n          useValue: mockSponsorsService,\n        },\n      ],\n    })\n      .overrideGuard(JwtAuthGuard)\n      .useValue({ canActivate: jest.fn(() => true) })\n      .overrideGuard(RolesGuard)\n      .useValue({ canActivate: jest.fn(() => true) })\n      .overrideGuard(ThrottlerGuard)\n      .useValue({ canActivate: jest.fn(() => true) })\n      .compile();\n\n    controller = module.get<SponsorsController>(SponsorsController);\n    sponsorsService = module.get<SponsorsService>(SponsorsService);\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('uploadLogo', () => {\n    const sponsorId = '507f1f77bcf86cd799439011';\n    const mockLogoUrl =\n      'https://test-bucket.s3.us-east-1.amazonaws.com/sponsor-logos/12345-67890.jpg';\n\n    it('should successfully upload logo and return logoUrl', async () => {\n      mockSponsorsService.uploadLogo.mockResolvedValue(mockLogoUrl);\n\n      const result = await controller.uploadLogo(sponsorId, mockFile);\n\n      expect(sponsorsService.uploadLogo).toHaveBeenCalledWith(sponsorId, mockFile);\n      expect(result).toEqual({\n        success: true,\n        data: { logoUrl: mockLogoUrl },\n      });\n    });\n\n    it('should throw BadRequestException if no file is provided', async () => {\n      await expect(controller.uploadLogo(sponsorId, undefined as any)).rejects.toThrow(\n        BadRequestException,\n      );\n      await expect(controller.uploadLogo(sponsorId, undefined as any)).rejects.toThrow(\n        'No file provided',\n      );\n\n      expect(sponsorsService.uploadLogo).not.toHaveBeenCalled();\n    });\n\n    it('should throw BadRequestException if file is null', async () => {\n      await expect(controller.uploadLogo(sponsorId, null as any)).rejects.toThrow(\n        BadRequestException,\n      );\n      await expect(controller.uploadLogo(sponsorId, null as any)).rejects.toThrow(\n        'No file provided',\n      );\n\n      expect(sponsorsService.uploadLogo).not.toHaveBeenCalled();\n    });\n\n    it('should propagate NotFoundException from service (sponsor not found)', async () => {\n      const nonExistentId = '507f1f77bcf86cd799439999';\n      mockSponsorsService.uploadLogo.mockRejectedValue(\n        new NotFoundException(`Sponsor with ID ${nonExistentId} not found`),\n      );\n\n      await expect(controller.uploadLogo(nonExistentId, mockFile)).rejects.toThrow(\n        NotFoundException,\n      );\n      await expect(controller.uploadLogo(nonExistentId, mockFile)).rejects.toThrow(\n        `Sponsor with ID ${nonExistentId} not found`,\n      );\n\n      expect(sponsorsService.uploadLogo).toHaveBeenCalledWith(nonExistentId, mockFile);\n    });\n\n    it('should propagate BadRequestException from service (invalid file type)', async () => {\n      mockSponsorsService.uploadLogo.mockRejectedValue(\n        new BadRequestException('Invalid file type. Only JPEG, PNG, WEBP files are allowed.'),\n      );\n\n      await expect(controller.uploadLogo(sponsorId, mockFile)).rejects.toThrow(BadRequestException);\n      await expect(controller.uploadLogo(sponsorId, mockFile)).rejects.toThrow('Invalid file type');\n    });\n\n    it('should propagate BadRequestException from service (file too large)', async () => {\n      mockSponsorsService.uploadLogo.mockRejectedValue(\n        new BadRequestException('File size exceeds maximum allowed size of 5MB'),\n      );\n\n      await expect(controller.uploadLogo(sponsorId, mockFile)).rejects.toThrow(BadRequestException);\n      await expect(controller.uploadLogo(sponsorId, mockFile)).rejects.toThrow(\n        'File size exceeds maximum',\n      );\n    });\n\n    it('should propagate BadRequestException from service (virus detected)', async () => {\n      mockSponsorsService.uploadLogo.mockRejectedValue(\n        new BadRequestException('Virus detected in uploaded file'),\n      );\n\n      await expect(controller.uploadLogo(sponsorId, mockFile)).rejects.toThrow(BadRequestException);\n      await expect(controller.uploadLogo(sponsorId, mockFile)).rejects.toThrow('Virus detected');\n    });\n\n    it('should handle different file types (PNG)', async () => {\n      const pngFile: Express.Multer.File = {\n        ...mockFile,\n        originalname: 'test-logo.png',\n        mimetype: 'image/png',\n      };\n\n      mockSponsorsService.uploadLogo.mockResolvedValue(mockLogoUrl);\n\n      const result = await controller.uploadLogo(sponsorId, pngFile);\n\n      expect(sponsorsService.uploadLogo).toHaveBeenCalledWith(sponsorId, pngFile);\n      expect(result.success).toBe(true);\n      expect(result.data.logoUrl).toBe(mockLogoUrl);\n    });\n\n    it('should handle different file types (WebP)', async () => {\n      const webpFile: Express.Multer.File = {\n        ...mockFile,\n        originalname: 'test-logo.webp',\n        mimetype: 'image/webp',\n      };\n\n      mockSponsorsService.uploadLogo.mockResolvedValue(mockLogoUrl);\n\n      const result = await controller.uploadLogo(sponsorId, webpFile);\n\n      expect(sponsorsService.uploadLogo).toHaveBeenCalledWith(sponsorId, webpFile);\n      expect(result.success).toBe(true);\n      expect(result.data.logoUrl).toBe(mockLogoUrl);\n    });\n\n    it('should return proper response structure', async () => {\n      mockSponsorsService.uploadLogo.mockResolvedValue(mockLogoUrl);\n\n      const result = await controller.uploadLogo(sponsorId, mockFile);\n\n      expect(result).toHaveProperty('success', true);\n      expect(result).toHaveProperty('data');\n      expect(result.data).toHaveProperty('logoUrl', mockLogoUrl);\n    });\n\n    it('should pass correct parameters to service', async () => {\n      mockSponsorsService.uploadLogo.mockResolvedValue(mockLogoUrl);\n\n      await controller.uploadLogo(sponsorId, mockFile);\n\n      expect(sponsorsService.uploadLogo).toHaveBeenCalledTimes(1);\n      expect(sponsorsService.uploadLogo).toHaveBeenCalledWith(sponsorId, mockFile);\n    });\n\n    it('should handle large valid files (under 5MB)', async () => {\n      const largeFile: Express.Multer.File = {\n        ...mockFile,\n        size: 1024 * 1024 * 4.5, // 4.5MB\n      };\n\n      mockSponsorsService.uploadLogo.mockResolvedValue(mockLogoUrl);\n\n      const result = await controller.uploadLogo(sponsorId, largeFile);\n\n      expect(result.success).toBe(true);\n      expect(sponsorsService.uploadLogo).toHaveBeenCalledWith(sponsorId, largeFile);\n    });\n  });\n});\n"],"version":3}