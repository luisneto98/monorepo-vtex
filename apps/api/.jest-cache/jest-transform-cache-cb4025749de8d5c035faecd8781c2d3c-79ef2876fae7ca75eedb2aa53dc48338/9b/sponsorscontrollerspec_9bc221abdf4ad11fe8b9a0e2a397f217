3eade742bad55d1f128b17cdd0f1446d
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const common_1 = require("@nestjs/common");
const sponsors_controller_1 = require("../../../../../src/modules/sponsors/sponsors.controller");
const sponsors_service_1 = require("../../../../../src/modules/sponsors/sponsors.service");
const jwt_auth_guard_1 = require("../../../../../src/modules/auth/guards/jwt-auth.guard");
const roles_guard_1 = require("../../../../../src/modules/auth/guards/roles.guard");
const throttler_1 = require("@nestjs/throttler");
describe('SponsorsController - Upload Logo', () => {
    let controller;
    let sponsorsService;
    const mockSponsorsService = {
        uploadLogo: jest.fn(),
    };
    const mockFile = {
        fieldname: 'file',
        originalname: 'test-logo.jpg',
        encoding: '7bit',
        mimetype: 'image/jpeg',
        size: 1024 * 500, // 500KB
        buffer: Buffer.from('fake-image-data'),
        stream: null,
        destination: '',
        filename: '',
        path: '',
    };
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            controllers: [sponsors_controller_1.SponsorsController],
            providers: [
                {
                    provide: sponsors_service_1.SponsorsService,
                    useValue: mockSponsorsService,
                },
            ],
        })
            .overrideGuard(jwt_auth_guard_1.JwtAuthGuard)
            .useValue({ canActivate: jest.fn(() => true) })
            .overrideGuard(roles_guard_1.RolesGuard)
            .useValue({ canActivate: jest.fn(() => true) })
            .overrideGuard(throttler_1.ThrottlerGuard)
            .useValue({ canActivate: jest.fn(() => true) })
            .compile();
        controller = module.get(sponsors_controller_1.SponsorsController);
        sponsorsService = module.get(sponsors_service_1.SponsorsService);
    });
    afterEach(() => {
        jest.clearAllMocks();
    });
    describe('uploadLogo', () => {
        const sponsorId = '507f1f77bcf86cd799439011';
        const mockLogoUrl = 'https://test-bucket.s3.us-east-1.amazonaws.com/sponsor-logos/12345-67890.jpg';
        it('should successfully upload logo and return logoUrl', async () => {
            mockSponsorsService.uploadLogo.mockResolvedValue(mockLogoUrl);
            const result = await controller.uploadLogo(sponsorId, mockFile);
            expect(sponsorsService.uploadLogo).toHaveBeenCalledWith(sponsorId, mockFile);
            expect(result).toEqual({
                success: true,
                data: { logoUrl: mockLogoUrl },
            });
        });
        it('should throw BadRequestException if no file is provided', async () => {
            await expect(controller.uploadLogo(sponsorId, undefined)).rejects.toThrow(common_1.BadRequestException);
            await expect(controller.uploadLogo(sponsorId, undefined)).rejects.toThrow('No file provided');
            expect(sponsorsService.uploadLogo).not.toHaveBeenCalled();
        });
        it('should throw BadRequestException if file is null', async () => {
            await expect(controller.uploadLogo(sponsorId, null)).rejects.toThrow(common_1.BadRequestException);
            await expect(controller.uploadLogo(sponsorId, null)).rejects.toThrow('No file provided');
            expect(sponsorsService.uploadLogo).not.toHaveBeenCalled();
        });
        it('should propagate NotFoundException from service (sponsor not found)', async () => {
            const nonExistentId = '507f1f77bcf86cd799439999';
            mockSponsorsService.uploadLogo.mockRejectedValue(new common_1.NotFoundException(`Sponsor with ID ${nonExistentId} not found`));
            await expect(controller.uploadLogo(nonExistentId, mockFile)).rejects.toThrow(common_1.NotFoundException);
            await expect(controller.uploadLogo(nonExistentId, mockFile)).rejects.toThrow(`Sponsor with ID ${nonExistentId} not found`);
            expect(sponsorsService.uploadLogo).toHaveBeenCalledWith(nonExistentId, mockFile);
        });
        it('should propagate BadRequestException from service (invalid file type)', async () => {
            mockSponsorsService.uploadLogo.mockRejectedValue(new common_1.BadRequestException('Invalid file type. Only JPEG, PNG, WEBP files are allowed.'));
            await expect(controller.uploadLogo(sponsorId, mockFile)).rejects.toThrow(common_1.BadRequestException);
            await expect(controller.uploadLogo(sponsorId, mockFile)).rejects.toThrow('Invalid file type');
        });
        it('should propagate BadRequestException from service (file too large)', async () => {
            mockSponsorsService.uploadLogo.mockRejectedValue(new common_1.BadRequestException('File size exceeds maximum allowed size of 5MB'));
            await expect(controller.uploadLogo(sponsorId, mockFile)).rejects.toThrow(common_1.BadRequestException);
            await expect(controller.uploadLogo(sponsorId, mockFile)).rejects.toThrow('File size exceeds maximum');
        });
        it('should propagate BadRequestException from service (virus detected)', async () => {
            mockSponsorsService.uploadLogo.mockRejectedValue(new common_1.BadRequestException('Virus detected in uploaded file'));
            await expect(controller.uploadLogo(sponsorId, mockFile)).rejects.toThrow(common_1.BadRequestException);
            await expect(controller.uploadLogo(sponsorId, mockFile)).rejects.toThrow('Virus detected');
        });
        it('should handle different file types (PNG)', async () => {
            const pngFile = {
                ...mockFile,
                originalname: 'test-logo.png',
                mimetype: 'image/png',
            };
            mockSponsorsService.uploadLogo.mockResolvedValue(mockLogoUrl);
            const result = await controller.uploadLogo(sponsorId, pngFile);
            expect(sponsorsService.uploadLogo).toHaveBeenCalledWith(sponsorId, pngFile);
            expect(result.success).toBe(true);
            expect(result.data.logoUrl).toBe(mockLogoUrl);
        });
        it('should handle different file types (WebP)', async () => {
            const webpFile = {
                ...mockFile,
                originalname: 'test-logo.webp',
                mimetype: 'image/webp',
            };
            mockSponsorsService.uploadLogo.mockResolvedValue(mockLogoUrl);
            const result = await controller.uploadLogo(sponsorId, webpFile);
            expect(sponsorsService.uploadLogo).toHaveBeenCalledWith(sponsorId, webpFile);
            expect(result.success).toBe(true);
            expect(result.data.logoUrl).toBe(mockLogoUrl);
        });
        it('should return proper response structure', async () => {
            mockSponsorsService.uploadLogo.mockResolvedValue(mockLogoUrl);
            const result = await controller.uploadLogo(sponsorId, mockFile);
            expect(result).toHaveProperty('success', true);
            expect(result).toHaveProperty('data');
            expect(result.data).toHaveProperty('logoUrl', mockLogoUrl);
        });
        it('should pass correct parameters to service', async () => {
            mockSponsorsService.uploadLogo.mockResolvedValue(mockLogoUrl);
            await controller.uploadLogo(sponsorId, mockFile);
            expect(sponsorsService.uploadLogo).toHaveBeenCalledTimes(1);
            expect(sponsorsService.uploadLogo).toHaveBeenCalledWith(sponsorId, mockFile);
        });
        it('should handle large valid files (under 5MB)', async () => {
            const largeFile = {
                ...mockFile,
                size: 1024 * 1024 * 4.5, // 4.5MB
            };
            mockSponsorsService.uploadLogo.mockResolvedValue(mockLogoUrl);
            const result = await controller.uploadLogo(sponsorId, largeFile);
            expect(result.success).toBe(true);
            expect(sponsorsService.uploadLogo).toHaveBeenCalledWith(sponsorId, largeFile);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,