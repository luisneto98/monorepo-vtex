{"file":"/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/tests/unit/config.validation.spec.ts","mappings":"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","names":[],"sources":["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/tests/unit/config.validation.spec.ts"],"sourcesContent":["import configuration from '../../src/config/configuration';\n\ndescribe('Configuration Validation', () => {\n  const originalEnv = process.env;\n\n  beforeEach(() => {\n    jest.resetModules();\n    process.env = { ...originalEnv };\n  });\n\n  afterAll(() => {\n    process.env = originalEnv;\n  });\n\n  describe('Application Config', () => {\n    it('should use default port when PORT is not set', () => {\n      delete process.env['PORT'];\n      const config = configuration();\n      expect(config.port).toBe(3000);\n    });\n\n    it('should use custom port when PORT is set', () => {\n      process.env['PORT'] = '4000';\n      const config = configuration();\n      expect(config.port).toBe(4000);\n    });\n  });\n\n  describe('Database Config', () => {\n    it('should use default MongoDB URI when not set', () => {\n      delete process.env['MONGODB_URI'];\n      const config = configuration();\n      expect(config.database.uri).toBe('mongodb://localhost:27017/vtexday26');\n    });\n\n    it('should use custom MongoDB URI when set', () => {\n      process.env['MONGODB_URI'] = 'mongodb://custom:27017/test';\n      const config = configuration();\n      expect(config.database.uri).toBe('mongodb://custom:27017/test');\n    });\n  });\n\n  describe('JWT Config', () => {\n    it('should have JWT secret configuration', () => {\n      const config = configuration();\n      expect(config.jwt.secret).toBeDefined();\n      expect(config.jwt.accessExpiration).toBeDefined();\n    });\n\n    it('should use custom JWT settings when provided', () => {\n      process.env['JWT_SECRET'] = 'test-secret';\n      process.env['JWT_ACCESS_EXPIRATION'] = '1d';\n      const config = configuration();\n      expect(config.jwt.secret).toBe('test-secret');\n      expect(config.jwt.accessExpiration).toBe('1d');\n    });\n  });\n\n  describe('Redis Config', () => {\n    it('should have default Redis configuration', () => {\n      const config = configuration();\n      expect(config.redis.host).toBe('localhost');\n      expect(config.redis.port).toBe(6379);\n    });\n\n    it('should use custom Redis settings when provided', () => {\n      process.env['REDIS_HOST'] = 'redis.example.com';\n      process.env['REDIS_PORT'] = '6380';\n      process.env['REDIS_PASSWORD'] = 'secret';\n      const config = configuration();\n      expect(config.redis.host).toBe('redis.example.com');\n      expect(config.redis.port).toBe(6380);\n      expect(config.redis.password).toBe('secret');\n    });\n  });\n\n  describe('CORS Config', () => {\n    it('should have default CORS configuration', () => {\n      const config = configuration();\n      expect(config.cors.origin).toBeDefined();\n    });\n\n    it('should use custom CORS origin when provided', () => {\n      process.env['CORS_ORIGIN'] = 'https://example.com';\n      const config = configuration();\n      expect(config.cors.origin).toBe('https://example.com');\n    });\n  });\n});\n"],"version":3}