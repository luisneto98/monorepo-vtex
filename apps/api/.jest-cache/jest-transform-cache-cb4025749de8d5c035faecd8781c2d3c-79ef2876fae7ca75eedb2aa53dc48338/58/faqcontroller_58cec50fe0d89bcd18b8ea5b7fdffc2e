2ec0a1a0444f29cd6705c64907db1477
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FaqController = void 0;
const common_1 = require("@nestjs/common");
const swagger_1 = require("@nestjs/swagger");
const faq_service_1 = require("./faq.service");
const jwt_auth_guard_1 = require("@common/guards/jwt-auth.guard");
const roles_guard_1 = require("@common/guards/roles.guard");
const roles_decorator_1 = require("@common/decorators/roles.decorator");
const user_types_1 = require("@shared/types/user.types");
const public_decorator_1 = require("@common/decorators/public.decorator");
const create_faq_dto_1 = require("./dto/create-faq.dto");
const update_faq_dto_1 = require("./dto/update-faq.dto");
const faq_filter_dto_1 = require("./dto/faq-filter.dto");
const create_faq_category_dto_1 = require("./dto/create-faq-category.dto");
const update_faq_category_dto_1 = require("./dto/update-faq-category.dto");
const api_response_dto_1 = require("@common/dto/api-response.dto");
let FaqController = class FaqController {
    faqService;
    constructor(faqService) {
        this.faqService = faqService;
    }
    // FAQ endpoints
    async create(createFaqDto) {
        const faq = await this.faqService.createFaq(createFaqDto);
        return api_response_dto_1.ApiResponse.success(faq);
    }
    async findAll(filterDto) {
        const result = await this.faqService.findAllFaqs(filterDto);
        return api_response_dto_1.ApiResponse.success(result.data, result.metadata);
    }
    async findPopular(limit) {
        const faqs = await this.faqService.findPopularFaqs(limit);
        return api_response_dto_1.ApiResponse.success(faqs);
    }
    // FAQ Category endpoints - MUST come before :id routes
    async createCategory(createCategoryDto) {
        const category = await this.faqService.createCategory(createCategoryDto);
        return api_response_dto_1.ApiResponse.success(category);
    }
    async findAllCategories() {
        const categories = await this.faqService.findAllCategories();
        return api_response_dto_1.ApiResponse.success(categories);
    }
    async findOneCategory(id) {
        const category = await this.faqService.findCategoryById(id);
        return api_response_dto_1.ApiResponse.success(category);
    }
    async updateCategory(id, updateCategoryDto) {
        const category = await this.faqService.updateCategory(id, updateCategoryDto);
        return api_response_dto_1.ApiResponse.success(category);
    }
    async removeCategory(id) {
        await this.faqService.removeCategory(id);
    }
    // FAQ items with :id param routes - MUST come after specific routes
    async findOne(id) {
        const faq = await this.faqService.findFaqById(id);
        return api_response_dto_1.ApiResponse.success(faq);
    }
    async update(id, updateFaqDto) {
        const faq = await this.faqService.updateFaq(id, updateFaqDto);
        return api_response_dto_1.ApiResponse.success(faq);
    }
    async remove(id, req, reason) {
        const userId = req.user?.id;
        await this.faqService.removeFaq(id, reason, userId);
    }
    async restore(id) {
        const faq = await this.faqService.restoreFaq(id);
        return api_response_dto_1.ApiResponse.success(faq);
    }
};
exports.FaqController = FaqController;
__decorate([
    (0, common_1.Post)(),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, roles_guard_1.RolesGuard),
    (0, roles_decorator_1.Roles)(user_types_1.UserRole.SUPER_ADMIN, user_types_1.UserRole.PRODUCER),
    (0, common_1.HttpCode)(common_1.HttpStatus.CREATED),
    (0, swagger_1.ApiBearerAuth)('JWT-auth'),
    (0, swagger_1.ApiOperation)({ summary: 'Create new FAQ item (Admin/Producer only)' }),
    (0, swagger_1.ApiBody)({ type: create_faq_dto_1.CreateFaqDto }),
    (0, swagger_1.ApiResponse)({
        status: 201,
        description: 'FAQ created successfully',
        schema: {
            example: {
                success: true,
                data: {
                    _id: '507f1f77bcf86cd799439011',
                    question: { 'pt-BR': 'Pergunta?', en: 'Question?' },
                    answer: { 'pt-BR': 'Resposta...', en: 'Answer...' },
                    category: '507f1f77bcf86cd799439012',
                    order: 1,
                    viewCount: 0,
                },
            },
        },
    }),
    (0, swagger_1.ApiResponse)({ status: 400, description: 'Validation error' }),
    (0, swagger_1.ApiResponse)({ status: 401, description: 'Unauthorized' }),
    (0, swagger_1.ApiResponse)({ status: 403, description: 'Forbidden - insufficient role' }),
    __param(0, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [create_faq_dto_1.CreateFaqDto]),
    __metadata("design:returntype", Promise)
], FaqController.prototype, "create", null);
__decorate([
    (0, common_1.Get)(),
    (0, public_decorator_1.Public)(),
    (0, swagger_1.ApiOperation)({ summary: 'List all FAQ items with filters and pagination' }),
    (0, swagger_1.ApiQuery)({ name: 'page', required: false, type: Number, example: 1 }),
    (0, swagger_1.ApiQuery)({ name: 'limit', required: false, type: Number, example: 20 }),
    (0, swagger_1.ApiQuery)({ name: 'sort', required: false, type: String, example: 'order,-viewCount' }),
    (0, swagger_1.ApiQuery)({
        name: 'search',
        required: false,
        type: String,
        description: 'Search in question and answer',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'category',
        required: false,
        type: String,
        description: 'Filter by category ID',
    }),
    (0, swagger_1.ApiQuery)({ name: 'tags', required: false, type: [String], description: 'Filter by tags' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'List of FAQ items with pagination',
        schema: {
            example: {
                success: true,
                data: [
                    {
                        _id: '507f1f77bcf86cd799439011',
                        question: { 'pt-BR': 'Como participar?', en: 'How to participate?' },
                        answer: { 'pt-BR': 'Resposta...', en: 'Answer...' },
                        category: {
                            _id: '507f1f77bcf86cd799439012',
                            name: { 'pt-BR': 'Geral', en: 'General' },
                        },
                        viewCount: 150,
                    },
                ],
                metadata: {
                    total: 30,
                    page: 1,
                    limit: 20,
                    totalPages: 2,
                    hasNext: true,
                    hasPrev: false,
                },
            },
        },
    }),
    __param(0, (0, common_1.Query)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [faq_filter_dto_1.FaqFilterDto]),
    __metadata("design:returntype", Promise)
], FaqController.prototype, "findAll", null);
__decorate([
    (0, common_1.Get)('popular'),
    (0, public_decorator_1.Public)(),
    (0, swagger_1.ApiOperation)({ summary: 'Get most popular FAQ items' }),
    (0, swagger_1.ApiQuery)({
        name: 'limit',
        required: false,
        type: Number,
        example: 10,
        description: 'Number of items to return',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'List of popular FAQ items sorted by view count',
        schema: {
            example: {
                success: true,
                data: [
                    {
                        _id: '507f1f77bcf86cd799439011',
                        question: { 'pt-BR': 'Pergunta popular', en: 'Popular question' },
                        viewCount: 500,
                    },
                ],
            },
        },
    }),
    __param(0, (0, common_1.Query)('limit')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Number]),
    __metadata("design:returntype", Promise)
], FaqController.prototype, "findPopular", null);
__decorate([
    (0, swagger_1.ApiTags)('FAQ Categories'),
    (0, common_1.Post)('categories'),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, roles_guard_1.RolesGuard),
    (0, roles_decorator_1.Roles)(user_types_1.UserRole.SUPER_ADMIN, user_types_1.UserRole.PRODUCER),
    (0, common_1.HttpCode)(common_1.HttpStatus.CREATED),
    (0, swagger_1.ApiBearerAuth)('JWT-auth'),
    (0, swagger_1.ApiOperation)({ summary: 'Create new FAQ category (Admin/Producer only)' }),
    (0, swagger_1.ApiBody)({ type: create_faq_category_dto_1.CreateFaqCategoryDto }),
    (0, swagger_1.ApiResponse)({
        status: 201,
        description: 'Category created successfully',
        schema: {
            example: {
                success: true,
                data: {
                    _id: '507f1f77bcf86cd799439012',
                    name: { 'pt-BR': 'Inscrições', en: 'Registration' },
                    description: { 'pt-BR': 'Perguntas sobre inscrições', en: 'Registration questions' },
                    icon: 'ticket',
                    order: 1,
                },
            },
        },
    }),
    (0, swagger_1.ApiResponse)({ status: 400, description: 'Validation error' }),
    (0, swagger_1.ApiResponse)({ status: 401, description: 'Unauthorized' }),
    (0, swagger_1.ApiResponse)({ status: 403, description: 'Forbidden' }),
    __param(0, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [create_faq_category_dto_1.CreateFaqCategoryDto]),
    __metadata("design:returntype", Promise)
], FaqController.prototype, "createCategory", null);
__decorate([
    (0, swagger_1.ApiTags)('FAQ Categories'),
    (0, common_1.Get)('categories'),
    (0, public_decorator_1.Public)(),
    (0, swagger_1.ApiOperation)({ summary: 'List all FAQ categories' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'List of FAQ categories',
        schema: {
            example: {
                success: true,
                data: [
                    {
                        _id: '507f1f77bcf86cd799439012',
                        name: { 'pt-BR': 'Geral', en: 'General' },
                        description: { 'pt-BR': 'Perguntas gerais', en: 'General questions' },
                        faqCount: 15,
                        order: 1,
                    },
                ],
            },
        },
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], FaqController.prototype, "findAllCategories", null);
__decorate([
    (0, swagger_1.ApiTags)('FAQ Categories'),
    (0, common_1.Get)('categories/:id'),
    (0, public_decorator_1.Public)(),
    (0, swagger_1.ApiOperation)({ summary: 'Get FAQ category by ID' }),
    (0, swagger_1.ApiParam)({ name: 'id', description: 'Category ID' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Category details with FAQs',
    }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Category not found' }),
    __param(0, (0, common_1.Param)('id')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], FaqController.prototype, "findOneCategory", null);
__decorate([
    (0, swagger_1.ApiTags)('FAQ Categories'),
    (0, common_1.Patch)('categories/:id'),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, roles_guard_1.RolesGuard),
    (0, roles_decorator_1.Roles)(user_types_1.UserRole.SUPER_ADMIN, user_types_1.UserRole.PRODUCER),
    (0, swagger_1.ApiBearerAuth)('JWT-auth'),
    (0, swagger_1.ApiOperation)({ summary: 'Update FAQ category (Admin/Producer only)' }),
    (0, swagger_1.ApiParam)({ name: 'id', description: 'Category ID' }),
    (0, swagger_1.ApiBody)({ type: update_faq_category_dto_1.UpdateFaqCategoryDto }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Category updated successfully' }),
    (0, swagger_1.ApiResponse)({ status: 400, description: 'Validation error' }),
    (0, swagger_1.ApiResponse)({ status: 401, description: 'Unauthorized' }),
    (0, swagger_1.ApiResponse)({ status: 403, description: 'Forbidden' }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Category not found' }),
    __param(0, (0, common_1.Param)('id')),
    __param(1, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, update_faq_category_dto_1.UpdateFaqCategoryDto]),
    __metadata("design:returntype", Promise)
], FaqController.prototype, "updateCategory", null);
__decorate([
    (0, swagger_1.ApiTags)('FAQ Categories'),
    (0, common_1.Delete)('categories/:id'),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, roles_guard_1.RolesGuard),
    (0, roles_decorator_1.Roles)(user_types_1.UserRole.SUPER_ADMIN),
    (0, common_1.HttpCode)(common_1.HttpStatus.NO_CONTENT),
    (0, swagger_1.ApiBearerAuth)('JWT-auth'),
    (0, swagger_1.ApiOperation)({ summary: 'Delete FAQ category (Super Admin only)' }),
    (0, swagger_1.ApiParam)({ name: 'id', description: 'Category ID' }),
    (0, swagger_1.ApiResponse)({ status: 204, description: 'Category deleted successfully' }),
    (0, swagger_1.ApiResponse)({ status: 401, description: 'Unauthorized' }),
    (0, swagger_1.ApiResponse)({ status: 403, description: 'Forbidden' }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Category not found' }),
    (0, swagger_1.ApiResponse)({ status: 409, description: 'Cannot delete category with existing FAQs' }),
    __param(0, (0, common_1.Param)('id')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], FaqController.prototype, "removeCategory", null);
__decorate([
    (0, common_1.Get)(':id'),
    (0, public_decorator_1.Public)(),
    (0, swagger_1.ApiOperation)({ summary: 'Get FAQ item by ID' }),
    (0, swagger_1.ApiParam)({ name: 'id', description: 'FAQ ID', example: '507f1f77bcf86cd799439011' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'FAQ item details',
        schema: {
            example: {
                success: true,
                data: {
                    _id: '507f1f77bcf86cd799439011',
                    question: { 'pt-BR': 'Pergunta completa?', en: 'Complete question?' },
                    answer: { 'pt-BR': '<p>Resposta em HTML...</p>', en: '<p>HTML answer...</p>' },
                    category: { _id: '507f1f77bcf86cd799439012', name: { 'pt-BR': 'Geral', en: 'General' } },
                    tags: ['registration', 'tickets'],
                    viewCount: 250,
                    relatedFaqs: ['507f1f77bcf86cd799439013'],
                },
            },
        },
    }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'FAQ not found' }),
    __param(0, (0, common_1.Param)('id')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], FaqController.prototype, "findOne", null);
__decorate([
    (0, common_1.Patch)(':id'),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, roles_guard_1.RolesGuard),
    (0, roles_decorator_1.Roles)(user_types_1.UserRole.SUPER_ADMIN, user_types_1.UserRole.PRODUCER),
    (0, swagger_1.ApiBearerAuth)('JWT-auth'),
    (0, swagger_1.ApiOperation)({ summary: 'Update FAQ item (Admin/Producer only)' }),
    (0, swagger_1.ApiParam)({ name: 'id', description: 'FAQ ID' }),
    (0, swagger_1.ApiBody)({ type: update_faq_dto_1.UpdateFaqDto }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'FAQ updated successfully',
    }),
    (0, swagger_1.ApiResponse)({ status: 400, description: 'Validation error' }),
    (0, swagger_1.ApiResponse)({ status: 401, description: 'Unauthorized' }),
    (0, swagger_1.ApiResponse)({ status: 403, description: 'Forbidden' }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'FAQ not found' }),
    __param(0, (0, common_1.Param)('id')),
    __param(1, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, update_faq_dto_1.UpdateFaqDto]),
    __metadata("design:returntype", Promise)
], FaqController.prototype, "update", null);
__decorate([
    (0, common_1.Delete)(':id'),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, roles_guard_1.RolesGuard),
    (0, roles_decorator_1.Roles)(user_types_1.UserRole.SUPER_ADMIN),
    (0, common_1.HttpCode)(common_1.HttpStatus.NO_CONTENT),
    (0, swagger_1.ApiBearerAuth)('JWT-auth'),
    (0, swagger_1.ApiOperation)({ summary: 'Soft delete FAQ item (Super Admin only)' }),
    (0, swagger_1.ApiParam)({ name: 'id', description: 'FAQ ID' }),
    (0, swagger_1.ApiQuery)({ name: 'reason', required: false, description: 'Reason for deletion' }),
    (0, swagger_1.ApiResponse)({ status: 204, description: 'FAQ deleted successfully' }),
    (0, swagger_1.ApiResponse)({ status: 401, description: 'Unauthorized' }),
    (0, swagger_1.ApiResponse)({ status: 403, description: 'Forbidden' }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'FAQ not found' }),
    __param(0, (0, common_1.Param)('id')),
    __param(1, (0, common_1.Req)()),
    __param(2, (0, common_1.Query)('reason')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object, String]),
    __metadata("design:returntype", Promise)
], FaqController.prototype, "remove", null);
__decorate([
    (0, common_1.Post)(':id/restore'),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, roles_guard_1.RolesGuard),
    (0, roles_decorator_1.Roles)(user_types_1.UserRole.SUPER_ADMIN),
    (0, swagger_1.ApiBearerAuth)('JWT-auth'),
    (0, swagger_1.ApiOperation)({ summary: 'Restore soft-deleted FAQ item (Super Admin only)' }),
    (0, swagger_1.ApiParam)({ name: 'id', description: 'FAQ ID' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'FAQ restored successfully',
    }),
    (0, swagger_1.ApiResponse)({ status: 401, description: 'Unauthorized' }),
    (0, swagger_1.ApiResponse)({ status: 403, description: 'Forbidden' }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'FAQ not found' }),
    __param(0, (0, common_1.Param)('id')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], FaqController.prototype, "restore", null);
exports.FaqController = FaqController = __decorate([
    (0, swagger_1.ApiTags)('FAQ'),
    (0, common_1.Controller)('faq'),
    __metadata("design:paramtypes", [faq_service_1.FaqService])
], FaqController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,