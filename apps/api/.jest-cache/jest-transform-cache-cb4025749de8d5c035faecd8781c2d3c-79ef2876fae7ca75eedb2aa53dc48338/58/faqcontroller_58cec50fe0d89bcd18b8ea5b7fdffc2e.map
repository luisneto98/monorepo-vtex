{"file":"/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/faq/faq.controller.ts","mappings":"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","names":[],"sources":["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/faq/faq.controller.ts"],"sourcesContent":["import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseGuards,\n  Query,\n  HttpCode,\n  HttpStatus,\n  Req,\n} from '@nestjs/common';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse as SwaggerApiResponse,\n  ApiBearerAuth,\n  ApiParam,\n  ApiQuery,\n  ApiBody,\n} from '@nestjs/swagger';\nimport { FaqService } from './faq.service';\nimport { JwtAuthGuard } from '@common/guards/jwt-auth.guard';\nimport { RolesGuard } from '@common/guards/roles.guard';\nimport { Roles } from '@common/decorators/roles.decorator';\nimport { UserRole } from '@shared/types/user.types';\nimport { Public } from '@common/decorators/public.decorator';\nimport { CreateFaqDto } from './dto/create-faq.dto';\nimport { UpdateFaqDto } from './dto/update-faq.dto';\nimport { FaqFilterDto } from './dto/faq-filter.dto';\nimport { CreateFaqCategoryDto } from './dto/create-faq-category.dto';\nimport { UpdateFaqCategoryDto } from './dto/update-faq-category.dto';\nimport { ApiResponse } from '@common/dto/api-response.dto';\nimport { Request } from 'express';\n\n@ApiTags('FAQ')\n@Controller('faq')\nexport class FaqController {\n  constructor(private readonly faqService: FaqService) {}\n\n  // FAQ endpoints\n  @Post()\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(UserRole.SUPER_ADMIN, UserRole.PRODUCER)\n  @HttpCode(HttpStatus.CREATED)\n  @ApiBearerAuth('JWT-auth')\n  @ApiOperation({ summary: 'Create new FAQ item (Admin/Producer only)' })\n  @ApiBody({ type: CreateFaqDto })\n  @SwaggerApiResponse({\n    status: 201,\n    description: 'FAQ created successfully',\n    schema: {\n      example: {\n        success: true,\n        data: {\n          _id: '507f1f77bcf86cd799439011',\n          question: { 'pt-BR': 'Pergunta?', en: 'Question?' },\n          answer: { 'pt-BR': 'Resposta...', en: 'Answer...' },\n          category: '507f1f77bcf86cd799439012',\n          order: 1,\n          viewCount: 0,\n        },\n      },\n    },\n  })\n  @SwaggerApiResponse({ status: 400, description: 'Validation error' })\n  @SwaggerApiResponse({ status: 401, description: 'Unauthorized' })\n  @SwaggerApiResponse({ status: 403, description: 'Forbidden - insufficient role' })\n  async create(@Body() createFaqDto: CreateFaqDto) {\n    const faq = await this.faqService.createFaq(createFaqDto);\n    return ApiResponse.success(faq);\n  }\n\n  @Get()\n  @Public()\n  @ApiOperation({ summary: 'List all FAQ items with filters and pagination' })\n  @ApiQuery({ name: 'page', required: false, type: Number, example: 1 })\n  @ApiQuery({ name: 'limit', required: false, type: Number, example: 20 })\n  @ApiQuery({ name: 'sort', required: false, type: String, example: 'order,-viewCount' })\n  @ApiQuery({\n    name: 'search',\n    required: false,\n    type: String,\n    description: 'Search in question and answer',\n  })\n  @ApiQuery({\n    name: 'category',\n    required: false,\n    type: String,\n    description: 'Filter by category ID',\n  })\n  @ApiQuery({ name: 'tags', required: false, type: [String], description: 'Filter by tags' })\n  @SwaggerApiResponse({\n    status: 200,\n    description: 'List of FAQ items with pagination',\n    schema: {\n      example: {\n        success: true,\n        data: [\n          {\n            _id: '507f1f77bcf86cd799439011',\n            question: { 'pt-BR': 'Como participar?', en: 'How to participate?' },\n            answer: { 'pt-BR': 'Resposta...', en: 'Answer...' },\n            category: {\n              _id: '507f1f77bcf86cd799439012',\n              name: { 'pt-BR': 'Geral', en: 'General' },\n            },\n            viewCount: 150,\n          },\n        ],\n        metadata: {\n          total: 30,\n          page: 1,\n          limit: 20,\n          totalPages: 2,\n          hasNext: true,\n          hasPrev: false,\n        },\n      },\n    },\n  })\n  async findAll(@Query() filterDto: FaqFilterDto) {\n    const result = await this.faqService.findAllFaqs(filterDto);\n    return ApiResponse.success(result.data, result.metadata);\n  }\n\n  @Get('popular')\n  @Public()\n  @ApiOperation({ summary: 'Get most popular FAQ items' })\n  @ApiQuery({\n    name: 'limit',\n    required: false,\n    type: Number,\n    example: 10,\n    description: 'Number of items to return',\n  })\n  @SwaggerApiResponse({\n    status: 200,\n    description: 'List of popular FAQ items sorted by view count',\n    schema: {\n      example: {\n        success: true,\n        data: [\n          {\n            _id: '507f1f77bcf86cd799439011',\n            question: { 'pt-BR': 'Pergunta popular', en: 'Popular question' },\n            viewCount: 500,\n          },\n        ],\n      },\n    },\n  })\n  async findPopular(@Query('limit') limit?: number) {\n    const faqs = await this.faqService.findPopularFaqs(limit);\n    return ApiResponse.success(faqs);\n  }\n\n  // FAQ Category endpoints - MUST come before :id routes\n  @ApiTags('FAQ Categories')\n  @Post('categories')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(UserRole.SUPER_ADMIN, UserRole.PRODUCER)\n  @HttpCode(HttpStatus.CREATED)\n  @ApiBearerAuth('JWT-auth')\n  @ApiOperation({ summary: 'Create new FAQ category (Admin/Producer only)' })\n  @ApiBody({ type: CreateFaqCategoryDto })\n  @SwaggerApiResponse({\n    status: 201,\n    description: 'Category created successfully',\n    schema: {\n      example: {\n        success: true,\n        data: {\n          _id: '507f1f77bcf86cd799439012',\n          name: { 'pt-BR': 'Inscrições', en: 'Registration' },\n          description: { 'pt-BR': 'Perguntas sobre inscrições', en: 'Registration questions' },\n          icon: 'ticket',\n          order: 1,\n        },\n      },\n    },\n  })\n  @SwaggerApiResponse({ status: 400, description: 'Validation error' })\n  @SwaggerApiResponse({ status: 401, description: 'Unauthorized' })\n  @SwaggerApiResponse({ status: 403, description: 'Forbidden' })\n  async createCategory(@Body() createCategoryDto: CreateFaqCategoryDto) {\n    const category = await this.faqService.createCategory(createCategoryDto);\n    return ApiResponse.success(category);\n  }\n\n  @ApiTags('FAQ Categories')\n  @Get('categories')\n  @Public()\n  @ApiOperation({ summary: 'List all FAQ categories' })\n  @SwaggerApiResponse({\n    status: 200,\n    description: 'List of FAQ categories',\n    schema: {\n      example: {\n        success: true,\n        data: [\n          {\n            _id: '507f1f77bcf86cd799439012',\n            name: { 'pt-BR': 'Geral', en: 'General' },\n            description: { 'pt-BR': 'Perguntas gerais', en: 'General questions' },\n            faqCount: 15,\n            order: 1,\n          },\n        ],\n      },\n    },\n  })\n  async findAllCategories() {\n    const categories = await this.faqService.findAllCategories();\n    return ApiResponse.success(categories);\n  }\n\n  @ApiTags('FAQ Categories')\n  @Get('categories/:id')\n  @Public()\n  @ApiOperation({ summary: 'Get FAQ category by ID' })\n  @ApiParam({ name: 'id', description: 'Category ID' })\n  @SwaggerApiResponse({\n    status: 200,\n    description: 'Category details with FAQs',\n  })\n  @SwaggerApiResponse({ status: 404, description: 'Category not found' })\n  async findOneCategory(@Param('id') id: string) {\n    const category = await this.faqService.findCategoryById(id);\n    return ApiResponse.success(category);\n  }\n\n  @ApiTags('FAQ Categories')\n  @Patch('categories/:id')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(UserRole.SUPER_ADMIN, UserRole.PRODUCER)\n  @ApiBearerAuth('JWT-auth')\n  @ApiOperation({ summary: 'Update FAQ category (Admin/Producer only)' })\n  @ApiParam({ name: 'id', description: 'Category ID' })\n  @ApiBody({ type: UpdateFaqCategoryDto })\n  @SwaggerApiResponse({ status: 200, description: 'Category updated successfully' })\n  @SwaggerApiResponse({ status: 400, description: 'Validation error' })\n  @SwaggerApiResponse({ status: 401, description: 'Unauthorized' })\n  @SwaggerApiResponse({ status: 403, description: 'Forbidden' })\n  @SwaggerApiResponse({ status: 404, description: 'Category not found' })\n  async updateCategory(@Param('id') id: string, @Body() updateCategoryDto: UpdateFaqCategoryDto) {\n    const category = await this.faqService.updateCategory(id, updateCategoryDto);\n    return ApiResponse.success(category);\n  }\n\n  @ApiTags('FAQ Categories')\n  @Delete('categories/:id')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(UserRole.SUPER_ADMIN)\n  @HttpCode(HttpStatus.NO_CONTENT)\n  @ApiBearerAuth('JWT-auth')\n  @ApiOperation({ summary: 'Delete FAQ category (Super Admin only)' })\n  @ApiParam({ name: 'id', description: 'Category ID' })\n  @SwaggerApiResponse({ status: 204, description: 'Category deleted successfully' })\n  @SwaggerApiResponse({ status: 401, description: 'Unauthorized' })\n  @SwaggerApiResponse({ status: 403, description: 'Forbidden' })\n  @SwaggerApiResponse({ status: 404, description: 'Category not found' })\n  @SwaggerApiResponse({ status: 409, description: 'Cannot delete category with existing FAQs' })\n  async removeCategory(@Param('id') id: string) {\n    await this.faqService.removeCategory(id);\n  }\n\n  // FAQ items with :id param routes - MUST come after specific routes\n  @Get(':id')\n  @Public()\n  @ApiOperation({ summary: 'Get FAQ item by ID' })\n  @ApiParam({ name: 'id', description: 'FAQ ID', example: '507f1f77bcf86cd799439011' })\n  @SwaggerApiResponse({\n    status: 200,\n    description: 'FAQ item details',\n    schema: {\n      example: {\n        success: true,\n        data: {\n          _id: '507f1f77bcf86cd799439011',\n          question: { 'pt-BR': 'Pergunta completa?', en: 'Complete question?' },\n          answer: { 'pt-BR': '<p>Resposta em HTML...</p>', en: '<p>HTML answer...</p>' },\n          category: { _id: '507f1f77bcf86cd799439012', name: { 'pt-BR': 'Geral', en: 'General' } },\n          tags: ['registration', 'tickets'],\n          viewCount: 250,\n          relatedFaqs: ['507f1f77bcf86cd799439013'],\n        },\n      },\n    },\n  })\n  @SwaggerApiResponse({ status: 404, description: 'FAQ not found' })\n  async findOne(@Param('id') id: string) {\n    const faq = await this.faqService.findFaqById(id);\n    return ApiResponse.success(faq);\n  }\n\n  @Patch(':id')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(UserRole.SUPER_ADMIN, UserRole.PRODUCER)\n  @ApiBearerAuth('JWT-auth')\n  @ApiOperation({ summary: 'Update FAQ item (Admin/Producer only)' })\n  @ApiParam({ name: 'id', description: 'FAQ ID' })\n  @ApiBody({ type: UpdateFaqDto })\n  @SwaggerApiResponse({\n    status: 200,\n    description: 'FAQ updated successfully',\n  })\n  @SwaggerApiResponse({ status: 400, description: 'Validation error' })\n  @SwaggerApiResponse({ status: 401, description: 'Unauthorized' })\n  @SwaggerApiResponse({ status: 403, description: 'Forbidden' })\n  @SwaggerApiResponse({ status: 404, description: 'FAQ not found' })\n  async update(@Param('id') id: string, @Body() updateFaqDto: UpdateFaqDto) {\n    const faq = await this.faqService.updateFaq(id, updateFaqDto);\n    return ApiResponse.success(faq);\n  }\n\n  @Delete(':id')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(UserRole.SUPER_ADMIN)\n  @HttpCode(HttpStatus.NO_CONTENT)\n  @ApiBearerAuth('JWT-auth')\n  @ApiOperation({ summary: 'Soft delete FAQ item (Super Admin only)' })\n  @ApiParam({ name: 'id', description: 'FAQ ID' })\n  @ApiQuery({ name: 'reason', required: false, description: 'Reason for deletion' })\n  @SwaggerApiResponse({ status: 204, description: 'FAQ deleted successfully' })\n  @SwaggerApiResponse({ status: 401, description: 'Unauthorized' })\n  @SwaggerApiResponse({ status: 403, description: 'Forbidden' })\n  @SwaggerApiResponse({ status: 404, description: 'FAQ not found' })\n  async remove(@Param('id') id: string, @Req() req: Request, @Query('reason') reason?: string) {\n    const userId = (req as any).user?.id;\n    await this.faqService.removeFaq(id, reason, userId);\n  }\n\n  @Post(':id/restore')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(UserRole.SUPER_ADMIN)\n  @ApiBearerAuth('JWT-auth')\n  @ApiOperation({ summary: 'Restore soft-deleted FAQ item (Super Admin only)' })\n  @ApiParam({ name: 'id', description: 'FAQ ID' })\n  @SwaggerApiResponse({\n    status: 200,\n    description: 'FAQ restored successfully',\n  })\n  @SwaggerApiResponse({ status: 401, description: 'Unauthorized' })\n  @SwaggerApiResponse({ status: 403, description: 'Forbidden' })\n  @SwaggerApiResponse({ status: 404, description: 'FAQ not found' })\n  async restore(@Param('id') id: string) {\n    const faq = await this.faqService.restoreFaq(id);\n    return ApiResponse.success(faq);\n  }\n}\n"],"version":3}