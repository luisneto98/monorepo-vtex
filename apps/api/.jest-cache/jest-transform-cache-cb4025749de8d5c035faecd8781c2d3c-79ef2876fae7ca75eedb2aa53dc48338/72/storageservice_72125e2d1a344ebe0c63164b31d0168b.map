{"file":"/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/storage/services/storage.service.ts","mappings":"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","names":[],"sources":["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/storage/services/storage.service.ts"],"sourcesContent":["import {\n  Injectable,\n  InternalServerErrorException,\n  Logger,\n  BadRequestException,\n} from '@nestjs/common';\nimport {\n  S3Client,\n  PutObjectCommand,\n  GetObjectCommand,\n  DeleteObjectCommand,\n  HeadObjectCommand,\n} from '@aws-sdk/client-s3';\nimport { getSignedUrl } from '@aws-sdk/s3-request-presigner';\nimport { Readable } from 'stream';\nimport { StorageConfigService } from './storage-config.service';\nimport { VirusScannerService } from './virus-scanner.service';\nimport {\n  FileCategory,\n  UploadResult,\n  UploadOptions,\n  FileValidationOptions,\n  MagicBytesPattern,\n} from '../types/storage.types';\n\n@Injectable()\nexport class StorageService {\n  private readonly s3Client: S3Client;\n  private readonly bucketName: string;\n  private readonly region: string;\n  private readonly logger = new Logger(StorageService.name);\n\n  // Magic bytes patterns for file type validation\n  private readonly magicBytesPatterns: MagicBytesPattern[] = [\n    { mimeType: 'image/jpeg', pattern: Buffer.from([0xff, 0xd8, 0xff]) },\n    {\n      mimeType: 'image/png',\n      pattern: Buffer.from([0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a]),\n    },\n    { mimeType: 'image/webp', pattern: Buffer.from([0x52, 0x49, 0x46, 0x46]), offset: 0 }, // RIFF\n    { mimeType: 'application/pdf', pattern: Buffer.from([0x25, 0x50, 0x44, 0x46]) }, // %PDF\n  ];\n\n  // Default options per category\n  private readonly categoryDefaults: Record<\n    FileCategory,\n    { maxSizeBytes: number; allowedMimeTypes: string[] }\n  > = {\n    [FileCategory.SPEAKER_PHOTOS]: {\n      maxSizeBytes: 5 * 1024 * 1024, // 5MB\n      allowedMimeTypes: ['image/jpeg', 'image/png', 'image/webp'],\n    },\n    [FileCategory.SPONSOR_LOGOS]: {\n      maxSizeBytes: 5 * 1024 * 1024, // 5MB\n      allowedMimeTypes: ['image/jpeg', 'image/png', 'image/webp'],\n    },\n    [FileCategory.LEGAL_DOCUMENTS]: {\n      maxSizeBytes: 10 * 1024 * 1024, // 10MB\n      allowedMimeTypes: ['application/pdf'],\n    },\n    [FileCategory.PRESS_MATERIALS]: {\n      maxSizeBytes: 10 * 1024 * 1024, // 10MB\n      allowedMimeTypes: ['application/pdf', 'image/jpeg', 'image/png'],\n    },\n  };\n\n  constructor(\n    private storageConfigService: StorageConfigService,\n    private virusScannerService: VirusScannerService,\n  ) {\n    this.region = this.storageConfigService.getAwsRegion();\n    this.bucketName = this.storageConfigService.getAwsBucket();\n\n    this.s3Client = new S3Client({\n      region: this.region,\n      credentials: {\n        accessKeyId: this.storageConfigService.getAwsAccessKeyId(),\n        secretAccessKey: this.storageConfigService.getAwsSecretAccessKey(),\n      },\n    });\n  }\n\n  /**\n   * Uploads a file to S3 with validation and virus scanning\n   * @param file - The file to upload\n   * @param category - The category of the file\n   * @param options - Optional upload options\n   * @returns Promise<UploadResult> - The S3 key and public URL\n   */\n  async uploadFile(\n    file: Express.Multer.File,\n    category: FileCategory,\n    options?: UploadOptions,\n  ): Promise<UploadResult> {\n    try {\n      // Get default options for category\n      const defaults = this.categoryDefaults[category];\n\n      // Merge options with defaults\n      const uploadOptions: UploadOptions = {\n        maxSizeBytes: options?.maxSizeBytes ?? defaults.maxSizeBytes,\n        allowedMimeTypes: options?.allowedMimeTypes ?? defaults.allowedMimeTypes,\n        scanForVirus: options?.scanForVirus ?? true,\n        metadata: options?.metadata,\n      };\n\n      // Validate file\n      await this.validateFile(file, {\n        maxSizeBytes: uploadOptions.maxSizeBytes!,\n        allowedMimeTypes: uploadOptions.allowedMimeTypes!,\n        validateMagicBytes: true,\n      });\n\n      // Scan for viruses\n      if (uploadOptions.scanForVirus) {\n        await this.virusScannerService.scanFile(file.buffer, file.originalname, file.mimetype);\n      }\n\n      // Generate unique S3 key\n      const key = this.generateFileKey(file.originalname, category);\n\n      // Upload to S3\n      const command = new PutObjectCommand({\n        Bucket: this.bucketName,\n        Key: key,\n        Body: file.buffer,\n        ContentType: file.mimetype,\n        Metadata: uploadOptions.metadata,\n      });\n\n      await this.s3Client.send(command);\n\n      const url = `https://${this.bucketName}.s3.${this.region}.amazonaws.com/${key}`;\n\n      this.logger.log(`File uploaded successfully to S3: ${key}`);\n      return { key, url };\n    } catch (error: any) {\n      // If it's a validation or scanning error, rethrow it\n      if (error instanceof BadRequestException) {\n        throw error;\n      }\n\n      this.logger.error(`Failed to upload file to S3: ${error.message}`, error.stack);\n      throw new InternalServerErrorException('Failed to upload file to storage');\n    }\n  }\n\n  /**\n   * Validates a file against specified options\n   * @param file - The file to validate\n   * @param options - Validation options\n   * @returns Promise<boolean> - true if valid, throws error otherwise\n   */\n  async validateFile(file: Express.Multer.File, options: FileValidationOptions): Promise<boolean> {\n    // Check file exists\n    if (!file || !file.buffer || file.buffer.length === 0) {\n      throw new BadRequestException('No file provided or file is empty');\n    }\n\n    // Check file size\n    if (file.size > options.maxSizeBytes) {\n      const maxSizeMB = (options.maxSizeBytes / (1024 * 1024)).toFixed(0);\n      throw new BadRequestException(`File size exceeds maximum allowed size of ${maxSizeMB}MB.`);\n    }\n\n    // Check MIME type\n    if (!options.allowedMimeTypes.includes(file.mimetype)) {\n      const allowedTypes = options.allowedMimeTypes\n        .map((type) => type.split('/')[1].toUpperCase())\n        .join(', ');\n      throw new BadRequestException(`Invalid file type. Only ${allowedTypes} files are allowed.`);\n    }\n\n    // Validate magic bytes if requested\n    if (options.validateMagicBytes) {\n      const isValidMagicBytes = this.validateMagicBytes(file.buffer, file.mimetype);\n      if (!isValidMagicBytes) {\n        throw new BadRequestException('File content does not match declared file type.');\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Validates file magic bytes match the declared MIME type\n   * @param buffer - The file buffer\n   * @param mimeType - The declared MIME type\n   * @returns boolean - true if magic bytes match\n   */\n  private validateMagicBytes(buffer: Buffer, mimeType: string): boolean {\n    const pattern = this.magicBytesPatterns.find((p) => p.mimeType === mimeType);\n\n    if (!pattern) {\n      // No pattern defined for this MIME type, skip validation\n      this.logger.debug(`No magic bytes pattern defined for ${mimeType}`);\n      return true;\n    }\n\n    const offset = pattern.offset ?? 0;\n    const fileBytes = buffer.slice(offset, offset + pattern.pattern.length);\n\n    // Special handling for WebP (RIFF...WEBP format)\n    if (mimeType === 'image/webp') {\n      const riffMatch = fileBytes.slice(0, 4).equals(pattern.pattern);\n      const webpMarker = buffer.slice(8, 12).toString('ascii');\n      return riffMatch && webpMarker === 'WEBP';\n    }\n\n    return fileBytes.equals(pattern.pattern);\n  }\n\n  /**\n   * Deletes a file from S3\n   * @param key - The S3 key of the file to delete\n   */\n  async deleteFile(key: string): Promise<void> {\n    try {\n      const command = new DeleteObjectCommand({\n        Bucket: this.bucketName,\n        Key: key,\n      });\n\n      await this.s3Client.send(command);\n      this.logger.log(`File deleted successfully from S3: ${key}`);\n    } catch (error: any) {\n      this.logger.error(`Failed to delete file from S3: ${error.message}`, error.stack);\n      // Don't throw error on delete failure, just log it\n    }\n  }\n\n  /**\n   * Gets a signed URL for secure file downloads\n   * @param key - The S3 key of the file\n   * @param expiresIn - URL expiration time in seconds (default: 3600)\n   * @returns Promise<string> - The signed URL\n   */\n  async getSignedUrl(key: string, expiresIn = 3600): Promise<string> {\n    try {\n      const command = new GetObjectCommand({\n        Bucket: this.bucketName,\n        Key: key,\n      });\n\n      return await getSignedUrl(this.s3Client, command, { expiresIn });\n    } catch (error: any) {\n      this.logger.error(`Failed to generate signed URL: ${error.message}`, error.stack);\n      throw new InternalServerErrorException('Failed to generate download URL');\n    }\n  }\n\n  /**\n   * Gets a file from S3\n   * @param key - The S3 key of the file\n   * @returns Promise<Readable> - The file stream\n   */\n  async getFile(key: string): Promise<Readable> {\n    try {\n      const command = new GetObjectCommand({\n        Bucket: this.bucketName,\n        Key: key,\n      });\n\n      const response = await this.s3Client.send(command);\n      return response.Body as Readable;\n    } catch (error: any) {\n      this.logger.error(`Failed to get file from S3: ${error.message}`, error.stack);\n      throw new InternalServerErrorException('Failed to retrieve file from storage');\n    }\n  }\n\n  /**\n   * Gets file metadata from S3\n   * @param key - The S3 key of the file\n   * @returns Promise<{size: number, contentType: string}>\n   */\n  async getFileMetadata(key: string): Promise<{ size: number; contentType: string }> {\n    try {\n      const command = new HeadObjectCommand({\n        Bucket: this.bucketName,\n        Key: key,\n      });\n\n      const response = await this.s3Client.send(command);\n      return {\n        size: response.ContentLength || 0,\n        contentType: response.ContentType || 'application/octet-stream',\n      };\n    } catch (error: any) {\n      this.logger.error(`Failed to get file metadata from S3: ${error.message}`, error.stack);\n      throw new InternalServerErrorException('Failed to retrieve file metadata');\n    }\n  }\n\n  /**\n   * Generates a unique S3 key for a file\n   * @param filename - The original filename\n   * @param category - The file category\n   * @returns string - The generated S3 key\n   */\n  private generateFileKey(filename: string, category: FileCategory): string {\n    const timestamp = Date.now();\n    const random = Math.round(Math.random() * 1e9);\n    const extension = filename.split('.').pop() || 'bin';\n    const sanitizedExtension = extension.replace(/[^a-zA-Z0-9]/g, '').toLowerCase();\n\n    return `${category}/${timestamp}-${random}.${sanitizedExtension}`;\n  }\n}\n"],"version":3}