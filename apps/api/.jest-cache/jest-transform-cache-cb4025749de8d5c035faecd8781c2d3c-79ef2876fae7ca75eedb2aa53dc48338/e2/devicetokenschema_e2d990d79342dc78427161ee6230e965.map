{"file":"/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/notifications/schemas/device-token.schema.ts","mappings":";;;;;;;;;;;;AAAA,+CAA+D;AAC/D,uCAA2C;AAC3C,mEAA+D;AAI/D,IAAY,QAIX;AAJD,WAAY,QAAQ;IAClB,uBAAW,CAAA;IACX,+BAAmB,CAAA;IACnB,uBAAW,CAAA;AACb,CAAC,EAJW,QAAQ,wBAAR,QAAQ,QAInB;AAGM,IAAM,WAAW,GAAjB,MAAM,WAAW;IAEtB,MAAM,CAAkB;IAGxB,KAAK,CAAS,CAAC,2BAA2B;IAO1C,QAAQ,CAAW;IAGnB,UAAU,CAAU;IAGpB,UAAU,CAAO;IAGjB,YAAY,CAAU;IAGtB,SAAS,CAAO;IAGhB,SAAS,CAAO;CACjB,CAAA;AA5BY,kCAAW;AAEtB;IADC,IAAA,eAAI,EAAC,EAAE,IAAI,EAAE,gBAAK,CAAC,QAAQ,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC;8BACnC,gBAAK,CAAC,QAAQ;2CAAC;AAGxB;IADC,IAAA,eAAI,EAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;;0CACX;AAOd;IALC,IAAA,eAAI,EAAC;QACJ,IAAI,EAAE,MAAM;QACZ,IAAI,EAAE,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC;QAC7B,QAAQ,EAAE,IAAI;KACf,CAAC;;6CACiB;AAGnB;IADC,IAAA,eAAI,GAAE;;+CACa;AAGpB;IADC,IAAA,eAAI,EAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,IAAI,EAAE,EAAE,CAAC;8BACxC,IAAI;+CAAC;AAGjB;IADC,IAAA,eAAI,EAAC,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC;;iDACH;AAGtB;IADC,IAAA,eAAI,GAAE;8BACI,IAAI;8CAAC;AAGhB;IADC,IAAA,eAAI,GAAE;8BACI,IAAI;8CAAC;sBA3BL,WAAW;IADvB,IAAA,iBAAM,EAAC,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC;GAChB,WAAW,CA4BvB;AAEY,QAAA,iBAAiB,GAAG,wBAAa,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;AAE3E,8BAA8B;AAC9B,yBAAiB,CAAC,GAAG,CAAC,MAAM,EAAE,UAAU,IAAI;IAC1C,IAAI,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC,KAAK,EAAE,CAAC;QAC3C,wEAAwE;QACxE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC;YAC9B,IAAI,CAAC,KAAK,GAAG,gCAAc,CAAC,kBAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC7D,CAAC;IACH,CAAC;IACD,IAAI,EAAE,CAAC;AACT,CAAC,CAAC,CAAC;AAEH,oCAAoC;AACpC,yBAAiB,CAAC,OAAO,CAAC,mBAAmB,CAAC,GAAG;IAC/C,OAAO,gCAAc,CAAC,kBAAkB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;AAC1D,CAAC,CAAC;AAEF,0BAA0B;AAC1B,yBAAiB,CAAC,KAAK,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC;AACvC,yBAAiB,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;AACxD,yBAAiB,CAAC,KAAK,CAAC,EAAE,YAAY,EAAE,CAAC,EAAE,CAAC,CAAC;AAC7C,yBAAiB,CAAC,KAAK,CAAC,EAAE,UAAU,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC","names":[],"sources":["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/notifications/schemas/device-token.schema.ts"],"sourcesContent":["import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document, Types } from 'mongoose';\nimport { EncryptionUtil } from '@common/utils/encryption.util';\n\nexport type DeviceTokenDocument = DeviceToken & Document;\n\nexport enum Platform {\n  IOS = 'ios',\n  ANDROID = 'android',\n  WEB = 'web',\n}\n\n@Schema({ timestamps: true })\nexport class DeviceToken {\n  @Prop({ type: Types.ObjectId, ref: 'User' })\n  userId?: Types.ObjectId;\n\n  @Prop({ required: true })\n  token: string; // Stored encrypted at rest\n\n  @Prop({\n    type: String,\n    enum: Object.values(Platform),\n    required: true,\n  })\n  platform: Platform;\n\n  @Prop()\n  appVersion?: string;\n\n  @Prop({ required: true, default: () => new Date() })\n  lastActive: Date;\n\n  @Prop({ default: false })\n  isTestDevice: boolean;\n\n  @Prop()\n  createdAt: Date;\n\n  @Prop()\n  updatedAt: Date;\n}\n\nexport const DeviceTokenSchema = SchemaFactory.createForClass(DeviceToken);\n\n// Encrypt token before saving\nDeviceTokenSchema.pre('save', function (next) {\n  if (this.isModified('token') && this.token) {\n    // Only encrypt if not already encrypted (doesn't contain ':' separator)\n    if (!this.token.includes(':')) {\n      this.token = EncryptionUtil.encryptDeviceToken(this.token);\n    }\n  }\n  next();\n});\n\n// Add method to get decrypted token\nDeviceTokenSchema.methods['getDecryptedToken'] = function (): string {\n  return EncryptionUtil.decryptDeviceToken(this['token']);\n};\n\n// Indexes for performance\nDeviceTokenSchema.index({ userId: 1 });\nDeviceTokenSchema.index({ token: 1 }, { unique: true });\nDeviceTokenSchema.index({ isTestDevice: 1 });\nDeviceTokenSchema.index({ lastActive: -1 });\n"],"version":3}