{"version":3,"names":["cov_3hm6o14sy","actualCoverage","mongoose_1","s","require","mongoose_2","encryption_util_1","Platform","f","b","exports","DeviceToken","userId","token","platform","appVersion","lastActive","isTestDevice","createdAt","updatedAt","__decorate","Prop","type","Types","ObjectId","ref","required","String","enum","Object","values","default","Date","Schema","timestamps","DeviceTokenSchema","SchemaFactory","createForClass","pre","next","isModified","includes","EncryptionUtil","encryptDeviceToken","methods","decryptDeviceToken","index","unique"],"sources":["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/notifications/schemas/device-token.schema.ts"],"sourcesContent":["import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document, Types } from 'mongoose';\nimport { EncryptionUtil } from '@common/utils/encryption.util';\n\nexport type DeviceTokenDocument = DeviceToken & Document;\n\nexport enum Platform {\n  IOS = 'ios',\n  ANDROID = 'android',\n  WEB = 'web',\n}\n\n@Schema({ timestamps: true })\nexport class DeviceToken {\n  @Prop({ type: Types.ObjectId, ref: 'User' })\n  userId?: Types.ObjectId;\n\n  @Prop({ required: true })\n  token: string; // Stored encrypted at rest\n\n  @Prop({\n    type: String,\n    enum: Object.values(Platform),\n    required: true,\n  })\n  platform: Platform;\n\n  @Prop()\n  appVersion?: string;\n\n  @Prop({ required: true, default: () => new Date() })\n  lastActive: Date;\n\n  @Prop({ default: false })\n  isTestDevice: boolean;\n\n  @Prop()\n  createdAt: Date;\n\n  @Prop()\n  updatedAt: Date;\n}\n\nexport const DeviceTokenSchema = SchemaFactory.createForClass(DeviceToken);\n\n// Encrypt token before saving\nDeviceTokenSchema.pre('save', function (next) {\n  if (this.isModified('token') && this.token) {\n    // Only encrypt if not already encrypted (doesn't contain ':' separator)\n    if (!this.token.includes(':')) {\n      this.token = EncryptionUtil.encryptDeviceToken(this.token);\n    }\n  }\n  next();\n});\n\n// Add method to get decrypted token\nDeviceTokenSchema.methods['getDecryptedToken'] = function (): string {\n  return EncryptionUtil.decryptDeviceToken(this['token']);\n};\n\n// Indexes for performance\nDeviceTokenSchema.index({ userId: 1 });\nDeviceTokenSchema.index({ token: 1 }, { unique: true });\nDeviceTokenSchema.index({ isTestDevice: 1 });\nDeviceTokenSchema.index({ lastActive: -1 });\n"],"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","ignoreList":[]}