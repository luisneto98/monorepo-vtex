{"file":"/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/event-settings/event-settings.controller.spec.ts","mappings":"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","names":[],"sources":["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/event-settings/event-settings.controller.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { EventSettingsController } from './event-settings.controller';\nimport { EventSettingsService } from './event-settings.service';\nimport { UpdateEventSettingsDto } from './dto/update-event-settings.dto';\n\ndescribe('EventSettingsController', () => {\n  let controller: EventSettingsController;\n  let service: EventSettingsService;\n\n  const mockEventSettings = {\n    _id: '123',\n    eventName: {\n      pt: 'VTEX Day 2026',\n      en: 'VTEX Day 2026',\n      es: 'VTEX Day 2026',\n    },\n    startDate: new Date('2026-06-01T09:00:00Z'),\n    endDate: new Date('2026-06-03T18:00:00Z'),\n    venue: {\n      name: 'São Paulo Expo',\n      address: 'Rodovia dos Imigrantes, km 1,5',\n      city: 'São Paulo',\n      state: 'SP',\n      zipCode: '04329-100',\n      complement: 'Água Funda',\n    },\n    contact: {\n      email: 'contato@vtexday.com.br',\n      phone: '+55 11 9999-9999',\n      whatsapp: '+55 11 9999-9999',\n    },\n    socialMedia: {\n      instagram: 'https://instagram.com/vtexday',\n      facebook: 'https://facebook.com/vtexday',\n      linkedin: 'https://linkedin.com/company/vtexday',\n      twitter: 'https://twitter.com/vtexday',\n      youtube: 'https://youtube.com/vtexday',\n    },\n    mapCoordinates: {\n      latitude: -23.6283,\n      longitude: -46.6409,\n    },\n    updatedBy: 'user123',\n  };\n\n  beforeEach(async () => {\n    const mockService = {\n      getSettings: jest.fn(),\n      getPublicSettings: jest.fn(),\n      updateSettings: jest.fn(),\n    };\n\n    const module: TestingModule = await Test.createTestingModule({\n      controllers: [EventSettingsController],\n      providers: [\n        {\n          provide: EventSettingsService,\n          useValue: mockService,\n        },\n      ],\n    }).compile();\n\n    controller = module.get<EventSettingsController>(EventSettingsController);\n    service = module.get<EventSettingsService>(EventSettingsService);\n  });\n\n  describe('getSettings', () => {\n    it('should return event settings', async () => {\n      jest.spyOn(service, 'getSettings').mockResolvedValue(mockEventSettings);\n\n      const result = await controller.getSettings();\n\n      expect(service.getSettings).toHaveBeenCalled();\n      expect(result).toEqual(mockEventSettings);\n    });\n\n    it('should handle service errors', async () => {\n      const error = new Error('Database error');\n      jest.spyOn(service, 'getSettings').mockRejectedValue(error);\n\n      await expect(controller.getSettings()).rejects.toThrow(error);\n    });\n  });\n\n  describe('updateSettings', () => {\n    it('should update event settings', async () => {\n      const updateDto: UpdateEventSettingsDto = {\n        eventName: {\n          pt: 'VTEX Day 2027',\n          en: 'VTEX Day 2027',\n          es: 'VTEX Day 2027',\n        },\n      };\n\n      const mockRequest = {\n        user: {\n          userId: 'user123',\n          email: 'admin@example.com',\n          role: 'ADMIN',\n        },\n      };\n\n      const updatedSettings = {\n        ...mockEventSettings,\n        eventName: updateDto.eventName || mockEventSettings.eventName,\n      };\n      jest.spyOn(service, 'updateSettings').mockResolvedValue(updatedSettings);\n\n      const result = await controller.updateSettings(updateDto, mockRequest);\n\n      expect(service.updateSettings).toHaveBeenCalledWith(updateDto, 'user123');\n      expect(result).toEqual(updatedSettings);\n    });\n\n    it('should pass user ID to service', async () => {\n      const updateDto: UpdateEventSettingsDto = {};\n      const mockRequest = {\n        user: {\n          userId: 'admin456',\n          email: 'admin@example.com',\n          role: 'ADMIN',\n        },\n      };\n\n      jest.spyOn(service, 'updateSettings').mockResolvedValue(mockEventSettings);\n\n      await controller.updateSettings(updateDto, mockRequest);\n\n      expect(service.updateSettings).toHaveBeenCalledWith(updateDto, 'admin456');\n    });\n  });\n\n  describe('getPublicSettings', () => {\n    it('should return public event settings', async () => {\n      const publicSettings = { ...mockEventSettings, updatedBy: '' };\n      jest.spyOn(service, 'getPublicSettings').mockResolvedValue(publicSettings);\n\n      const result = await controller.getPublicSettings();\n\n      expect(service.getPublicSettings).toHaveBeenCalled();\n      expect(result).toEqual(publicSettings);\n    });\n\n    it('should handle service errors', async () => {\n      const error = new Error('Service error');\n      jest.spyOn(service, 'getPublicSettings').mockRejectedValue(error);\n\n      await expect(controller.getPublicSettings()).rejects.toThrow(error);\n    });\n  });\n});\n"],"version":3}