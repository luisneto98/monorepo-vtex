9ea096bb0a44cb21ac61f26dda3f7335
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NewsReleaseSchema = exports.NewsRelease = exports.AuthorSchema = exports.Author = exports.ImageGallerySchema = exports.ImageGallery = exports.LocalizedContentSchema = exports.LocalizedContent = void 0;
const mongoose_1 = require("@nestjs/mongoose");
const shared_1 = require("@vtexday26/shared");
let LocalizedContent = class LocalizedContent {
    title;
    subtitle;
    content;
    metaTitle;
    metaDescription;
    keywords;
};
exports.LocalizedContent = LocalizedContent;
__decorate([
    (0, mongoose_1.Prop)({ required: true }),
    __metadata("design:type", String)
], LocalizedContent.prototype, "title", void 0);
__decorate([
    (0, mongoose_1.Prop)(),
    __metadata("design:type", String)
], LocalizedContent.prototype, "subtitle", void 0);
__decorate([
    (0, mongoose_1.Prop)({ required: true }),
    __metadata("design:type", String)
], LocalizedContent.prototype, "content", void 0);
__decorate([
    (0, mongoose_1.Prop)(),
    __metadata("design:type", String)
], LocalizedContent.prototype, "metaTitle", void 0);
__decorate([
    (0, mongoose_1.Prop)(),
    __metadata("design:type", String)
], LocalizedContent.prototype, "metaDescription", void 0);
__decorate([
    (0, mongoose_1.Prop)([String]),
    __metadata("design:type", Array)
], LocalizedContent.prototype, "keywords", void 0);
exports.LocalizedContent = LocalizedContent = __decorate([
    (0, mongoose_1.Schema)({ _id: false })
], LocalizedContent);
exports.LocalizedContentSchema = mongoose_1.SchemaFactory.createForClass(LocalizedContent);
let ImageGallery = class ImageGallery {
    _id;
    url;
    thumbnailUrl;
    caption;
    altText;
    order;
    uploadedAt;
};
exports.ImageGallery = ImageGallery;
__decorate([
    (0, mongoose_1.Prop)(),
    __metadata("design:type", String)
], ImageGallery.prototype, "_id", void 0);
__decorate([
    (0, mongoose_1.Prop)({ required: true }),
    __metadata("design:type", String)
], ImageGallery.prototype, "url", void 0);
__decorate([
    (0, mongoose_1.Prop)(),
    __metadata("design:type", String)
], ImageGallery.prototype, "thumbnailUrl", void 0);
__decorate([
    (0, mongoose_1.Prop)({ type: Object }),
    __metadata("design:type", Object)
], ImageGallery.prototype, "caption", void 0);
__decorate([
    (0, mongoose_1.Prop)({ type: Object }),
    __metadata("design:type", Object)
], ImageGallery.prototype, "altText", void 0);
__decorate([
    (0, mongoose_1.Prop)({ required: true }),
    __metadata("design:type", Number)
], ImageGallery.prototype, "order", void 0);
__decorate([
    (0, mongoose_1.Prop)({ default: Date.now }),
    __metadata("design:type", Date)
], ImageGallery.prototype, "uploadedAt", void 0);
exports.ImageGallery = ImageGallery = __decorate([
    (0, mongoose_1.Schema)({ _id: false })
], ImageGallery);
exports.ImageGallerySchema = mongoose_1.SchemaFactory.createForClass(ImageGallery);
let Author = class Author {
    id;
    name;
    email;
};
exports.Author = Author;
__decorate([
    (0, mongoose_1.Prop)({ required: true }),
    __metadata("design:type", String)
], Author.prototype, "id", void 0);
__decorate([
    (0, mongoose_1.Prop)({ required: true }),
    __metadata("design:type", String)
], Author.prototype, "name", void 0);
__decorate([
    (0, mongoose_1.Prop)({ required: true }),
    __metadata("design:type", String)
], Author.prototype, "email", void 0);
exports.Author = Author = __decorate([
    (0, mongoose_1.Schema)({ _id: false })
], Author);
exports.AuthorSchema = mongoose_1.SchemaFactory.createForClass(Author);
let NewsRelease = class NewsRelease {
    slug;
    content;
    status;
    featured;
    featuredImage;
    images;
    categories;
    tags;
    author;
    publishedAt;
    scheduledFor;
    viewCount;
    relatedArticles;
    isDeleted;
    deletedAt;
    version;
    // Timestamps are automatically added by Mongoose when timestamps: true
    createdAt;
    updatedAt;
};
exports.NewsRelease = NewsRelease;
__decorate([
    (0, mongoose_1.Prop)({
        unique: true,
        required: true,
        index: true,
    }),
    __metadata("design:type", String)
], NewsRelease.prototype, "slug", void 0);
__decorate([
    (0, mongoose_1.Prop)({
        type: {
            'pt-BR': { type: exports.LocalizedContentSchema, required: true },
            en: { type: exports.LocalizedContentSchema, required: true },
            es: { type: exports.LocalizedContentSchema, required: true },
        },
        _id: false,
        required: true,
    }),
    __metadata("design:type", Object)
], NewsRelease.prototype, "content", void 0);
__decorate([
    (0, mongoose_1.Prop)({
        type: String,
        enum: Object.values(shared_1.NewsReleaseStatus),
        default: shared_1.NewsReleaseStatus.DRAFT,
        index: true,
    }),
    __metadata("design:type", String)
], NewsRelease.prototype, "status", void 0);
__decorate([
    (0, mongoose_1.Prop)({ default: false, index: true }),
    __metadata("design:type", Boolean)
], NewsRelease.prototype, "featured", void 0);
__decorate([
    (0, mongoose_1.Prop)(),
    __metadata("design:type", String)
], NewsRelease.prototype, "featuredImage", void 0);
__decorate([
    (0, mongoose_1.Prop)({ type: [exports.ImageGallerySchema], default: [] }),
    __metadata("design:type", Array)
], NewsRelease.prototype, "images", void 0);
__decorate([
    (0, mongoose_1.Prop)([String]),
    __metadata("design:type", Array)
], NewsRelease.prototype, "categories", void 0);
__decorate([
    (0, mongoose_1.Prop)({ type: [String], index: true }),
    __metadata("design:type", Array)
], NewsRelease.prototype, "tags", void 0);
__decorate([
    (0, mongoose_1.Prop)({ type: exports.AuthorSchema, required: true }),
    __metadata("design:type", Author)
], NewsRelease.prototype, "author", void 0);
__decorate([
    (0, mongoose_1.Prop)({ index: true }),
    __metadata("design:type", Date)
], NewsRelease.prototype, "publishedAt", void 0);
__decorate([
    (0, mongoose_1.Prop)(),
    __metadata("design:type", Date)
], NewsRelease.prototype, "scheduledFor", void 0);
__decorate([
    (0, mongoose_1.Prop)({ default: 0 }),
    __metadata("design:type", Number)
], NewsRelease.prototype, "viewCount", void 0);
__decorate([
    (0, mongoose_1.Prop)([String]),
    __metadata("design:type", Array)
], NewsRelease.prototype, "relatedArticles", void 0);
__decorate([
    (0, mongoose_1.Prop)({ default: false }),
    __metadata("design:type", Boolean)
], NewsRelease.prototype, "isDeleted", void 0);
__decorate([
    (0, mongoose_1.Prop)(),
    __metadata("design:type", Date)
], NewsRelease.prototype, "deletedAt", void 0);
__decorate([
    (0, mongoose_1.Prop)({ default: 0 }),
    __metadata("design:type", Number)
], NewsRelease.prototype, "version", void 0);
exports.NewsRelease = NewsRelease = __decorate([
    (0, mongoose_1.Schema)({ timestamps: true, versionKey: 'version' })
], NewsRelease);
exports.NewsReleaseSchema = mongoose_1.SchemaFactory.createForClass(NewsRelease);
// Compound indexes for common queries
exports.NewsReleaseSchema.index({ status: 1, publishedAt: -1 });
exports.NewsReleaseSchema.index({ status: 1, featured: 1, publishedAt: -1 });
exports.NewsReleaseSchema.index({ isDeleted: 1, status: 1, publishedAt: -1 });
// Full text search index with weights for better relevance
exports.NewsReleaseSchema.index({
    'content.pt-BR.title': 'text',
    'content.en.title': 'text',
    'content.es.title': 'text',
    'content.pt-BR.subtitle': 'text',
    'content.en.subtitle': 'text',
    'content.es.subtitle': 'text',
    'content.pt-BR.content': 'text',
    'content.en.content': 'text',
    'content.es.content': 'text',
    'content.pt-BR.keywords': 'text',
    'content.en.keywords': 'text',
    'content.es.keywords': 'text',
    tags: 'text',
    categories: 'text',
}, {
    weights: {
        'content.pt-BR.title': 10,
        'content.en.title': 10,
        'content.es.title': 10,
        'content.pt-BR.subtitle': 5,
        'content.en.subtitle': 5,
        'content.es.subtitle': 5,
        'content.pt-BR.keywords': 3,
        'content.en.keywords': 3,
        'content.es.keywords': 3,
        tags: 3,
        categories: 2,
        'content.pt-BR.content': 1,
        'content.en.content': 1,
        'content.es.content': 1,
    },
    name: 'news_search_index',
    default_language: 'english',
    language_override: 'language',
});
// Multikey indexes for array fields
exports.NewsReleaseSchema.index({ tags: 1 });
exports.NewsReleaseSchema.index({ categories: 1 });
exports.NewsReleaseSchema.index({ tags: 1, categories: 1 });
// Single field indexes for sorting and filtering
exports.NewsReleaseSchema.index({ createdAt: -1 });
exports.NewsReleaseSchema.index({ updatedAt: -1 });
exports.NewsReleaseSchema.index({ viewCount: -1 });
exports.NewsReleaseSchema.index({ publishedAt: -1 });
exports.NewsReleaseSchema.index({ scheduledFor: 1 });
// Partial indexes for performance optimization
exports.NewsReleaseSchema.index({ featured: 1, publishedAt: -1 }, { partialFilterExpression: { featured: true, status: shared_1.NewsReleaseStatus.PUBLISHED } });
// Index for soft delete queries
exports.NewsReleaseSchema.index({ isDeleted: 1, status: 1 }, { partialFilterExpression: { isDeleted: false } });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,