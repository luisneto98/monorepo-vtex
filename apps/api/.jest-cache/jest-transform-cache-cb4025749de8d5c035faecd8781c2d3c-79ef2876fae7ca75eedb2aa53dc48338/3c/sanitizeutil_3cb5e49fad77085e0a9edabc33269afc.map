{"file":"/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/common/utils/sanitize.util.ts","mappings":";;;;;AAQA,kEAWC;AAOD,8DAcC;AAOD,oDAgBC;AA/DD,kEAAyC;AAEzC;;;;;GAKG;AACH,SAAgB,2BAA2B,CAAC,OAAe;IACzD,IAAI,CAAC,OAAO,EAAE,CAAC;QACb,OAAO,EAAE,CAAC;IACZ,CAAC;IAED,2DAA2D;IAC3D,OAAO,IAAA,uBAAY,EAAC,OAAO,EAAE;QAC3B,WAAW,EAAE,EAAE,EAAE,uBAAuB;QACxC,iBAAiB,EAAE,EAAE,EAAE,wBAAwB;QAC/C,kBAAkB,EAAE,iBAAiB,EAAE,8CAA8C;KACtF,CAAC,CAAC,IAAI,EAAE,CAAC;AACZ,CAAC;AAED;;;;GAIG;AACH,SAAgB,yBAAyB,CAAC,KAAa;IACrD,IAAI,CAAC,KAAK,EAAE,CAAC;QACX,OAAO,EAAE,CAAC;IACZ,CAAC;IAED,yCAAyC;IACzC,MAAM,SAAS,GAAG,IAAA,uBAAY,EAAC,KAAK,EAAE;QACpC,WAAW,EAAE,EAAE;QACf,iBAAiB,EAAE,EAAE;QACrB,kBAAkB,EAAE,iBAAiB;KACtC,CAAC,CAAC,IAAI,EAAE,CAAC;IAEV,2EAA2E;IAC3E,OAAO,SAAS,CAAC,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;AAC5C,CAAC;AAED;;;;GAIG;AACH,SAAgB,oBAAoB,CAAC,YAIpC;IACC,MAAM,MAAM,GAAQ,EAAE,GAAG,YAAY,EAAE,CAAC;IAExC,IAAI,YAAY,CAAC,KAAK,KAAK,SAAS,EAAE,CAAC;QACrC,MAAM,CAAC,KAAK,GAAG,yBAAyB,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;IAC/D,CAAC;IAED,IAAI,YAAY,CAAC,OAAO,KAAK,SAAS,EAAE,CAAC;QACvC,MAAM,CAAC,OAAO,GAAG,2BAA2B,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;IACrE,CAAC;IAED,OAAO,MAAM,CAAC;AAChB,CAAC","names":[],"sources":["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/common/utils/sanitize.util.ts"],"sourcesContent":["import sanitizeHtml from 'sanitize-html';\n\n/**\n * Sanitizes notification content to prevent XSS attacks\n * Removes all HTML tags and potentially harmful content\n * @param content - Raw user input content\n * @returns Sanitized safe content\n */\nexport function sanitizeNotificationContent(content: string): string {\n  if (!content) {\n    return '';\n  }\n\n  // Strip all HTML tags and scripts, keeping only plain text\n  return sanitizeHtml(content, {\n    allowedTags: [], // No HTML tags allowed\n    allowedAttributes: {}, // No attributes allowed\n    disallowedTagsMode: 'recursiveEscape', // Escape disallowed tags instead of stripping\n  }).trim();\n}\n\n/**\n * Sanitizes notification title with strict rules\n * @param title - Raw user input title\n * @returns Sanitized safe title\n */\nexport function sanitizeNotificationTitle(title: string): string {\n  if (!title) {\n    return '';\n  }\n\n  // Strip all HTML and limit to plain text\n  const sanitized = sanitizeHtml(title, {\n    allowedTags: [],\n    allowedAttributes: {},\n    disallowedTagsMode: 'recursiveEscape',\n  }).trim();\n\n  // Remove any remaining special characters that could be used for injection\n  return sanitized.replace(/[<>\\\"'`]/g, '');\n}\n\n/**\n * Validates and sanitizes a complete notification object\n * @param notification - Notification data to sanitize\n * @returns Sanitized notification object\n */\nexport function sanitizeNotification(notification: {\n  title?: string;\n  message?: string;\n  [key: string]: any;\n}): { title?: string; message?: string; [key: string]: any } {\n  const result: any = { ...notification };\n\n  if (notification.title !== undefined) {\n    result.title = sanitizeNotificationTitle(notification.title);\n  }\n\n  if (notification.message !== undefined) {\n    result.message = sanitizeNotificationContent(notification.message);\n  }\n\n  return result;\n}\n"],"version":3}