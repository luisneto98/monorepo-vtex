bb62c25ff25a4132138c38ff81107a58
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const mongoose_1 = require("@nestjs/mongoose");
const cache_manager_1 = require("@nestjs/cache-manager");
const system_config_service_1 = require("../../../../src/modules/system-config/system-config.service");
const system_config_schema_1 = require("../../../../src/modules/system-config/schemas/system-config.schema");
const visibility_audit_schema_1 = require("../../../../src/modules/system-config/schemas/visibility-audit.schema");
describe('SystemConfigService', () => {
    let service;
    let mockConfigModel;
    let mockAuditModel;
    let mockCacheManager;
    beforeEach(async () => {
        // Create mock models
        mockConfigModel = {
            findOne: jest.fn().mockReturnThis(),
            exec: jest.fn(),
            save: jest.fn(),
            new: jest.fn(),
        };
        mockAuditModel = {
            find: jest.fn().mockReturnThis(),
            countDocuments: jest.fn().mockReturnThis(),
            sort: jest.fn().mockReturnThis(),
            skip: jest.fn().mockReturnThis(),
            limit: jest.fn().mockReturnThis(),
            exec: jest.fn(),
            save: jest.fn(),
            new: jest.fn(),
        };
        mockCacheManager = {
            get: jest.fn(),
            set: jest.fn(),
            del: jest.fn(),
        };
        const module = await testing_1.Test.createTestingModule({
            providers: [
                system_config_service_1.SystemConfigService,
                {
                    provide: (0, mongoose_1.getModelToken)(system_config_schema_1.SystemConfig.name),
                    useValue: mockConfigModel,
                },
                {
                    provide: (0, mongoose_1.getModelToken)(visibility_audit_schema_1.VisibilityAudit.name),
                    useValue: mockAuditModel,
                },
                {
                    provide: cache_manager_1.CACHE_MANAGER,
                    useValue: mockCacheManager,
                },
            ],
        }).compile();
        service = module.get(system_config_service_1.SystemConfigService);
    });
    it('should be defined', () => {
        expect(service).toBeDefined();
    });
    describe('getConfig', () => {
        it('should return cached config if available', async () => {
            const cachedConfig = {
                sections: {
                    speakers: { isVisible: true },
                    sponsors: { isVisible: false },
                },
            };
            mockCacheManager.get.mockResolvedValue(cachedConfig);
            const result = await service.getConfig();
            expect(result).toEqual(cachedConfig);
            expect(mockCacheManager.get).toHaveBeenCalledWith('system-config');
            expect(mockConfigModel.findOne).not.toHaveBeenCalled();
        });
        it('should create default config if none exists', async () => {
            mockCacheManager.get.mockResolvedValue(null);
            mockConfigModel.exec.mockResolvedValue(null);
            const defaultConfig = {
                sections: {
                    speakers: { isVisible: true, lastChanged: new Date(), changedBy: 'system' },
                    sponsors: { isVisible: true, lastChanged: new Date(), changedBy: 'system' },
                    sessions: { isVisible: true, lastChanged: new Date(), changedBy: 'system' },
                    faq: { isVisible: true, lastChanged: new Date(), changedBy: 'system' },
                    registration: { isVisible: true, lastChanged: new Date(), changedBy: 'system' },
                    schedule: { isVisible: true, lastChanged: new Date(), changedBy: 'system' },
                },
                lastModifiedBy: 'system',
                version: 1,
                toObject: jest.fn().mockReturnThis(),
            };
            // Mock the constructor function
            const MockConfigConstructor = jest.fn().mockImplementation(() => ({
                ...defaultConfig,
                save: jest.fn().mockResolvedValue(defaultConfig),
            }));
            mockConfigModel.constructor = MockConfigConstructor;
            service['systemConfigModel'] = MockConfigConstructor;
            await service.getConfig();
            expect(mockCacheManager.get).toHaveBeenCalledWith('system-config');
            expect(mockCacheManager.set).toHaveBeenCalled();
        });
    });
    describe('getSectionVisibility', () => {
        it('should return visibility for a specific section', async () => {
            const mockConfig = {
                sections: {
                    speakers: { isVisible: true, lastChanged: new Date(), changedBy: 'user1' },
                    sponsors: { isVisible: false, lastChanged: new Date(), changedBy: 'user2' },
                    sessions: { isVisible: true, lastChanged: new Date(), changedBy: 'user1' },
                    faq: { isVisible: true, lastChanged: new Date(), changedBy: 'user1' },
                    registration: { isVisible: true, lastChanged: new Date(), changedBy: 'user1' },
                    schedule: { isVisible: true, lastChanged: new Date(), changedBy: 'user1' },
                },
            };
            mockCacheManager.get.mockResolvedValue(mockConfig);
            const result = await service.getSectionVisibility('speakers');
            expect(result).toEqual(mockConfig.sections.speakers);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,