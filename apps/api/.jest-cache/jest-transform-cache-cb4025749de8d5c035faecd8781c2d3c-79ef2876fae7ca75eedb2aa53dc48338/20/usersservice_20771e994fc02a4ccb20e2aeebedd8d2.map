{"version":3,"names":["cov_1i2iwgy9kl","actualCoverage","common_1","s","require","mongoose_1","mongoose_2","user_schema_1","UsersService","userModel","constructor","f","create","createUserDto","existingUser","findOne","email","b","ConflictException","createdUser","save","findAll","find","select","exec","findById","id","includeRefreshToken","query","user","NotFoundException","findByEmail","update","updateUserDto","updatedUser","findByIdAndUpdate","new","remove","result","deleteOne","_id","deletedCount","updateRefreshToken","userId","refreshToken","exports","__decorate","Injectable","__param","InjectModel","User","name","Model"],"sources":["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/users/users.service.ts"],"sourcesContent":["import { Injectable, NotFoundException, ConflictException } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { User, UserDocument } from './schemas/user.schema';\n\n@Injectable()\nexport class UsersService {\n  constructor(@InjectModel(User.name) private userModel: Model<UserDocument>) {}\n\n  async create(createUserDto: any): Promise<UserDocument> {\n    const existingUser = await this.userModel.findOne({ email: createUserDto.email });\n    if (existingUser) {\n      throw new ConflictException('User with this email already exists');\n    }\n    const createdUser = new this.userModel(createUserDto);\n    return createdUser.save();\n  }\n\n  async findAll(): Promise<UserDocument[]> {\n    return this.userModel.find().select('-password').exec();\n  }\n\n  async findById(id: string, includeRefreshToken = false): Promise<UserDocument> {\n    const query = this.userModel.findById(id);\n    if (includeRefreshToken) {\n      query.select('+refreshToken');\n    } else {\n      query.select('-password');\n    }\n    const user = await query.exec();\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n    return user;\n  }\n\n  async findByEmail(email: string): Promise<UserDocument> {\n    return this.userModel.findOne({ email }).select('+password +refreshToken').exec();\n  }\n\n  async update(id: string, updateUserDto: any): Promise<UserDocument> {\n    const updatedUser = await this.userModel\n      .findByIdAndUpdate(id, updateUserDto, { new: true })\n      .select('-password')\n      .exec();\n    if (!updatedUser) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n    return updatedUser;\n  }\n\n  async remove(id: string): Promise<void> {\n    const result = await this.userModel.deleteOne({ _id: id }).exec();\n    if (result.deletedCount === 0) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n  }\n\n  async updateRefreshToken(userId: string, refreshToken: string | null): Promise<void> {\n    await this.userModel.findByIdAndUpdate(userId, { refreshToken }).exec();\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}