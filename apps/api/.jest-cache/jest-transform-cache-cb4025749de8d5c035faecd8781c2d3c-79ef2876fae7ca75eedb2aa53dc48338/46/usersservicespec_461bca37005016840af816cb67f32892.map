{"file":"/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/tests/unit/modules/users/users.service.spec.ts","mappings":"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","names":[],"sources":["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/tests/unit/modules/users/users.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { getModelToken } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { UsersService } from '../../../../src/modules/users/users.service';\nimport { User, UserDocument } from '../../../../src/modules/users/schemas/user.schema';\nimport { NotFoundException, ConflictException } from '@nestjs/common';\nimport { UserRole } from '@shared/types/user.types';\n\ndescribe('UsersService', () => {\n  let service: UsersService;\n  let model: Model<UserDocument>;\n\n  const mockUser = {\n    _id: '507f1f77bcf86cd799439011',\n    email: 'test@example.com',\n    password: 'hashedPassword',\n    role: UserRole.PARTICIPANT,\n    profile: {\n      firstName: 'John',\n      lastName: 'Doe',\n      company: 'VTEX',\n    },\n    preferences: {\n      language: 'pt',\n      timezone: 'America/Sao_Paulo',\n      emailNotifications: true,\n      pushNotifications: true,\n      sessionReminders: true,\n    },\n    isActive: true,\n    isEmailVerified: false,\n    save: jest.fn().mockResolvedValue(this),\n  };\n\n  const mockUserModel = {\n    findOne: jest.fn(),\n    findById: jest.fn(),\n    findByIdAndUpdate: jest.fn(),\n    find: jest.fn(),\n    deleteOne: jest.fn(),\n    exec: jest.fn(),\n  };\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        UsersService,\n        {\n          provide: getModelToken(User.name),\n          useValue: {\n            ...mockUserModel,\n            findOne: jest.fn().mockReturnValue({\n              exec: jest.fn().mockResolvedValue(null),\n            }),\n            findById: jest.fn().mockReturnValue({\n              select: jest.fn().mockReturnValue({\n                exec: jest.fn().mockResolvedValue(mockUser),\n              }),\n            }),\n            find: jest.fn().mockReturnValue({\n              select: jest.fn().mockReturnValue({\n                exec: jest.fn().mockResolvedValue([mockUser]),\n              }),\n            }),\n            new: jest.fn().mockImplementation((data) => ({\n              ...data,\n              save: jest.fn().mockResolvedValue({ ...mockUser, ...data }),\n            })),\n          },\n        },\n      ],\n    }).compile();\n\n    service = module.get<UsersService>(UsersService);\n    model = module.get<Model<UserDocument>>(getModelToken(User.name));\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n  });\n\n  describe('findAll', () => {\n    it('should return an array of users without passwords', async () => {\n      const users = await service.findAll();\n      expect(users).toEqual([mockUser]);\n      expect(model.find).toHaveBeenCalled();\n    });\n  });\n\n  describe('findById', () => {\n    it('should return a user by id', async () => {\n      const user = await service.findById(mockUser._id);\n      expect(user).toEqual(mockUser);\n      expect(model.findById).toHaveBeenCalledWith(mockUser._id);\n    });\n\n    it('should throw NotFoundException if user not found', async () => {\n      jest.spyOn(model, 'findById').mockReturnValue({\n        select: jest.fn().mockReturnValue({\n          exec: jest.fn().mockResolvedValue(null),\n        }),\n      } as any);\n\n      await expect(service.findById('nonexistent')).rejects.toThrow(NotFoundException);\n    });\n  });\n\n  describe('findByEmail', () => {\n    it('should return a user by email', async () => {\n      jest.spyOn(model, 'findOne').mockReturnValue({\n        exec: jest.fn().mockResolvedValue(mockUser),\n      } as any);\n\n      const user = await service.findByEmail(mockUser.email);\n      expect(user).toEqual(mockUser);\n      expect(model.findOne).toHaveBeenCalledWith({ email: mockUser.email });\n    });\n  });\n\n  describe('create', () => {\n    it('should create a new user', async () => {\n      const createUserDto = {\n        email: 'new@example.com',\n        password: 'password123',\n        role: UserRole.PARTICIPANT,\n        profile: mockUser.profile,\n        preferences: mockUser.preferences,\n      };\n\n      const UserModel = model as any;\n      UserModel.prototype.save = jest.fn().mockResolvedValue({\n        ...mockUser,\n        ...createUserDto,\n      });\n      jest.spyOn(model, 'findOne').mockReturnValue({\n        exec: jest.fn().mockResolvedValue(null),\n      } as any);\n\n      const newUser = new UserModel(createUserDto);\n      const savedUser = await newUser.save();\n\n      expect(savedUser.email).toBe(createUserDto.email);\n    });\n\n    it('should throw ConflictException if email already exists', async () => {\n      jest.spyOn(model, 'findOne').mockReturnValue({\n        exec: jest.fn().mockResolvedValue(mockUser),\n      } as any);\n\n      await expect(service.create({ email: mockUser.email })).rejects.toThrow(ConflictException);\n    });\n  });\n\n  describe('remove', () => {\n    it('should delete a user', async () => {\n      jest.spyOn(model, 'deleteOne').mockReturnValue({\n        exec: jest.fn().mockResolvedValue({ deletedCount: 1 }),\n      } as any);\n\n      await expect(service.remove(mockUser._id)).resolves.not.toThrow();\n      expect(model.deleteOne).toHaveBeenCalledWith({ _id: mockUser._id });\n    });\n\n    it('should throw NotFoundException if user not found', async () => {\n      jest.spyOn(model, 'deleteOne').mockReturnValue({\n        exec: jest.fn().mockResolvedValue({ deletedCount: 0 }),\n      } as any);\n\n      await expect(service.remove('nonexistent')).rejects.toThrow(NotFoundException);\n    });\n  });\n});\n"],"version":3}