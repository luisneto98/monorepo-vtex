{"file":"/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/config/s3.config.ts","mappings":";;;AAAA,kDAA8C;AAGvC,MAAM,cAAc,GAAG,CAAC,aAA4B,EAAE,EAAE;IAC7D,MAAM,MAAM,GAAG,aAAa,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;IAClD,MAAM,WAAW,GAAG,aAAa,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;IAC5D,MAAM,eAAe,GAAG,aAAa,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;IAEpE,IAAI,CAAC,WAAW,IAAI,CAAC,eAAe,EAAE,CAAC;QACrC,OAAO,CAAC,IAAI,CAAC,qDAAqD,CAAC,CAAC;IACtE,CAAC;IAED,OAAO,IAAI,oBAAQ,CAAC;QAClB,MAAM;QACN,GAAG,CAAC,WAAW;YACb,eAAe,IAAI;YACjB,WAAW,EAAE;gBACX,WAAW;gBACX,eAAe;aAChB;SACF,CAAC;KACL,CAAC,CAAC;AACL,CAAC,CAAC;AAnBW,QAAA,cAAc,kBAmBzB;AAEK,MAAM,eAAe,GAAG,CAAC,aAA4B,EAAU,EAAE;IACtE,MAAM,MAAM,GAAG,aAAa,CAAC,GAAG,CAAS,eAAe,CAAC,CAAC;IAC1D,IAAI,CAAC,MAAM,EAAE,CAAC;QACZ,OAAO,CAAC,IAAI,CAAC,kEAAkE,CAAC,CAAC;QACjF,OAAO,oBAAoB,CAAC;IAC9B,CAAC;IACD,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC;AAPW,QAAA,eAAe,mBAO1B;AAEW,QAAA,SAAS,GAAG;IACvB,aAAa,EAAE;QACb,KAAK,EAAE,GAAG,GAAG,IAAI,GAAG,IAAI,EAAE,QAAQ;QAClC,OAAO,EAAE,EAAE,GAAG,IAAI,GAAG,IAAI,EAAE,OAAO;KACnC;IACD,eAAe,EAAE;QACf,SAAS,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC;QACzB,YAAY,EAAE,CAAC,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC;QACzC,KAAK,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,CAAC;QACrC,KAAK,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,MAAM,CAAC;QAC7B,YAAY,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,CAAC;KACrC;IACD,UAAU,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,sBAAsB;CACjD,CAAC","names":[],"sources":["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/config/s3.config.ts"],"sourcesContent":["import { S3Client } from '@aws-sdk/client-s3';\nimport { ConfigService } from '@nestjs/config';\n\nexport const createS3Client = (configService: ConfigService) => {\n  const region = configService.get('aws.s3.region');\n  const accessKeyId = configService.get('aws.s3.accessKeyId');\n  const secretAccessKey = configService.get('aws.s3.secretAccessKey');\n\n  if (!accessKeyId || !secretAccessKey) {\n    console.warn('AWS credentials not configured, using default chain');\n  }\n\n  return new S3Client({\n    region,\n    ...(accessKeyId &&\n      secretAccessKey && {\n        credentials: {\n          accessKeyId,\n          secretAccessKey,\n        },\n      }),\n  });\n};\n\nexport const getS3BucketName = (configService: ConfigService): string => {\n  const bucket = configService.get<string>('aws.s3.bucket');\n  if (!bucket) {\n    console.warn('S3 bucket name not configured, using default: vtexday-dev-bucket');\n    return 'vtexday-dev-bucket';\n  }\n  return bucket;\n};\n\nexport const S3_CONFIG = {\n  MAX_FILE_SIZE: {\n    video: 500 * 1024 * 1024, // 500MB\n    default: 50 * 1024 * 1024, // 50MB\n  },\n  ALLOWED_FORMATS: {\n    press_kit: ['pdf', 'zip'],\n    logo_package: ['zip', 'ai', 'eps', 'svg'],\n    photo: ['jpg', 'jpeg', 'png', 'webp'],\n    video: ['mp4', 'mov', 'webm'],\n    presentation: ['ppt', 'pptx', 'pdf'],\n  },\n  URL_EXPIRY: 24 * 60 * 60, // 24 hours in seconds\n};\n"],"version":3}