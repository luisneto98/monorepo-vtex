5ba1faed9c10b8398af03998aef503d2
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthController = void 0;
const common_1 = require("@nestjs/common");
const swagger_1 = require("@nestjs/swagger");
const auth_service_1 = require("./auth.service");
const login_dto_1 = require("./dto/login.dto");
const register_dto_1 = require("./dto/register.dto");
const jwt_auth_guard_1 = require("@common/guards/jwt-auth.guard");
const public_decorator_1 = require("@common/decorators/public.decorator");
const current_user_decorator_1 = require("@common/decorators/current-user.decorator");
const throttler_1 = require("@nestjs/throttler");
let AuthController = class AuthController {
    authService;
    constructor(authService) {
        this.authService = authService;
    }
    async login(loginDto, response) {
        const authResult = await this.authService.login(loginDto);
        // Set refresh token in HttpOnly cookie
        this.setRefreshTokenCookie(response, authResult.refreshToken);
        // Return auth response without refresh token in body
        const { refreshToken, ...result } = authResult;
        return result;
    }
    async refresh(request, response) {
        const refreshToken = this.extractRefreshTokenFromCookie(request);
        if (!refreshToken) {
            throw new common_1.UnauthorizedException('Refresh token not provided');
        }
        const authResult = await this.authService.refreshTokens(refreshToken);
        // Set new refresh token in HttpOnly cookie
        this.setRefreshTokenCookie(response, authResult.refreshToken);
        // Return auth response without refresh token in body
        const { refreshToken: _, ...result } = authResult;
        return result;
    }
    async logout(user, response) {
        await this.authService.logout(user.sub);
        // Clear refresh token cookie
        this.clearRefreshTokenCookie(response);
        return;
    }
    getProfile(user) {
        return {
            id: user.sub,
            email: user.email,
            role: user.role,
        };
    }
    async register(registerDto, response) {
        const authResult = await this.authService.register(registerDto);
        // Set refresh token in HttpOnly cookie
        this.setRefreshTokenCookie(response, authResult.refreshToken);
        // Return auth response without refresh token in body
        const { refreshToken: __, ...result } = authResult;
        return result;
    }
    setRefreshTokenCookie(response, refreshToken) {
        const cookieOptions = {
            httpOnly: true,
            secure: process.env['NODE_ENV'] === 'production',
            sameSite: 'strict',
            maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days
            path: '/auth/refresh',
        };
        response.cookie('refreshToken', refreshToken, cookieOptions);
    }
    clearRefreshTokenCookie(response) {
        response.cookie('refreshToken', '', {
            httpOnly: true,
            secure: process.env['NODE_ENV'] === 'production',
            sameSite: 'strict',
            expires: new Date(0),
            path: '/auth/refresh',
        });
    }
    extractRefreshTokenFromCookie(request) {
        return request.cookies?.['refreshToken'] || null;
    }
};
exports.AuthController = AuthController;
__decorate([
    (0, public_decorator_1.Public)(),
    (0, throttler_1.Throttle)({ default: { limit: 5, ttl: 60000 } }) // 5 requests per minute
    ,
    (0, common_1.HttpCode)(common_1.HttpStatus.OK),
    (0, common_1.Post)('login'),
    (0, swagger_1.ApiOperation)({ summary: 'User login' }),
    (0, swagger_1.ApiBody)({
        type: login_dto_1.LoginDto,
        examples: {
            admin: {
                value: {
                    email: 'admin@vtexday.com',
                    password: 'SecurePassword123!',
                },
                description: 'Admin user login',
            },
            regular: {
                value: {
                    email: 'user@example.com',
                    password: 'UserPassword456!',
                },
                description: 'Regular user login',
            },
        },
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Login successful',
        schema: {
            example: {
                accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...',
                user: {
                    id: '507f1f77bcf86cd799439011',
                    email: 'admin@vtexday.com',
                    role: 'admin',
                },
            },
        },
    }),
    (0, swagger_1.ApiResponse)({
        status: 401,
        description: 'Invalid credentials',
        schema: {
            example: {
                statusCode: 401,
                message: 'Invalid credentials',
                error: 'Unauthorized',
            },
        },
    }),
    (0, swagger_1.ApiResponse)({
        status: 429,
        description: 'Too many requests',
        schema: {
            example: {
                statusCode: 429,
                message: 'ThrottlerException: Too Many Requests',
                error: 'Too Many Requests',
            },
        },
    }),
    __param(0, (0, common_1.Body)()),
    __param(1, (0, common_1.Res)({ passthrough: true })),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [login_dto_1.LoginDto, Object]),
    __metadata("design:returntype", Promise)
], AuthController.prototype, "login", null);
__decorate([
    (0, public_decorator_1.Public)(),
    (0, throttler_1.Throttle)({ default: { limit: 5, ttl: 60000 } }) // 5 requests per minute
    ,
    (0, common_1.HttpCode)(common_1.HttpStatus.OK),
    (0, common_1.Post)('refresh'),
    (0, swagger_1.ApiOperation)({ summary: 'Refresh access token using refresh token from cookie' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Token refreshed successfully',
        schema: {
            example: {
                accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...',
                user: {
                    id: '507f1f77bcf86cd799439011',
                    email: 'admin@vtexday.com',
                    role: 'admin',
                },
            },
        },
    }),
    (0, swagger_1.ApiResponse)({
        status: 401,
        description: 'Invalid or expired refresh token',
        schema: {
            example: {
                statusCode: 401,
                message: 'Invalid or expired refresh token',
                error: 'Unauthorized',
            },
        },
    }),
    __param(0, (0, common_1.Req)()),
    __param(1, (0, common_1.Res)({ passthrough: true })),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object]),
    __metadata("design:returntype", Promise)
], AuthController.prototype, "refresh", null);
__decorate([
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard),
    (0, common_1.HttpCode)(common_1.HttpStatus.NO_CONTENT),
    (0, common_1.Post)('logout'),
    (0, swagger_1.ApiBearerAuth)('JWT-auth'),
    (0, swagger_1.ApiOperation)({ summary: 'Logout user and invalidate tokens' }),
    (0, swagger_1.ApiResponse)({
        status: 204,
        description: 'Logout successful',
    }),
    (0, swagger_1.ApiResponse)({
        status: 401,
        description: 'Unauthorized - Invalid or missing JWT token',
    }),
    __param(0, (0, current_user_decorator_1.CurrentUser)()),
    __param(1, (0, common_1.Res)({ passthrough: true })),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object]),
    __metadata("design:returntype", Promise)
], AuthController.prototype, "logout", null);
__decorate([
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard),
    (0, common_1.Get)('profile'),
    (0, swagger_1.ApiBearerAuth)('JWT-auth'),
    (0, swagger_1.ApiOperation)({ summary: 'Get current user profile' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'User profile retrieved successfully',
        schema: {
            example: {
                id: '507f1f77bcf86cd799439011',
                email: 'admin@vtexday.com',
                role: 'admin',
            },
        },
    }),
    (0, swagger_1.ApiResponse)({
        status: 401,
        description: 'Unauthorized - Invalid or missing JWT token',
    }),
    __param(0, (0, current_user_decorator_1.CurrentUser)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], AuthController.prototype, "getProfile", null);
__decorate([
    (0, public_decorator_1.Public)(),
    (0, common_1.Post)('register'),
    (0, swagger_1.ApiOperation)({ summary: 'Register new user' }),
    (0, swagger_1.ApiBody)({
        type: register_dto_1.RegisterDto,
        examples: {
            newUser: {
                value: {
                    email: 'newuser@example.com',
                    password: 'SecurePassword123!',
                    name: 'Jo√£o Silva',
                    company: 'VTEX',
                    phone: '+5511999999999',
                },
                description: 'New user registration',
            },
        },
    }),
    (0, swagger_1.ApiResponse)({
        status: 201,
        description: 'User registered successfully',
        schema: {
            example: {
                accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...',
                user: {
                    id: '507f1f77bcf86cd799439011',
                    email: 'newuser@example.com',
                    role: 'user',
                },
            },
        },
    }),
    (0, swagger_1.ApiResponse)({
        status: 400,
        description: 'Validation error or user already exists',
        schema: {
            example: {
                statusCode: 400,
                message: ['email must be an email', 'password is too weak'],
                error: 'Bad Request',
            },
        },
    }),
    (0, swagger_1.ApiResponse)({
        status: 409,
        description: 'Email already registered',
        schema: {
            example: {
                statusCode: 409,
                message: 'Email already registered',
                error: 'Conflict',
            },
        },
    }),
    __param(0, (0, common_1.Body)()),
    __param(1, (0, common_1.Res)({ passthrough: true })),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [register_dto_1.RegisterDto, Object]),
    __metadata("design:returntype", Promise)
], AuthController.prototype, "register", null);
exports.AuthController = AuthController = __decorate([
    (0, swagger_1.ApiTags)('Authentication'),
    (0, common_1.Controller)('auth'),
    __metadata("design:paramtypes", [auth_service_1.AuthService])
], AuthController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,