{"file":"/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/tests/unit/modules/speakers/services/speakers.service.spec.ts","mappings":";;AAAA,6CAAsD;AACtD,+CAAiD;AACjD,2FAAuF;AACvF,+FAAqF;AACrF,2CAAsE;AACtE,iGAA6F;AAC7F,0FAAsF;AACtF,mCAAkC;AAElC,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;IAC/B,IAAI,OAAwB,CAAC;IAE7B,MAAM,WAAW,GAAG;QAClB,GAAG,EAAE,0BAA0B;QAC/B,IAAI,EAAE,UAAU;QAChB,GAAG,EAAE;YACH,OAAO,EACL,kHAAkH;YACpH,EAAE,EAAE,2GAA2G;SAChH;QACD,QAAQ,EAAE,+BAA+B;QACzC,OAAO,EAAE,WAAW;QACpB,QAAQ,EAAE;YACR,OAAO,EAAE,uBAAuB;YAChC,EAAE,EAAE,qBAAqB;SAC1B;QACD,WAAW,EAAE;YACX,QAAQ,EAAE,iCAAiC;YAC3C,OAAO,EAAE,6BAA6B;SACvC;QACD,WAAW,EAAE,KAAK;QAClB,SAAS,EAAE,IAAI;QACf,QAAQ,EAAE,GAAG;QACb,IAAI,EAAE,CAAC,IAAI,EAAE,OAAO,CAAC;QACrB,SAAS,EAAE,IAAI;QACf,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,IAAI,CAAC;KACxC,CAAC;IAEF,MAAM,gBAAgB,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;QAC9D,GAAG,WAAW;QACd,GAAG,GAAG;QACN,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,EAAE,GAAG,WAAW,EAAE,GAAG,GAAG,EAAE,CAAC;KAC9D,CAAC,CAAQ,CAAC;IAEX,gBAAgB,CAAC,OAAO,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;IACrC,gBAAgB,CAAC,IAAI,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;IAClC,gBAAgB,CAAC,cAAc,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;IAC5C,gBAAgB,CAAC,MAAM,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;IAEpC,MAAM,kBAAkB,GAAG;QACzB,UAAU,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC;YACtC,GAAG,EAAE,gCAAgC;YACrC,GAAG,EAAE,+EAA+E;SACrF,CAAC;KACH,CAAC;IAEF,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,MAAM,MAAM,GAAkB,MAAM,cAAI,CAAC,mBAAmB,CAAC;YAC3D,SAAS,EAAE;gBACT,kCAAe;gBACf;oBACE,OAAO,EAAE,IAAA,wBAAa,EAAC,wBAAO,CAAC,IAAI,CAAC;oBACpC,QAAQ,EAAE,gBAAgB;iBAC3B;gBACD;oBACE,OAAO,EAAE,gCAAc;oBACvB,QAAQ,EAAE,kBAAkB;iBAC7B;aACF;SACF,CAAC,CAAC,OAAO,EAAE,CAAC;QAEb,OAAO,GAAG,MAAM,CAAC,GAAG,CAAkB,kCAAe,CAAC,CAAC;IACzD,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,GAAG,EAAE;QACb,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;QACtB,EAAE,CAAC,6BAA6B,EAAE,KAAK,IAAI,EAAE;YAC3C,MAAM,SAAS,GAAG;gBAChB,IAAI,EAAE,YAAY;gBAClB,GAAG,EAAE;oBACH,OAAO,EACL,kHAAkH;oBACpH,EAAE,EAAE,2GAA2G;oBAC/G,EAAE,EAAE,8GAA8G;iBACnH;gBACD,QAAQ,EAAE,8BAA8B;gBACxC,OAAO,EAAE,gBAAgB;gBACzB,QAAQ,EAAE;oBACR,OAAO,EAAE,KAAK;oBACd,EAAE,EAAE,KAAK;oBACT,EAAE,EAAE,KAAK;iBACV;aACF,CAAC;YAEF,gBAAgB,CAAC,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;YAEjD,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;YAE/C,MAAM,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,oBAAoB,CAAC;gBACpD,IAAI,EAAE,SAAS,CAAC,IAAI;gBACpB,SAAS,EAAE,IAAI;aAChB,CAAC,CAAC;YACH,MAAM,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC;QAC/B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0DAA0D,EAAE,KAAK,IAAI,EAAE;YACxE,MAAM,SAAS,GAAG;gBAChB,IAAI,EAAE,UAAU;gBAChB,GAAG,EAAE;oBACH,OAAO,EAAE,kBAAkB;oBAC3B,EAAE,EAAE,gBAAgB;oBACpB,EAAE,EAAE,gBAAgB;iBACrB;gBACD,QAAQ,EAAE,+BAA+B;gBACzC,OAAO,EAAE,WAAW;gBACpB,QAAQ,EAAE;oBACR,OAAO,EAAE,KAAK;oBACd,EAAE,EAAE,KAAK;oBACT,EAAE,EAAE,KAAK;iBACV;aACF,CAAC;YAEF,gBAAgB,CAAC,OAAO,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC;YAExD,MAAM,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,0BAAiB,CAAC,CAAC;QAC7E,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,SAAS,EAAE,GAAG,EAAE;QACvB,EAAE,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;YAChD,MAAM,SAAS,GAAG;gBAChB,IAAI,EAAE,CAAC;gBACP,KAAK,EAAE,EAAE;gBACT,MAAM,EAAE,EAAE;gBACV,IAAI,EAAE,YAAY;aACnB,CAAC;YAEF,MAAM,QAAQ,GAAG,CAAC,WAAW,CAAC,CAAC;YAC/B,gBAAgB,CAAC,IAAI,CAAC,eAAe,CAAC;gBACpC,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;gBAChC,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;gBAChC,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;gBACjC,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,QAAQ,CAAC;aAC5C,CAAC,CAAC;YACH,gBAAgB,CAAC,cAAc,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;YAErD,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;YAEhD,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC;gBACrB,OAAO,EAAE,IAAI;gBACb,IAAI,EAAE,QAAQ;gBACd,QAAQ,EAAE;oBACR,KAAK,EAAE,CAAC;oBACR,IAAI,EAAE,CAAC;oBACP,KAAK,EAAE,EAAE;oBACT,OAAO,EAAE,KAAK;oBACd,OAAO,EAAE,KAAK;iBACf;aACF,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;YAC9C,MAAM,SAAS,GAAG;gBAChB,IAAI,EAAE,CAAC;gBACP,KAAK,EAAE,EAAE;gBACT,WAAW,EAAE,IAAI;gBACjB,IAAI,EAAE,CAAC,IAAI,EAAE,OAAO,CAAC;aACtB,CAAC;YAEF,gBAAgB,CAAC,IAAI,CAAC,eAAe,CAAC;gBACpC,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;gBAChC,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;gBAChC,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;gBACjC,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,EAAE,CAAC;aACtC,CAAC,CAAC;YACH,gBAAgB,CAAC,cAAc,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;YAErD,MAAM,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;YAEjC,MAAM,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAAC;gBACjD,SAAS,EAAE,IAAI;gBACf,WAAW,EAAE,IAAI;gBACjB,IAAI,EAAE,EAAE,GAAG,EAAE,CAAC,IAAI,EAAE,OAAO,CAAC,EAAE;aAC/B,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,UAAU,EAAE,GAAG,EAAE;QACxB,EAAE,CAAC,+BAA+B,EAAE,KAAK,IAAI,EAAE;YAC7C,gBAAgB,CAAC,OAAO,CAAC,eAAe,CAAC;gBACvC,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,WAAW,CAAC;aAC/C,CAAC,CAAC;YAEH,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,QAAQ,CAAC,0BAA0B,CAAC,CAAC;YAElE,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;YACpC,MAAM,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,oBAAoB,CAAC;gBACpD,GAAG,EAAE,0BAA0B;gBAC/B,SAAS,EAAE,IAAI;aAChB,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qDAAqD,EAAE,KAAK,IAAI,EAAE;YACnE,gBAAgB,CAAC,OAAO,CAAC,eAAe,CAAC;gBACvC,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,IAAI,CAAC;aACxC,CAAC,CAAC;YAEH,MAAM,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,0BAA0B,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,0BAAiB,CAAC,CAAC;QAChG,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;QACtB,EAAE,CAAC,yBAAyB,EAAE,KAAK,IAAI,EAAE;YACvC,MAAM,SAAS,GAAG;gBAChB,OAAO,EAAE,aAAa;aACvB,CAAC;YAEF,MAAM,eAAe,GAAG;gBACtB,GAAG,WAAW;gBACd,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,EAAE,GAAG,WAAW,EAAE,GAAG,SAAS,EAAE,CAAC;aACpE,CAAC;YAEF,gBAAgB,CAAC,OAAO,CAAC,qBAAqB,CAAC,eAAe,CAAC,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC;YAE5F,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,MAAM,CAAC,0BAA0B,EAAE,SAAS,CAAC,CAAC;YAE3E,MAAM,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC;YAC7B,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,gBAAgB,EAAE,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qDAAqD,EAAE,KAAK,IAAI,EAAE;YACnE,gBAAgB,CAAC,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;YAEjD,MAAM,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,0BAA0B,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAC1E,0BAAiB,CAClB,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;QACtB,EAAE,CAAC,8BAA8B,EAAE,KAAK,IAAI,EAAE;YAC5C,MAAM,OAAO,GAAG;gBACd,GAAG,WAAW;gBACd,SAAS,EAAE,IAAW;gBACtB,YAAY,EAAE,IAAW;gBACzB,SAAS,EAAE,IAAW;gBACtB,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,WAAW,CAAC;aAC/C,CAAC;YAEF,gBAAgB,CAAC,OAAO,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;YAEpD,MAAM,OAAO,CAAC,MAAM,CAAC,0BAA0B,EAAE,aAAa,EAAE,QAAQ,CAAC,CAAC;YAE1E,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,WAAW,EAAE,CAAC;YACxC,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;YACjD,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,gBAAgB,EAAE,CAAC;QAC1C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qDAAqD,EAAE,KAAK,IAAI,EAAE;YACnE,gBAAgB,CAAC,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;YAEjD,MAAM,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,0BAA0B,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,0BAAiB,CAAC,CAAC;QAC9F,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,SAAS,EAAE,GAAG,EAAE;QACvB,EAAE,CAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;YACrD,MAAM,cAAc,GAAG;gBACrB,GAAG,WAAW;gBACd,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,SAAS,EAAE,QAAQ;gBACnB,YAAY,EAAE,MAAM;gBACpB,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,WAAW,CAAC;aAC/C,CAAC;YAEF,gBAAgB,CAAC,OAAO,CAAC,iBAAiB,CAAC,cAAc,CAAC,CAAC;YAE3D,MAAM,OAAO,CAAC,OAAO,CAAC,0BAA0B,CAAC,CAAC;YAElD,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC,QAAQ,EAAE,CAAC;YAC5C,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC,QAAQ,EAAE,CAAC;YAC5C,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,QAAQ,EAAE,CAAC;YAC/C,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,gBAAgB,EAAE,CAAC;QACjD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6DAA6D,EAAE,KAAK,IAAI,EAAE;YAC3E,gBAAgB,CAAC,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;YAEjD,MAAM,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,0BAA0B,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,0BAAiB,CAAC,CAAC;QAC/F,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;QAC9B,EAAE,CAAC,oCAAoC,EAAE,KAAK,IAAI,EAAE;YAClD,MAAM,UAAU,GAAG,CAAC,EAAE,GAAG,WAAW,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC,CAAC;YAE3D,gBAAgB,CAAC,IAAI,CAAC,eAAe,CAAC;gBACpC,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;gBAChC,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,UAAU,CAAC;aAC9C,CAAC,CAAC;YAEH,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,cAAc,EAAE,CAAC;YAE9C,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;YACnC,MAAM,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAAC;gBACjD,WAAW,EAAE,IAAI;gBACjB,SAAS,EAAE,IAAI;gBACf,SAAS,EAAE,IAAI;aAChB,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;QAC3B,MAAM,cAAc,GAAG,CACrB,MAAc,EACd,QAAgB,EAChB,IAAY,EACZ,YAAY,GAAG,UAAU,EACJ,EAAE,CAAC,CAAC;YACzB,MAAM;YACN,QAAQ;YACR,IAAI;YACJ,YAAY;YACZ,SAAS,EAAE,MAAM;YACjB,QAAQ,EAAE,MAAM;YAChB,WAAW,EAAE,EAAE;YACf,QAAQ,EAAE,EAAE;YACZ,IAAI,EAAE,EAAE;YACR,MAAM,EAAE,IAAI,iBAAQ,EAAE;SACvB,CAAC,CAAC;QAEH,EAAE,CAAC,uDAAuD,EAAE,KAAK,IAAI,EAAE;YACrE,MAAM,SAAS,GAAG,0BAA0B,CAAC;YAC7C,MAAM,IAAI,GAAG,cAAc,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE,YAAY,EAAE,IAAI,CAAC,CAAC;YAEzE,MAAM,cAAc,GAAG;gBACrB,GAAG,WAAW;gBACd,GAAG,EAAE,SAAS;gBACd,QAAQ,EAAE,mCAAmC;gBAC7C,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC;oBAChC,GAAG,WAAW;oBACd,QAAQ,EAAE,+EAA+E;iBAC1F,CAAC;aACH,CAAC;YAEF,gBAAgB,CAAC,OAAO,CAAC,iBAAiB,CAAC,cAAc,CAAC,CAAC;YAE3D,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,WAAW,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;YAE1D,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CACjB,+EAA+E,CAChF,CAAC;YACF,MAAM,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,oBAAoB,CAAC;gBACpD,GAAG,EAAE,SAAS;gBACd,SAAS,EAAE,IAAI;aAChB,CAAC,CAAC;YACH,MAAM,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAC,oBAAoB,CAAC,IAAI,EAAE,4BAAY,CAAC,cAAc,CAAC,CAAC;YAC9F,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,gBAAgB,EAAE,CAAC;YAC/C,MAAM,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,IAAI,CAClC,+EAA+E,CAChF,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4DAA4D,EAAE,KAAK,IAAI,EAAE;YAC1E,MAAM,SAAS,GAAG,0BAA0B,CAAC;YAC7C,MAAM,IAAI,GAAG,cAAc,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE,YAAY,EAAE,IAAI,CAAC,CAAC;YAEzE,gBAAgB,CAAC,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;YAEjD,MAAM,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,0BAAiB,CAAC,CAAC;YACtF,MAAM,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAChE,mBAAmB,SAAS,YAAY,CACzC,CAAC;YACF,MAAM,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;QAC/D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wDAAwD,EAAE,KAAK,IAAI,EAAE;YACtE,MAAM,SAAS,GAAG,0BAA0B,CAAC;YAC7C,MAAM,IAAI,GAAG,cAAc,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE,YAAY,EAAE,IAAI,CAAC,CAAC;YAEzE,uBAAuB;YACvB,gBAAgB,CAAC,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;YAEjD,MAAM,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,0BAAiB,CAAC,CAAC;YACtF,MAAM,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,oBAAoB,CAAC;gBACpD,GAAG,EAAE,SAAS;gBACd,SAAS,EAAE,IAAI;aAChB,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wCAAwC,EAAE,KAAK,IAAI,EAAE;YACtD,MAAM,SAAS,GAAG,0BAA0B,CAAC;YAC7C,MAAM,IAAI,GAAG,cAAc,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE,YAAY,EAAE,IAAI,CAAC,CAAC;YAEzE,MAAM,cAAc,GAAG;gBACrB,GAAG,WAAW;gBACd,GAAG,EAAE,SAAS;gBACd,QAAQ,EAAE,mCAAmC;gBAC7C,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE;aAChB,CAAC;YAEF,gBAAgB,CAAC,OAAO,CAAC,iBAAiB,CAAC,cAAc,CAAC,CAAC;YAC3D,kBAAkB,CAAC,UAAU,CAAC,qBAAqB,CAAC,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC,CAAC;YAEnF,MAAM,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC;YACvF,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;QACrD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/tests/unit/modules/speakers/services/speakers.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { getModelToken } from '@nestjs/mongoose';\nimport { SpeakersService } from '../../../../../src/modules/speakers/speakers.service';\nimport { Speaker } from '../../../../../src/modules/speakers/schemas/speaker.schema';\nimport { NotFoundException, ConflictException } from '@nestjs/common';\nimport { StorageService } from '../../../../../src/modules/storage/services/storage.service';\nimport { FileCategory } from '../../../../../src/modules/storage/types/storage.types';\nimport { Readable } from 'stream';\n\ndescribe('SpeakersService', () => {\n  let service: SpeakersService;\n\n  const mockSpeaker = {\n    _id: '507f1f77bcf86cd799439011',\n    name: 'John Doe',\n    bio: {\n      'pt-BR':\n        'Biografia em português do palestrante com mais de cem caracteres para atender ao requisito mínimo de comprimento',\n      en: 'Speaker biography in English with more than one hundred characters to meet the minimum length requirement',\n    },\n    photoUrl: 'https://example.com/photo.jpg',\n    company: 'Tech Corp',\n    position: {\n      'pt-BR': 'Diretor de Tecnologia',\n      en: 'Technology Director',\n    },\n    socialLinks: {\n      linkedin: 'https://linkedin.com/in/johndoe',\n      twitter: 'https://twitter.com/johndoe',\n    },\n    isHighlight: false,\n    isVisible: true,\n    priority: 100,\n    tags: ['AI', 'Cloud'],\n    deletedAt: null,\n    save: jest.fn().mockResolvedValue(this),\n  };\n\n  const mockSpeakerModel = jest.fn().mockImplementation((dto) => ({\n    ...mockSpeaker,\n    ...dto,\n    save: jest.fn().mockResolvedValue({ ...mockSpeaker, ...dto }),\n  })) as any;\n\n  mockSpeakerModel.findOne = jest.fn();\n  mockSpeakerModel.find = jest.fn();\n  mockSpeakerModel.countDocuments = jest.fn();\n  mockSpeakerModel.create = jest.fn();\n\n  const mockStorageService = {\n    uploadFile: jest.fn().mockResolvedValue({\n      key: 'speaker-photos/12345-67890.jpg',\n      url: 'https://test-bucket.s3.us-east-1.amazonaws.com/speaker-photos/12345-67890.jpg',\n    }),\n  };\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        SpeakersService,\n        {\n          provide: getModelToken(Speaker.name),\n          useValue: mockSpeakerModel,\n        },\n        {\n          provide: StorageService,\n          useValue: mockStorageService,\n        },\n      ],\n    }).compile();\n\n    service = module.get<SpeakersService>(SpeakersService);\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('create', () => {\n    it('should create a new speaker', async () => {\n      const createDto = {\n        name: 'Jane Smith',\n        bio: {\n          'pt-BR':\n            'Biografia em português do palestrante com mais de cem caracteres para atender ao requisito mínimo de comprimento',\n          en: 'Speaker biography in English with more than one hundred characters to meet the minimum length requirement',\n          es: 'Biografía del ponente en español con más de cien caracteres para cumplir con el requisito de longitud mínima',\n        },\n        photoUrl: 'https://example.com/jane.jpg',\n        company: 'Innovation Inc',\n        position: {\n          'pt-BR': 'CEO',\n          en: 'CEO',\n          es: 'CEO',\n        },\n      };\n\n      mockSpeakerModel.findOne.mockResolvedValue(null);\n\n      const result = await service.create(createDto);\n\n      expect(mockSpeakerModel.findOne).toHaveBeenCalledWith({\n        name: createDto.name,\n        deletedAt: null,\n      });\n      expect(result).toBeDefined();\n    });\n\n    it('should throw ConflictException if speaker already exists', async () => {\n      const createDto = {\n        name: 'John Doe',\n        bio: {\n          'pt-BR': 'Bio em português',\n          en: 'Bio in English',\n          es: 'Bio en español',\n        },\n        photoUrl: 'https://example.com/photo.jpg',\n        company: 'Tech Corp',\n        position: {\n          'pt-BR': 'CTO',\n          en: 'CTO',\n          es: 'CTO',\n        },\n      };\n\n      mockSpeakerModel.findOne.mockResolvedValue(mockSpeaker);\n\n      await expect(service.create(createDto)).rejects.toThrow(ConflictException);\n    });\n  });\n\n  describe('findAll', () => {\n    it('should return paginated speakers', async () => {\n      const filterDto = {\n        page: 1,\n        limit: 10,\n        search: '',\n        sort: '-createdAt',\n      };\n\n      const speakers = [mockSpeaker];\n      mockSpeakerModel.find.mockReturnValue({\n        sort: jest.fn().mockReturnThis(),\n        skip: jest.fn().mockReturnThis(),\n        limit: jest.fn().mockReturnThis(),\n        exec: jest.fn().mockResolvedValue(speakers),\n      });\n      mockSpeakerModel.countDocuments.mockResolvedValue(1);\n\n      const result = await service.findAll(filterDto);\n\n      expect(result).toEqual({\n        success: true,\n        data: speakers,\n        metadata: {\n          total: 1,\n          page: 1,\n          limit: 10,\n          hasNext: false,\n          hasPrev: false,\n        },\n      });\n    });\n\n    it('should apply filters correctly', async () => {\n      const filterDto = {\n        page: 1,\n        limit: 20,\n        isHighlight: true,\n        tags: ['AI', 'Cloud'],\n      };\n\n      mockSpeakerModel.find.mockReturnValue({\n        sort: jest.fn().mockReturnThis(),\n        skip: jest.fn().mockReturnThis(),\n        limit: jest.fn().mockReturnThis(),\n        exec: jest.fn().mockResolvedValue([]),\n      });\n      mockSpeakerModel.countDocuments.mockResolvedValue(0);\n\n      await service.findAll(filterDto);\n\n      expect(mockSpeakerModel.find).toHaveBeenCalledWith({\n        deletedAt: null,\n        isHighlight: true,\n        tags: { $in: ['AI', 'Cloud'] },\n      });\n    });\n  });\n\n  describe('findById', () => {\n    it('should return a speaker by id', async () => {\n      mockSpeakerModel.findOne.mockReturnValue({\n        exec: jest.fn().mockResolvedValue(mockSpeaker),\n      });\n\n      const result = await service.findById('507f1f77bcf86cd799439011');\n\n      expect(result).toEqual(mockSpeaker);\n      expect(mockSpeakerModel.findOne).toHaveBeenCalledWith({\n        _id: '507f1f77bcf86cd799439011',\n        deletedAt: null,\n      });\n    });\n\n    it('should throw NotFoundException if speaker not found', async () => {\n      mockSpeakerModel.findOne.mockReturnValue({\n        exec: jest.fn().mockResolvedValue(null),\n      });\n\n      await expect(service.findById('507f1f77bcf86cd799439011')).rejects.toThrow(NotFoundException);\n    });\n  });\n\n  describe('update', () => {\n    it('should update a speaker', async () => {\n      const updateDto = {\n        company: 'New Company',\n      };\n\n      const existingSpeaker = {\n        ...mockSpeaker,\n        save: jest.fn().mockResolvedValue({ ...mockSpeaker, ...updateDto }),\n      };\n\n      mockSpeakerModel.findOne.mockResolvedValueOnce(existingSpeaker).mockResolvedValueOnce(null);\n\n      const result = await service.update('507f1f77bcf86cd799439011', updateDto);\n\n      expect(result).toBeDefined();\n      expect(existingSpeaker.save).toHaveBeenCalled();\n    });\n\n    it('should throw NotFoundException if speaker not found', async () => {\n      mockSpeakerModel.findOne.mockResolvedValue(null);\n\n      await expect(service.update('507f1f77bcf86cd799439011', {})).rejects.toThrow(\n        NotFoundException,\n      );\n    });\n  });\n\n  describe('remove', () => {\n    it('should soft delete a speaker', async () => {\n      const speaker = {\n        ...mockSpeaker,\n        deletedAt: null as any,\n        deleteReason: null as any,\n        deletedBy: null as any,\n        save: jest.fn().mockResolvedValue(mockSpeaker),\n      };\n\n      mockSpeakerModel.findOne.mockResolvedValue(speaker);\n\n      await service.remove('507f1f77bcf86cd799439011', 'Test reason', 'userId');\n\n      expect(speaker.deletedAt).toBeDefined();\n      expect(speaker.deleteReason).toBe('Test reason');\n      expect(speaker.save).toHaveBeenCalled();\n    });\n\n    it('should throw NotFoundException if speaker not found', async () => {\n      mockSpeakerModel.findOne.mockResolvedValue(null);\n\n      await expect(service.remove('507f1f77bcf86cd799439011')).rejects.toThrow(NotFoundException);\n    });\n  });\n\n  describe('restore', () => {\n    it('should restore a soft-deleted speaker', async () => {\n      const deletedSpeaker = {\n        ...mockSpeaker,\n        deletedAt: new Date(),\n        deletedBy: 'userId',\n        deleteReason: 'Test',\n        save: jest.fn().mockResolvedValue(mockSpeaker),\n      };\n\n      mockSpeakerModel.findOne.mockResolvedValue(deletedSpeaker);\n\n      await service.restore('507f1f77bcf86cd799439011');\n\n      expect(deletedSpeaker.deletedAt).toBeNull();\n      expect(deletedSpeaker.deletedBy).toBeNull();\n      expect(deletedSpeaker.deleteReason).toBeNull();\n      expect(deletedSpeaker.save).toHaveBeenCalled();\n    });\n\n    it('should throw NotFoundException if deleted speaker not found', async () => {\n      mockSpeakerModel.findOne.mockResolvedValue(null);\n\n      await expect(service.restore('507f1f77bcf86cd799439011')).rejects.toThrow(NotFoundException);\n    });\n  });\n\n  describe('findHighlights', () => {\n    it('should return highlighted speakers', async () => {\n      const highlights = [{ ...mockSpeaker, isHighlight: true }];\n\n      mockSpeakerModel.find.mockReturnValue({\n        sort: jest.fn().mockReturnThis(),\n        exec: jest.fn().mockResolvedValue(highlights),\n      });\n\n      const result = await service.findHighlights();\n\n      expect(result).toEqual(highlights);\n      expect(mockSpeakerModel.find).toHaveBeenCalledWith({\n        isHighlight: true,\n        isVisible: true,\n        deletedAt: null,\n      });\n    });\n  });\n\n  describe('uploadPhoto', () => {\n    const createMockFile = (\n      buffer: Buffer,\n      mimetype: string,\n      size: number,\n      originalname = 'test.jpg',\n    ): Express.Multer.File => ({\n      buffer,\n      mimetype,\n      size,\n      originalname,\n      fieldname: 'file',\n      encoding: '7bit',\n      destination: '',\n      filename: '',\n      path: '',\n      stream: new Readable(),\n    });\n\n    it('should successfully upload a photo and update speaker', async () => {\n      const speakerId = '507f1f77bcf86cd799439011';\n      const file = createMockFile(Buffer.alloc(1000, 'a'), 'image/jpeg', 1000);\n\n      const mockSpeakerDoc = {\n        ...mockSpeaker,\n        _id: speakerId,\n        photoUrl: 'https://example.com/old-photo.jpg',\n        save: jest.fn().mockResolvedValue({\n          ...mockSpeaker,\n          photoUrl: 'https://test-bucket.s3.us-east-1.amazonaws.com/speaker-photos/12345-67890.jpg',\n        }),\n      };\n\n      mockSpeakerModel.findOne.mockResolvedValue(mockSpeakerDoc);\n\n      const result = await service.uploadPhoto(speakerId, file);\n\n      expect(result).toBe(\n        'https://test-bucket.s3.us-east-1.amazonaws.com/speaker-photos/12345-67890.jpg',\n      );\n      expect(mockSpeakerModel.findOne).toHaveBeenCalledWith({\n        _id: speakerId,\n        deletedAt: null,\n      });\n      expect(mockStorageService.uploadFile).toHaveBeenCalledWith(file, FileCategory.SPEAKER_PHOTOS);\n      expect(mockSpeakerDoc.save).toHaveBeenCalled();\n      expect(mockSpeakerDoc.photoUrl).toBe(\n        'https://test-bucket.s3.us-east-1.amazonaws.com/speaker-photos/12345-67890.jpg',\n      );\n    });\n\n    it('should throw NotFoundException when speaker does not exist', async () => {\n      const speakerId = '507f1f77bcf86cd799439012';\n      const file = createMockFile(Buffer.alloc(1000, 'a'), 'image/jpeg', 1000);\n\n      mockSpeakerModel.findOne.mockResolvedValue(null);\n\n      await expect(service.uploadPhoto(speakerId, file)).rejects.toThrow(NotFoundException);\n      await expect(service.uploadPhoto(speakerId, file)).rejects.toThrow(\n        `Speaker with ID ${speakerId} not found`,\n      );\n      expect(mockStorageService.uploadFile).not.toHaveBeenCalled();\n    });\n\n    it('should throw NotFoundException when speaker is deleted', async () => {\n      const speakerId = '507f1f77bcf86cd799439011';\n      const file = createMockFile(Buffer.alloc(1000, 'a'), 'image/jpeg', 1000);\n\n      // Soft-deleted speaker\n      mockSpeakerModel.findOne.mockResolvedValue(null);\n\n      await expect(service.uploadPhoto(speakerId, file)).rejects.toThrow(NotFoundException);\n      expect(mockSpeakerModel.findOne).toHaveBeenCalledWith({\n        _id: speakerId,\n        deletedAt: null,\n      });\n    });\n\n    it('should propagate StorageService errors', async () => {\n      const speakerId = '507f1f77bcf86cd799439011';\n      const file = createMockFile(Buffer.alloc(1000, 'a'), 'image/jpeg', 1000);\n\n      const mockSpeakerDoc = {\n        ...mockSpeaker,\n        _id: speakerId,\n        photoUrl: 'https://example.com/old-photo.jpg',\n        save: jest.fn(),\n      };\n\n      mockSpeakerModel.findOne.mockResolvedValue(mockSpeakerDoc);\n      mockStorageService.uploadFile.mockRejectedValueOnce(new Error('S3 upload failed'));\n\n      await expect(service.uploadPhoto(speakerId, file)).rejects.toThrow('S3 upload failed');\n      expect(mockSpeakerDoc.save).not.toHaveBeenCalled();\n    });\n  });\n});\n"],"version":3}