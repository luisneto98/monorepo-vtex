{"file":"/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/auth/auth.controller.ts","mappings":"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","names":[],"sources":["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/auth/auth.controller.ts"],"sourcesContent":["import {\n  Controller,\n  Post,\n  Body,\n  UseGuards,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Res,\n  Req,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiResponse, ApiBody, ApiBearerAuth } from '@nestjs/swagger';\nimport { Response, Request as ExpressRequest } from 'express';\nimport { AuthService } from './auth.service';\nimport { LoginDto } from './dto/login.dto';\nimport { RegisterDto } from './dto/register.dto';\nimport { JwtAuthGuard } from '@common/guards/jwt-auth.guard';\nimport { Public } from '@common/decorators/public.decorator';\nimport { CurrentUser } from '@common/decorators/current-user.decorator';\nimport { Throttle } from '@nestjs/throttler';\n\n@ApiTags('Authentication')\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @Public()\n  @Throttle({ default: { limit: 5, ttl: 60000 } }) // 5 requests per minute\n  @HttpCode(HttpStatus.OK)\n  @Post('login')\n  @ApiOperation({ summary: 'User login' })\n  @ApiBody({\n    type: LoginDto,\n    examples: {\n      admin: {\n        value: {\n          email: 'admin@vtexday.com',\n          password: 'SecurePassword123!',\n        },\n        description: 'Admin user login',\n      },\n      regular: {\n        value: {\n          email: 'user@example.com',\n          password: 'UserPassword456!',\n        },\n        description: 'Regular user login',\n      },\n    },\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Login successful',\n    schema: {\n      example: {\n        accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...',\n        user: {\n          id: '507f1f77bcf86cd799439011',\n          email: 'admin@vtexday.com',\n          role: 'admin',\n        },\n      },\n    },\n  })\n  @ApiResponse({\n    status: 401,\n    description: 'Invalid credentials',\n    schema: {\n      example: {\n        statusCode: 401,\n        message: 'Invalid credentials',\n        error: 'Unauthorized',\n      },\n    },\n  })\n  @ApiResponse({\n    status: 429,\n    description: 'Too many requests',\n    schema: {\n      example: {\n        statusCode: 429,\n        message: 'ThrottlerException: Too Many Requests',\n        error: 'Too Many Requests',\n      },\n    },\n  })\n  async login(@Body() loginDto: LoginDto, @Res({ passthrough: true }) response: Response) {\n    const authResult = await this.authService.login(loginDto);\n\n    // Set refresh token in HttpOnly cookie\n    this.setRefreshTokenCookie(response, authResult.refreshToken);\n\n    // Return auth response without refresh token in body\n    const { refreshToken, ...result } = authResult;\n    return result;\n  }\n\n  @Public()\n  @Throttle({ default: { limit: 5, ttl: 60000 } }) // 5 requests per minute\n  @HttpCode(HttpStatus.OK)\n  @Post('refresh')\n  @ApiOperation({ summary: 'Refresh access token using refresh token from cookie' })\n  @ApiResponse({\n    status: 200,\n    description: 'Token refreshed successfully',\n    schema: {\n      example: {\n        accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...',\n        user: {\n          id: '507f1f77bcf86cd799439011',\n          email: 'admin@vtexday.com',\n          role: 'admin',\n        },\n      },\n    },\n  })\n  @ApiResponse({\n    status: 401,\n    description: 'Invalid or expired refresh token',\n    schema: {\n      example: {\n        statusCode: 401,\n        message: 'Invalid or expired refresh token',\n        error: 'Unauthorized',\n      },\n    },\n  })\n  async refresh(@Req() request: ExpressRequest, @Res({ passthrough: true }) response: Response) {\n    const refreshToken = this.extractRefreshTokenFromCookie(request);\n\n    if (!refreshToken) {\n      throw new UnauthorizedException('Refresh token not provided');\n    }\n\n    const authResult = await this.authService.refreshTokens(refreshToken);\n\n    // Set new refresh token in HttpOnly cookie\n    this.setRefreshTokenCookie(response, authResult.refreshToken);\n\n    // Return auth response without refresh token in body\n    const { refreshToken: _, ...result } = authResult;\n    return result;\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @HttpCode(HttpStatus.NO_CONTENT)\n  @Post('logout')\n  @ApiBearerAuth('JWT-auth')\n  @ApiOperation({ summary: 'Logout user and invalidate tokens' })\n  @ApiResponse({\n    status: 204,\n    description: 'Logout successful',\n  })\n  @ApiResponse({\n    status: 401,\n    description: 'Unauthorized - Invalid or missing JWT token',\n  })\n  async logout(@CurrentUser() user: any, @Res({ passthrough: true }) response: Response) {\n    await this.authService.logout(user.sub);\n\n    // Clear refresh token cookie\n    this.clearRefreshTokenCookie(response);\n\n    return;\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Get('profile')\n  @ApiBearerAuth('JWT-auth')\n  @ApiOperation({ summary: 'Get current user profile' })\n  @ApiResponse({\n    status: 200,\n    description: 'User profile retrieved successfully',\n    schema: {\n      example: {\n        id: '507f1f77bcf86cd799439011',\n        email: 'admin@vtexday.com',\n        role: 'admin',\n      },\n    },\n  })\n  @ApiResponse({\n    status: 401,\n    description: 'Unauthorized - Invalid or missing JWT token',\n  })\n  getProfile(@CurrentUser() user: any) {\n    return {\n      id: user.sub,\n      email: user.email,\n      role: user.role,\n    };\n  }\n\n  @Public()\n  @Post('register')\n  @ApiOperation({ summary: 'Register new user' })\n  @ApiBody({\n    type: RegisterDto,\n    examples: {\n      newUser: {\n        value: {\n          email: 'newuser@example.com',\n          password: 'SecurePassword123!',\n          name: 'João Silva',\n          company: 'VTEX',\n          phone: '+5511999999999',\n        },\n        description: 'New user registration',\n      },\n    },\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'User registered successfully',\n    schema: {\n      example: {\n        accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...',\n        user: {\n          id: '507f1f77bcf86cd799439011',\n          email: 'newuser@example.com',\n          role: 'user',\n        },\n      },\n    },\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Validation error or user already exists',\n    schema: {\n      example: {\n        statusCode: 400,\n        message: ['email must be an email', 'password is too weak'],\n        error: 'Bad Request',\n      },\n    },\n  })\n  @ApiResponse({\n    status: 409,\n    description: 'Email already registered',\n    schema: {\n      example: {\n        statusCode: 409,\n        message: 'Email already registered',\n        error: 'Conflict',\n      },\n    },\n  })\n  async register(@Body() registerDto: RegisterDto, @Res({ passthrough: true }) response: Response) {\n    const authResult = await this.authService.register(registerDto);\n\n    // Set refresh token in HttpOnly cookie\n    this.setRefreshTokenCookie(response, authResult.refreshToken);\n\n    // Return auth response without refresh token in body\n    const { refreshToken: __, ...result } = authResult;\n    return result;\n  }\n\n  private setRefreshTokenCookie(response: Response, refreshToken: string) {\n    const cookieOptions = {\n      httpOnly: true,\n      secure: process.env['NODE_ENV'] === 'production',\n      sameSite: 'strict' as const,\n      maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days\n      path: '/auth/refresh',\n    };\n\n    response.cookie('refreshToken', refreshToken, cookieOptions);\n  }\n\n  private clearRefreshTokenCookie(response: Response) {\n    response.cookie('refreshToken', '', {\n      httpOnly: true,\n      secure: process.env['NODE_ENV'] === 'production',\n      sameSite: 'strict' as const,\n      expires: new Date(0),\n      path: '/auth/refresh',\n    });\n  }\n\n  private extractRefreshTokenFromCookie(request: ExpressRequest): string | null {\n    return request.cookies?.['refreshToken'] || null;\n  }\n}\n"],"version":3}