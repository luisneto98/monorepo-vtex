{"file":"/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/sessions/sessions.service.ts","mappings":";;;;;;;;;;;;;;;AAAA,2CAAkF;AAClF,+CAA+C;AAC/C,uCAAiC;AACjC,6DAAoE;AAO7D,IAAM,eAAe,GAArB,MAAM,eAAe;IACqB;IAA/C,YAA+C,YAAoC;QAApC,iBAAY,GAAZ,YAAY,CAAwB;IAAG,CAAC;IAEvF,KAAK,CAAC,MAAM,CAAC,gBAAkC;QAC7C,wDAAwD;QACxD,MAAM,IAAI,CAAC,iBAAiB,CAC1B,gBAAgB,CAAC,SAAS,EAC1B,gBAAgB,CAAC,OAAO,EACxB,gBAAgB,CAAC,KAAK,CACvB,CAAC;QAEF,MAAM,cAAc,GAAG,IAAI,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,CAAC;QAC/D,OAAO,cAAc,CAAC,IAAI,EAAE,CAAC;IAC/B,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,SAA2B;QACvC,MAAM,EACJ,IAAI,GAAG,CAAC,EACR,KAAK,GAAG,EAAE,EACV,IAAI,EACJ,MAAM,EACN,SAAS,EACT,OAAO,EACP,KAAK,EACL,IAAI,EACJ,IAAI,EACJ,SAAS,EACT,SAAS,EACT,WAAW,EACX,SAAS,EACT,MAAM,EACN,UAAU,EACV,MAAM,GACP,GAAG,SAAS,CAAC;QAEd,MAAM,KAAK,GAAQ,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;QAEvC,IAAI,MAAM,EAAE,CAAC;YACX,KAAK,CAAC,GAAG,GAAG;gBACV,EAAE,aAAa,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,GAAG,EAAE,EAAE;gBACpD,EAAE,UAAU,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,GAAG,EAAE,EAAE;gBACjD,EAAE,mBAAmB,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,GAAG,EAAE,EAAE;gBAC1D,EAAE,gBAAgB,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,GAAG,EAAE,EAAE;aACxD,CAAC;QACJ,CAAC;QAED,IAAI,SAAS,EAAE,CAAC;YACd,KAAK,CAAC,SAAS,GAAG,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC;QACxC,CAAC;QAED,IAAI,OAAO,EAAE,CAAC;YACZ,IAAI,KAAK,CAAC,SAAS,EAAE,CAAC;gBACpB,KAAK,CAAC,SAAS,CAAC,IAAI,GAAG,OAAO,CAAC;YACjC,CAAC;iBAAM,CAAC;gBACN,KAAK,CAAC,SAAS,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;YACtC,CAAC;QACH,CAAC;QAED,IAAI,KAAK,EAAE,CAAC;YACV,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC;QACtB,CAAC;QAED,IAAI,IAAI,EAAE,CAAC;YACT,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC;QACpB,CAAC;QAED,IAAI,IAAI,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC5B,KAAK,CAAC,IAAI,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC;QAC7B,CAAC;QAED,IAAI,SAAS,EAAE,CAAC;YACd,KAAK,CAAC,UAAU,GAAG,SAAS,CAAC;QAC/B,CAAC;QAED,IAAI,SAAS,EAAE,CAAC;YACd,KAAK,CAAC,UAAU,GAAG,SAAS,CAAC;QAC/B,CAAC;QAED,IAAI,OAAO,WAAW,KAAK,WAAW,EAAE,CAAC;YACvC,KAAK,CAAC,WAAW,GAAG,WAAW,CAAC;QAClC,CAAC;QAED,IAAI,OAAO,SAAS,KAAK,WAAW,EAAE,CAAC;YACrC,KAAK,CAAC,SAAS,GAAG,SAAS,CAAC;QAC9B,CAAC;QAED,qBAAqB;QACrB,MAAM,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC;QACvB,IAAI,MAAM,EAAE,CAAC;YACX,KAAK,CAAC,SAAS,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC;YAChC,KAAK,CAAC,OAAO,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;QAC/B,CAAC;aAAM,IAAI,UAAU,EAAE,CAAC;YACtB,KAAK,CAAC,SAAS,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;QACjC,CAAC;aAAM,IAAI,MAAM,EAAE,CAAC;YAClB,KAAK,CAAC,OAAO,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;QAC/B,CAAC;QAED,MAAM,IAAI,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC;QAEhC,IAAI,WAAW,GAAQ,EAAE,SAAS,EAAE,CAAC,EAAE,CAAC;QACxC,IAAI,IAAI,EAAE,CAAC;YACT,WAAW,GAAG,EAAE,CAAC;YACjB,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACnC,KAAK,MAAM,KAAK,IAAI,UAAU,EAAE,CAAC;gBAC/B,IAAI,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE,CAAC;oBAC1B,WAAW,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACvC,CAAC;qBAAM,CAAC;oBACN,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBACzB,CAAC;YACH,CAAC;QACH,CAAC;QAED,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;YACtC,IAAI,CAAC,YAAY;iBACd,IAAI,CAAC,KAAK,CAAC;iBACX,QAAQ,CAAC,YAAY,EAAE,uBAAuB,CAAC;iBAC/C,QAAQ,CAAC,YAAY,EAAE,mBAAmB,CAAC;iBAC3C,IAAI,CAAC,WAAW,CAAC;iBACjB,IAAI,CAAC,IAAI,CAAC;iBACV,KAAK,CAAC,KAAK,CAAC;iBACZ,IAAI,EAAE;YACT,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,KAAK,CAAC;SACxC,CAAC,CAAC;QAEH,OAAO;YACL,OAAO,EAAE,IAAI;YACb,IAAI;YACJ,QAAQ,EAAE;gBACR,KAAK;gBACL,IAAI;gBACJ,KAAK;gBACL,OAAO,EAAE,IAAI,GAAG,IAAI,CAAC,MAAM,GAAG,KAAK;gBACnC,OAAO,EAAE,IAAI,GAAG,CAAC;aAClB;SACF,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,QAAQ,CAAC,EAAU;QACvB,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,YAAY;aACpC,OAAO,CAAC;YACP,GAAG,EAAE,EAAE;YACP,SAAS,EAAE,IAAI;SAChB,CAAC;aACD,QAAQ,CAAC,YAAY,EAAE,oCAAoC,CAAC;aAC5D,QAAQ,CAAC,YAAY,EAAE,uCAAuC,CAAC;aAC/D,IAAI,EAAE,CAAC;QAEV,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,MAAM,IAAI,0BAAiB,CAAC,mBAAmB,EAAE,YAAY,CAAC,CAAC;QACjE,CAAC;QAED,OAAO,OAAO,CAAC;IACjB,CAAC;IAED,KAAK,CAAC,cAAc;QAClB,OAAO,IAAI,CAAC,YAAY;aACrB,IAAI,CAAC;YACJ,WAAW,EAAE,IAAI;YACjB,SAAS,EAAE,IAAI;YACf,SAAS,EAAE,IAAI;SAChB,CAAC;aACD,QAAQ,CAAC,YAAY,EAAE,uBAAuB,CAAC;aAC/C,IAAI,CAAC,EAAE,SAAS,EAAE,CAAC,EAAE,CAAC;aACtB,IAAI,EAAE,CAAC;IACZ,CAAC;IAED,KAAK,CAAC,gBAAgB;QACpB,MAAM,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC;QACvB,OAAO,IAAI,CAAC,YAAY;aACrB,IAAI,CAAC;YACJ,SAAS,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE;YACxB,OAAO,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE;YACrB,SAAS,EAAE,IAAI;YACf,SAAS,EAAE,IAAI;SAChB,CAAC;aACD,QAAQ,CAAC,YAAY,EAAE,uBAAuB,CAAC;aAC/C,IAAI,CAAC,EAAE,SAAS,EAAE,CAAC,EAAE,CAAC;aACtB,IAAI,EAAE,CAAC;IACZ,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,EAAU,EAAE,gBAAkC;QACzD,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC;YAC9C,GAAG,EAAE,EAAE;YACP,SAAS,EAAE,IAAI;SAChB,CAAC,CAAC;QAEH,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,MAAM,IAAI,0BAAiB,CAAC,mBAAmB,EAAE,YAAY,CAAC,CAAC;QACjE,CAAC;QAED,6DAA6D;QAC7D,IAAI,gBAAgB,CAAC,SAAS,IAAI,gBAAgB,CAAC,OAAO,IAAI,gBAAgB,CAAC,KAAK,EAAE,CAAC;YACrF,MAAM,SAAS,GAAG,gBAAgB,CAAC,SAAS,IAAI,OAAO,CAAC,SAAS,CAAC;YAClE,MAAM,OAAO,GAAG,gBAAgB,CAAC,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC;YAC5D,MAAM,KAAK,GAAG,gBAAgB,CAAC,KAAK,IAAI,OAAO,CAAC,KAAK,CAAC;YAEtD,MAAM,IAAI,CAAC,iBAAiB,CAAC,SAAS,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC;QAC9D,CAAC;QAED,kDAAkD;QAClD,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,iBAAiB,CACvD,EAAE,EACF,EAAE,IAAI,EAAE,gBAAgB,EAAE,EAC1B,EAAE,GAAG,EAAE,IAAI,EAAE,aAAa,EAAE,IAAI,EAAE,CACnC,CAAC;QAEF,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,MAAM,IAAI,0BAAiB,CAAC,mBAAmB,EAAE,YAAY,CAAC,CAAC;QACjE,CAAC;QAED,OAAO,OAAO,CAAC;IACjB,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,EAAU,EAAE,MAAe,EAAE,MAAe;QACvD,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC;YAC9C,GAAG,EAAE,EAAE;YACP,SAAS,EAAE,IAAI;SAChB,CAAC,CAAC;QAEH,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,MAAM,IAAI,0BAAiB,CAAC,mBAAmB,EAAE,YAAY,CAAC,CAAC;QACjE,CAAC;QAED,OAAO,CAAC,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC;QAC/B,OAAO,CAAC,YAAY,GAAG,MAAM,CAAC;QAE9B,IAAI,MAAM,EAAE,CAAC;YACX,OAAO,CAAC,SAAS,GAAG,MAAa,CAAC;QACpC,CAAC;QAED,MAAM,OAAO,CAAC,IAAI,EAAE,CAAC;IACvB,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,EAAU;QACtB,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC;YAC9C,GAAG,EAAE,EAAE;YACP,SAAS,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE;SACzB,CAAC,CAAC;QAEH,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,MAAM,IAAI,0BAAiB,CAAC,2BAA2B,EAAE,YAAY,CAAC,CAAC;QACzE,CAAC;QAED,OAAO,CAAC,SAAS,GAAG,IAAI,CAAC;QACzB,OAAO,CAAC,SAAS,GAAG,IAAI,CAAC;QACzB,OAAO,CAAC,YAAY,GAAG,IAAI,CAAC;QAE5B,OAAO,OAAO,CAAC,IAAI,EAAE,CAAC;IACxB,CAAC;IAEO,KAAK,CAAC,iBAAiB,CAC7B,SAAe,EACf,OAAa,EACb,KAAa,EACb,SAAkB;QAElB,MAAM,KAAK,GAAQ;YACjB,KAAK;YACL,SAAS,EAAE,IAAI;YACf,GAAG,EAAE;gBACH;oBACE,SAAS,EAAE,EAAE,GAAG,EAAE,OAAO,EAAE;oBAC3B,OAAO,EAAE,EAAE,GAAG,EAAE,SAAS,EAAE;iBAC5B;aACF;SACF,CAAC;QAEF,IAAI,SAAS,EAAE,CAAC;YACd,KAAK,CAAC,GAAG,GAAG,EAAE,GAAG,EAAE,SAAS,EAAE,CAAC;QACjC,CAAC;QAED,MAAM,kBAAkB,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAElE,IAAI,kBAAkB,EAAE,CAAC;YACvB,MAAM,IAAI,0BAAiB,CACzB,kEAAkE,KAAK,2BAA2B,CACnG,CAAC;QACJ,CAAC;IACH,CAAC;CACF,CAAA;AAvRY,0CAAe;0BAAf,eAAe;IAD3B,IAAA,mBAAU,GAAE;IAEE,WAAA,IAAA,sBAAW,EAAC,wBAAO,CAAC,IAAI,CAAC,CAAA;qCAAuB,gBAAK;GADvD,eAAe,CAuR3B","names":[],"sources":["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/sessions/sessions.service.ts"],"sourcesContent":["import { Injectable, NotFoundException, ConflictException } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { Session, SessionDocument } from './schemas/session.schema';\nimport { CreateSessionDto } from './dto/create-session.dto';\nimport { UpdateSessionDto } from './dto/update-session.dto';\nimport { SessionFilterDto } from './dto/session-filter.dto';\nimport { PaginatedResponse } from '@common/dto/pagination.dto';\n\n@Injectable()\nexport class SessionsService {\n  constructor(@InjectModel(Session.name) private sessionModel: Model<SessionDocument>) {}\n\n  async create(createSessionDto: CreateSessionDto): Promise<SessionDocument> {\n    // Check for conflicts (same stage and overlapping time)\n    await this.checkTimeConflict(\n      createSessionDto.startTime,\n      createSessionDto.endTime,\n      createSessionDto.stage,\n    );\n\n    const createdSession = new this.sessionModel(createSessionDto);\n    return createdSession.save();\n  }\n\n  async findAll(filterDto: SessionFilterDto): Promise<PaginatedResponse<SessionDocument>> {\n    const {\n      page = 1,\n      limit = 20,\n      sort,\n      search,\n      startDate,\n      endDate,\n      stage,\n      type,\n      tags,\n      speakerId,\n      sponsorId,\n      isHighlight,\n      isVisible,\n      isLive,\n      isUpcoming,\n      isPast,\n    } = filterDto;\n\n    const query: any = { deletedAt: null };\n\n    if (search) {\n      query.$or = [\n        { 'title.pt-BR': { $regex: search, $options: 'i' } },\n        { 'title.en': { $regex: search, $options: 'i' } },\n        { 'description.pt-BR': { $regex: search, $options: 'i' } },\n        { 'description.en': { $regex: search, $options: 'i' } },\n      ];\n    }\n\n    if (startDate) {\n      query.startTime = { $gte: startDate };\n    }\n\n    if (endDate) {\n      if (query.startTime) {\n        query.startTime.$lte = endDate;\n      } else {\n        query.startTime = { $lte: endDate };\n      }\n    }\n\n    if (stage) {\n      query.stage = stage;\n    }\n\n    if (type) {\n      query.type = type;\n    }\n\n    if (tags && tags.length > 0) {\n      query.tags = { $in: tags };\n    }\n\n    if (speakerId) {\n      query.speakerIds = speakerId;\n    }\n\n    if (sponsorId) {\n      query.sponsorIds = sponsorId;\n    }\n\n    if (typeof isHighlight !== 'undefined') {\n      query.isHighlight = isHighlight;\n    }\n\n    if (typeof isVisible !== 'undefined') {\n      query.isVisible = isVisible;\n    }\n\n    // Time-based filters\n    const now = new Date();\n    if (isLive) {\n      query.startTime = { $lte: now };\n      query.endTime = { $gt: now };\n    } else if (isUpcoming) {\n      query.startTime = { $gt: now };\n    } else if (isPast) {\n      query.endTime = { $lt: now };\n    }\n\n    const skip = (page - 1) * limit;\n\n    let sortOptions: any = { startTime: 1 };\n    if (sort) {\n      sortOptions = {};\n      const sortFields = sort.split(',');\n      for (const field of sortFields) {\n        if (field.startsWith('-')) {\n          sortOptions[field.substring(1)] = -1;\n        } else {\n          sortOptions[field] = 1;\n        }\n      }\n    }\n\n    const [data, total] = await Promise.all([\n      this.sessionModel\n        .find(query)\n        .populate('speakerIds', 'name photoUrl company')\n        .populate('sponsorIds', 'name logoUrl tier')\n        .sort(sortOptions)\n        .skip(skip)\n        .limit(limit)\n        .exec(),\n      this.sessionModel.countDocuments(query),\n    ]);\n\n    return {\n      success: true,\n      data,\n      metadata: {\n        total,\n        page,\n        limit,\n        hasNext: skip + data.length < total,\n        hasPrev: page > 1,\n      },\n    };\n  }\n\n  async findById(id: string): Promise<SessionDocument> {\n    const session = await this.sessionModel\n      .findOne({\n        _id: id,\n        deletedAt: null,\n      })\n      .populate('speakerIds', 'name photoUrl company bio position')\n      .populate('sponsorIds', 'name logoUrl tier description website')\n      .exec();\n\n    if (!session) {\n      throw new NotFoundException(`Session with ID ${id} not found`);\n    }\n\n    return session;\n  }\n\n  async findHighlights(): Promise<SessionDocument[]> {\n    return this.sessionModel\n      .find({\n        isHighlight: true,\n        isVisible: true,\n        deletedAt: null,\n      })\n      .populate('speakerIds', 'name photoUrl company')\n      .sort({ startTime: 1 })\n      .exec();\n  }\n\n  async findLiveSessions(): Promise<SessionDocument[]> {\n    const now = new Date();\n    return this.sessionModel\n      .find({\n        startTime: { $lte: now },\n        endTime: { $gt: now },\n        isVisible: true,\n        deletedAt: null,\n      })\n      .populate('speakerIds', 'name photoUrl company')\n      .sort({ startTime: 1 })\n      .exec();\n  }\n\n  async update(id: string, updateSessionDto: UpdateSessionDto): Promise<SessionDocument> {\n    const session = await this.sessionModel.findOne({\n      _id: id,\n      deletedAt: null,\n    });\n\n    if (!session) {\n      throw new NotFoundException(`Session with ID ${id} not found`);\n    }\n\n    // Check for time conflicts if time or stage is being updated\n    if (updateSessionDto.startTime || updateSessionDto.endTime || updateSessionDto.stage) {\n      const startTime = updateSessionDto.startTime || session.startTime;\n      const endTime = updateSessionDto.endTime || session.endTime;\n      const stage = updateSessionDto.stage || session.stage;\n\n      await this.checkTimeConflict(startTime, endTime, stage, id);\n    }\n\n    // Use findByIdAndUpdate to bypass full validation\n    const updated = await this.sessionModel.findByIdAndUpdate(\n      id,\n      { $set: updateSessionDto },\n      { new: true, runValidators: true },\n    );\n\n    if (!updated) {\n      throw new NotFoundException(`Session with ID ${id} not found`);\n    }\n\n    return updated;\n  }\n\n  async remove(id: string, reason?: string, userId?: string): Promise<void> {\n    const session = await this.sessionModel.findOne({\n      _id: id,\n      deletedAt: null,\n    });\n\n    if (!session) {\n      throw new NotFoundException(`Session with ID ${id} not found`);\n    }\n\n    session.deletedAt = new Date();\n    session.deleteReason = reason;\n\n    if (userId) {\n      session.deletedBy = userId as any;\n    }\n\n    await session.save();\n  }\n\n  async restore(id: string): Promise<SessionDocument> {\n    const session = await this.sessionModel.findOne({\n      _id: id,\n      deletedAt: { $ne: null },\n    });\n\n    if (!session) {\n      throw new NotFoundException(`Deleted session with ID ${id} not found`);\n    }\n\n    session.deletedAt = null;\n    session.deletedBy = null;\n    session.deleteReason = null;\n\n    return session.save();\n  }\n\n  private async checkTimeConflict(\n    startTime: Date,\n    endTime: Date,\n    stage: string,\n    excludeId?: string,\n  ): Promise<void> {\n    const query: any = {\n      stage,\n      deletedAt: null,\n      $or: [\n        {\n          startTime: { $lt: endTime },\n          endTime: { $gt: startTime },\n        },\n      ],\n    };\n\n    if (excludeId) {\n      query._id = { $ne: excludeId };\n    }\n\n    const conflictingSession = await this.sessionModel.findOne(query);\n\n    if (conflictingSession) {\n      throw new ConflictException(\n        `Time conflict: Another session is scheduled at the same stage \"${stage}\" during this time period`,\n      );\n    }\n  }\n}\n"],"version":3}