376c0f94acb93c92c6083954745487fe
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SessionsService = void 0;
const common_1 = require("@nestjs/common");
const mongoose_1 = require("@nestjs/mongoose");
const mongoose_2 = require("mongoose");
const session_schema_1 = require("./schemas/session.schema");
let SessionsService = class SessionsService {
    sessionModel;
    constructor(sessionModel) {
        this.sessionModel = sessionModel;
    }
    async create(createSessionDto) {
        // Check for conflicts (same stage and overlapping time)
        await this.checkTimeConflict(createSessionDto.startTime, createSessionDto.endTime, createSessionDto.stage);
        const createdSession = new this.sessionModel(createSessionDto);
        return createdSession.save();
    }
    async findAll(filterDto) {
        const { page = 1, limit = 20, sort, search, startDate, endDate, stage, type, tags, speakerId, sponsorId, isHighlight, isVisible, isLive, isUpcoming, isPast, } = filterDto;
        const query = { deletedAt: null };
        if (search) {
            query.$or = [
                { 'title.pt-BR': { $regex: search, $options: 'i' } },
                { 'title.en': { $regex: search, $options: 'i' } },
                { 'description.pt-BR': { $regex: search, $options: 'i' } },
                { 'description.en': { $regex: search, $options: 'i' } },
            ];
        }
        if (startDate) {
            query.startTime = { $gte: startDate };
        }
        if (endDate) {
            if (query.startTime) {
                query.startTime.$lte = endDate;
            }
            else {
                query.startTime = { $lte: endDate };
            }
        }
        if (stage) {
            query.stage = stage;
        }
        if (type) {
            query.type = type;
        }
        if (tags && tags.length > 0) {
            query.tags = { $in: tags };
        }
        if (speakerId) {
            query.speakerIds = speakerId;
        }
        if (sponsorId) {
            query.sponsorIds = sponsorId;
        }
        if (typeof isHighlight !== 'undefined') {
            query.isHighlight = isHighlight;
        }
        if (typeof isVisible !== 'undefined') {
            query.isVisible = isVisible;
        }
        // Time-based filters
        const now = new Date();
        if (isLive) {
            query.startTime = { $lte: now };
            query.endTime = { $gt: now };
        }
        else if (isUpcoming) {
            query.startTime = { $gt: now };
        }
        else if (isPast) {
            query.endTime = { $lt: now };
        }
        const skip = (page - 1) * limit;
        let sortOptions = { startTime: 1 };
        if (sort) {
            sortOptions = {};
            const sortFields = sort.split(',');
            for (const field of sortFields) {
                if (field.startsWith('-')) {
                    sortOptions[field.substring(1)] = -1;
                }
                else {
                    sortOptions[field] = 1;
                }
            }
        }
        const [data, total] = await Promise.all([
            this.sessionModel
                .find(query)
                .populate('speakerIds', 'name photoUrl company')
                .populate('sponsorIds', 'name logoUrl tier')
                .sort(sortOptions)
                .skip(skip)
                .limit(limit)
                .exec(),
            this.sessionModel.countDocuments(query),
        ]);
        return {
            success: true,
            data,
            metadata: {
                total,
                page,
                limit,
                hasNext: skip + data.length < total,
                hasPrev: page > 1,
            },
        };
    }
    async findById(id) {
        const session = await this.sessionModel
            .findOne({
            _id: id,
            deletedAt: null,
        })
            .populate('speakerIds', 'name photoUrl company bio position')
            .populate('sponsorIds', 'name logoUrl tier description website')
            .exec();
        if (!session) {
            throw new common_1.NotFoundException(`Session with ID ${id} not found`);
        }
        return session;
    }
    async findHighlights() {
        return this.sessionModel
            .find({
            isHighlight: true,
            isVisible: true,
            deletedAt: null,
        })
            .populate('speakerIds', 'name photoUrl company')
            .sort({ startTime: 1 })
            .exec();
    }
    async findLiveSessions() {
        const now = new Date();
        return this.sessionModel
            .find({
            startTime: { $lte: now },
            endTime: { $gt: now },
            isVisible: true,
            deletedAt: null,
        })
            .populate('speakerIds', 'name photoUrl company')
            .sort({ startTime: 1 })
            .exec();
    }
    async update(id, updateSessionDto) {
        const session = await this.sessionModel.findOne({
            _id: id,
            deletedAt: null,
        });
        if (!session) {
            throw new common_1.NotFoundException(`Session with ID ${id} not found`);
        }
        // Check for time conflicts if time or stage is being updated
        if (updateSessionDto.startTime || updateSessionDto.endTime || updateSessionDto.stage) {
            const startTime = updateSessionDto.startTime || session.startTime;
            const endTime = updateSessionDto.endTime || session.endTime;
            const stage = updateSessionDto.stage || session.stage;
            await this.checkTimeConflict(startTime, endTime, stage, id);
        }
        // Use findByIdAndUpdate to bypass full validation
        const updated = await this.sessionModel.findByIdAndUpdate(id, { $set: updateSessionDto }, { new: true, runValidators: true });
        if (!updated) {
            throw new common_1.NotFoundException(`Session with ID ${id} not found`);
        }
        return updated;
    }
    async remove(id, reason, userId) {
        const session = await this.sessionModel.findOne({
            _id: id,
            deletedAt: null,
        });
        if (!session) {
            throw new common_1.NotFoundException(`Session with ID ${id} not found`);
        }
        session.deletedAt = new Date();
        session.deleteReason = reason;
        if (userId) {
            session.deletedBy = userId;
        }
        await session.save();
    }
    async restore(id) {
        const session = await this.sessionModel.findOne({
            _id: id,
            deletedAt: { $ne: null },
        });
        if (!session) {
            throw new common_1.NotFoundException(`Deleted session with ID ${id} not found`);
        }
        session.deletedAt = null;
        session.deletedBy = null;
        session.deleteReason = null;
        return session.save();
    }
    async checkTimeConflict(startTime, endTime, stage, excludeId) {
        const query = {
            stage,
            deletedAt: null,
            $or: [
                {
                    startTime: { $lt: endTime },
                    endTime: { $gt: startTime },
                },
            ],
        };
        if (excludeId) {
            query._id = { $ne: excludeId };
        }
        const conflictingSession = await this.sessionModel.findOne(query);
        if (conflictingSession) {
            throw new common_1.ConflictException(`Time conflict: Another session is scheduled at the same stage "${stage}" during this time period`);
        }
    }
};
exports.SessionsService = SessionsService;
exports.SessionsService = SessionsService = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, mongoose_1.InjectModel)(session_schema_1.Session.name)),
    __metadata("design:paramtypes", [mongoose_2.Model])
], SessionsService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,