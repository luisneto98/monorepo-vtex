{"version":3,"names":["cov_1qm3o4x01v","actualCoverage","common_1","s","require","client_s3_1","s3_request_presigner_1","storage_config_service_1","virus_scanner_service_1","storage_types_1","StorageService","StorageService_1","storageConfigService","virusScannerService","s3Client","bucketName","region","logger","Logger","name","magicBytesPatterns","mimeType","pattern","Buffer","from","offset","categoryDefaults","FileCategory","SPEAKER_PHOTOS","maxSizeBytes","allowedMimeTypes","SPONSOR_LOGOS","LEGAL_DOCUMENTS","PRESS_MATERIALS","constructor","f","getAwsRegion","getAwsBucket","S3Client","credentials","accessKeyId","getAwsAccessKeyId","secretAccessKey","getAwsSecretAccessKey","uploadFile","file","category","options","defaults","uploadOptions","b","scanForVirus","metadata","validateFile","validateMagicBytes","scanFile","buffer","originalname","mimetype","key","generateFileKey","command","PutObjectCommand","Bucket","Key","Body","ContentType","Metadata","send","url","log","error","BadRequestException","message","stack","InternalServerErrorException","length","size","maxSizeMB","toFixed","includes","allowedTypes","map","type","split","toUpperCase","join","isValidMagicBytes","find","p","debug","fileBytes","slice","riffMatch","equals","webpMarker","toString","deleteFile","DeleteObjectCommand","getSignedUrl","expiresIn","GetObjectCommand","getFile","response","getFileMetadata","HeadObjectCommand","ContentLength","contentType","filename","timestamp","Date","now","random","Math","round","extension","pop","sanitizedExtension","replace","toLowerCase","exports","__decorate","Injectable","StorageConfigService","VirusScannerService"],"sources":["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/storage/services/storage.service.ts"],"sourcesContent":["import {\n  Injectable,\n  InternalServerErrorException,\n  Logger,\n  BadRequestException,\n} from '@nestjs/common';\nimport {\n  S3Client,\n  PutObjectCommand,\n  GetObjectCommand,\n  DeleteObjectCommand,\n  HeadObjectCommand,\n} from '@aws-sdk/client-s3';\nimport { getSignedUrl } from '@aws-sdk/s3-request-presigner';\nimport { Readable } from 'stream';\nimport { StorageConfigService } from './storage-config.service';\nimport { VirusScannerService } from './virus-scanner.service';\nimport {\n  FileCategory,\n  UploadResult,\n  UploadOptions,\n  FileValidationOptions,\n  MagicBytesPattern,\n} from '../types/storage.types';\n\n@Injectable()\nexport class StorageService {\n  private readonly s3Client: S3Client;\n  private readonly bucketName: string;\n  private readonly region: string;\n  private readonly logger = new Logger(StorageService.name);\n\n  // Magic bytes patterns for file type validation\n  private readonly magicBytesPatterns: MagicBytesPattern[] = [\n    { mimeType: 'image/jpeg', pattern: Buffer.from([0xff, 0xd8, 0xff]) },\n    {\n      mimeType: 'image/png',\n      pattern: Buffer.from([0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a]),\n    },\n    { mimeType: 'image/webp', pattern: Buffer.from([0x52, 0x49, 0x46, 0x46]), offset: 0 }, // RIFF\n    { mimeType: 'application/pdf', pattern: Buffer.from([0x25, 0x50, 0x44, 0x46]) }, // %PDF\n  ];\n\n  // Default options per category\n  private readonly categoryDefaults: Record<\n    FileCategory,\n    { maxSizeBytes: number; allowedMimeTypes: string[] }\n  > = {\n    [FileCategory.SPEAKER_PHOTOS]: {\n      maxSizeBytes: 5 * 1024 * 1024, // 5MB\n      allowedMimeTypes: ['image/jpeg', 'image/png', 'image/webp'],\n    },\n    [FileCategory.SPONSOR_LOGOS]: {\n      maxSizeBytes: 5 * 1024 * 1024, // 5MB\n      allowedMimeTypes: ['image/jpeg', 'image/png', 'image/webp'],\n    },\n    [FileCategory.LEGAL_DOCUMENTS]: {\n      maxSizeBytes: 10 * 1024 * 1024, // 10MB\n      allowedMimeTypes: ['application/pdf'],\n    },\n    [FileCategory.PRESS_MATERIALS]: {\n      maxSizeBytes: 10 * 1024 * 1024, // 10MB\n      allowedMimeTypes: ['application/pdf', 'image/jpeg', 'image/png'],\n    },\n  };\n\n  constructor(\n    private storageConfigService: StorageConfigService,\n    private virusScannerService: VirusScannerService,\n  ) {\n    this.region = this.storageConfigService.getAwsRegion();\n    this.bucketName = this.storageConfigService.getAwsBucket();\n\n    this.s3Client = new S3Client({\n      region: this.region,\n      credentials: {\n        accessKeyId: this.storageConfigService.getAwsAccessKeyId(),\n        secretAccessKey: this.storageConfigService.getAwsSecretAccessKey(),\n      },\n    });\n  }\n\n  /**\n   * Uploads a file to S3 with validation and virus scanning\n   * @param file - The file to upload\n   * @param category - The category of the file\n   * @param options - Optional upload options\n   * @returns Promise<UploadResult> - The S3 key and public URL\n   */\n  async uploadFile(\n    file: Express.Multer.File,\n    category: FileCategory,\n    options?: UploadOptions,\n  ): Promise<UploadResult> {\n    try {\n      // Get default options for category\n      const defaults = this.categoryDefaults[category];\n\n      // Merge options with defaults\n      const uploadOptions: UploadOptions = {\n        maxSizeBytes: options?.maxSizeBytes ?? defaults.maxSizeBytes,\n        allowedMimeTypes: options?.allowedMimeTypes ?? defaults.allowedMimeTypes,\n        scanForVirus: options?.scanForVirus ?? true,\n        metadata: options?.metadata,\n      };\n\n      // Validate file\n      await this.validateFile(file, {\n        maxSizeBytes: uploadOptions.maxSizeBytes!,\n        allowedMimeTypes: uploadOptions.allowedMimeTypes!,\n        validateMagicBytes: true,\n      });\n\n      // Scan for viruses\n      if (uploadOptions.scanForVirus) {\n        await this.virusScannerService.scanFile(file.buffer, file.originalname, file.mimetype);\n      }\n\n      // Generate unique S3 key\n      const key = this.generateFileKey(file.originalname, category);\n\n      // Upload to S3\n      const command = new PutObjectCommand({\n        Bucket: this.bucketName,\n        Key: key,\n        Body: file.buffer,\n        ContentType: file.mimetype,\n        Metadata: uploadOptions.metadata,\n      });\n\n      await this.s3Client.send(command);\n\n      const url = `https://${this.bucketName}.s3.${this.region}.amazonaws.com/${key}`;\n\n      this.logger.log(`File uploaded successfully to S3: ${key}`);\n      return { key, url };\n    } catch (error: any) {\n      // If it's a validation or scanning error, rethrow it\n      if (error instanceof BadRequestException) {\n        throw error;\n      }\n\n      this.logger.error(`Failed to upload file to S3: ${error.message}`, error.stack);\n      throw new InternalServerErrorException('Failed to upload file to storage');\n    }\n  }\n\n  /**\n   * Validates a file against specified options\n   * @param file - The file to validate\n   * @param options - Validation options\n   * @returns Promise<boolean> - true if valid, throws error otherwise\n   */\n  async validateFile(file: Express.Multer.File, options: FileValidationOptions): Promise<boolean> {\n    // Check file exists\n    if (!file || !file.buffer || file.buffer.length === 0) {\n      throw new BadRequestException('No file provided or file is empty');\n    }\n\n    // Check file size\n    if (file.size > options.maxSizeBytes) {\n      const maxSizeMB = (options.maxSizeBytes / (1024 * 1024)).toFixed(0);\n      throw new BadRequestException(`File size exceeds maximum allowed size of ${maxSizeMB}MB.`);\n    }\n\n    // Check MIME type\n    if (!options.allowedMimeTypes.includes(file.mimetype)) {\n      const allowedTypes = options.allowedMimeTypes\n        .map((type) => type.split('/')[1].toUpperCase())\n        .join(', ');\n      throw new BadRequestException(`Invalid file type. Only ${allowedTypes} files are allowed.`);\n    }\n\n    // Validate magic bytes if requested\n    if (options.validateMagicBytes) {\n      const isValidMagicBytes = this.validateMagicBytes(file.buffer, file.mimetype);\n      if (!isValidMagicBytes) {\n        throw new BadRequestException('File content does not match declared file type.');\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Validates file magic bytes match the declared MIME type\n   * @param buffer - The file buffer\n   * @param mimeType - The declared MIME type\n   * @returns boolean - true if magic bytes match\n   */\n  private validateMagicBytes(buffer: Buffer, mimeType: string): boolean {\n    const pattern = this.magicBytesPatterns.find((p) => p.mimeType === mimeType);\n\n    if (!pattern) {\n      // No pattern defined for this MIME type, skip validation\n      this.logger.debug(`No magic bytes pattern defined for ${mimeType}`);\n      return true;\n    }\n\n    const offset = pattern.offset ?? 0;\n    const fileBytes = buffer.slice(offset, offset + pattern.pattern.length);\n\n    // Special handling for WebP (RIFF...WEBP format)\n    if (mimeType === 'image/webp') {\n      const riffMatch = fileBytes.slice(0, 4).equals(pattern.pattern);\n      const webpMarker = buffer.slice(8, 12).toString('ascii');\n      return riffMatch && webpMarker === 'WEBP';\n    }\n\n    return fileBytes.equals(pattern.pattern);\n  }\n\n  /**\n   * Deletes a file from S3\n   * @param key - The S3 key of the file to delete\n   */\n  async deleteFile(key: string): Promise<void> {\n    try {\n      const command = new DeleteObjectCommand({\n        Bucket: this.bucketName,\n        Key: key,\n      });\n\n      await this.s3Client.send(command);\n      this.logger.log(`File deleted successfully from S3: ${key}`);\n    } catch (error: any) {\n      this.logger.error(`Failed to delete file from S3: ${error.message}`, error.stack);\n      // Don't throw error on delete failure, just log it\n    }\n  }\n\n  /**\n   * Gets a signed URL for secure file downloads\n   * @param key - The S3 key of the file\n   * @param expiresIn - URL expiration time in seconds (default: 3600)\n   * @returns Promise<string> - The signed URL\n   */\n  async getSignedUrl(key: string, expiresIn = 3600): Promise<string> {\n    try {\n      const command = new GetObjectCommand({\n        Bucket: this.bucketName,\n        Key: key,\n      });\n\n      return await getSignedUrl(this.s3Client, command, { expiresIn });\n    } catch (error: any) {\n      this.logger.error(`Failed to generate signed URL: ${error.message}`, error.stack);\n      throw new InternalServerErrorException('Failed to generate download URL');\n    }\n  }\n\n  /**\n   * Gets a file from S3\n   * @param key - The S3 key of the file\n   * @returns Promise<Readable> - The file stream\n   */\n  async getFile(key: string): Promise<Readable> {\n    try {\n      const command = new GetObjectCommand({\n        Bucket: this.bucketName,\n        Key: key,\n      });\n\n      const response = await this.s3Client.send(command);\n      return response.Body as Readable;\n    } catch (error: any) {\n      this.logger.error(`Failed to get file from S3: ${error.message}`, error.stack);\n      throw new InternalServerErrorException('Failed to retrieve file from storage');\n    }\n  }\n\n  /**\n   * Gets file metadata from S3\n   * @param key - The S3 key of the file\n   * @returns Promise<{size: number, contentType: string}>\n   */\n  async getFileMetadata(key: string): Promise<{ size: number; contentType: string }> {\n    try {\n      const command = new HeadObjectCommand({\n        Bucket: this.bucketName,\n        Key: key,\n      });\n\n      const response = await this.s3Client.send(command);\n      return {\n        size: response.ContentLength || 0,\n        contentType: response.ContentType || 'application/octet-stream',\n      };\n    } catch (error: any) {\n      this.logger.error(`Failed to get file metadata from S3: ${error.message}`, error.stack);\n      throw new InternalServerErrorException('Failed to retrieve file metadata');\n    }\n  }\n\n  /**\n   * Generates a unique S3 key for a file\n   * @param filename - The original filename\n   * @param category - The file category\n   * @returns string - The generated S3 key\n   */\n  private generateFileKey(filename: string, category: FileCategory): string {\n    const timestamp = Date.now();\n    const random = Math.round(Math.random() * 1e9);\n    const extension = filename.split('.').pop() || 'bin';\n    const sanitizedExtension = extension.replace(/[^a-zA-Z0-9]/g, '').toLowerCase();\n\n    return `${category}/${timestamp}-${random}.${sanitizedExtension}`;\n  }\n}\n"],"mappingsaA;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAbA,MAAAE,QAAA;AAAA;AAAA,CAAAF,cAAA,GAAAG,CAAA,QAAAC,OAAA;AAMA,MAAAC,WAAA;AAAA;AAAA,CAAAL,cAAA,GAAAG,CAAA,QAAAC,OAAA;AAOA,MAAAE,sBAAA;AAAA;AAAA,CAAAN,cAAA,GAAAG,CAAA,QAAAC,OAAA;AAEA,MAAAG,wBAAA;AAAA;AAAA,CAAAP,cAAA,GAAAG,CAAA,QAAAC,OAAA;AACA,MAAAI,uBAAA;AAAA;AAAA,CAAAR,cAAA,GAAAG,CAAA,QAAAC,OAAA;AACA,MAAAK,eAAA;AAAA;AAAA,CAAAT,cAAA,GAAAG,CAAA,QAAAC,OAAA;AASO,IAAMM,cAAc;AAAA;AAAA,CAAAV,cAAA,GAAAG,CAAA,QAAAQ,gBAAA,GAApB,MAAMD,cAAc;EAyCfE,oBAAA;EACAC,mBAAA;EAzCOC,QAAQ;EACRC,UAAU;EACVC,MAAM;EACNC,MAAM;EAAA;EAAA,CAAAjB,cAAA,GAAAG,CAAA,QAAG,IAAID,QAAA,CAAAgB,MAAM,CAACP,gBAAc,CAACQ,IAAI,CAAC;EAEzD;EACiBC,kBAAkB;EAAA;EAAA,CAAApB,cAAA,GAAAG,CAAA,QAAwB,CACzD;IAAEkB,QAAQ,EAAE,YAAY;IAAEC,OAAO,EAAEC,MAAM,CAACC,IAAI,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;EAAC,CAAE,EACpE;IACEH,QAAQ,EAAE,WAAW;IACrBC,OAAO,EAAEC,MAAM,CAACC,IAAI,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;GACtE,EACD;IAAEH,QAAQ,EAAE,YAAY;IAAEC,OAAO,EAAEC,MAAM,CAACC,IAAI,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;IAAEC,MAAM,EAAE;EAAC,CAAE;EAAE;EACvF;IAAEJ,QAAQ,EAAE,iBAAiB;IAAEC,OAAO,EAAEC,MAAM,CAACC,IAAI,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;EAAC,CAAE,CAAE;EAAA,CAClF;EAED;EACiBE,gBAAgB;EAAA;EAAA,CAAA1B,cAAA,GAAAG,CAAA,QAG7B;IACF,CAACM,eAAA,CAAAkB,YAAY,CAACC,cAAc,GAAG;MAC7BC,YAAY,EAAE,CAAC,GAAG,IAAI,GAAG,IAAI;MAAE;MAC/BC,gBAAgB,EAAE,CAAC,YAAY,EAAE,WAAW,EAAE,YAAY;KAC3D;IACD,CAACrB,eAAA,CAAAkB,YAAY,CAACI,aAAa,GAAG;MAC5BF,YAAY,EAAE,CAAC,GAAG,IAAI,GAAG,IAAI;MAAE;MAC/BC,gBAAgB,EAAE,CAAC,YAAY,EAAE,WAAW,EAAE,YAAY;KAC3D;IACD,CAACrB,eAAA,CAAAkB,YAAY,CAACK,eAAe,GAAG;MAC9BH,YAAY,EAAE,EAAE,GAAG,IAAI,GAAG,IAAI;MAAE;MAChCC,gBAAgB,EAAE,CAAC,iBAAiB;KACrC;IACD,CAACrB,eAAA,CAAAkB,YAAY,CAACM,eAAe,GAAG;MAC9BJ,YAAY,EAAE,EAAE,GAAG,IAAI,GAAG,IAAI;MAAE;MAChCC,gBAAgB,EAAE,CAAC,iBAAiB,EAAE,YAAY,EAAE,WAAW;;GAElE;EAEDI,YACUtB,oBAA0C,EAC1CC,mBAAwC;IAAA;IAAAb,cAAA,GAAAmC,CAAA;IAAAnC,cAAA,GAAAG,CAAA;IADxC,KAAAS,oBAAoB,GAApBA,oBAAoB;IAAsB;IAAAZ,cAAA,GAAAG,CAAA;IAC1C,KAAAU,mBAAmB,GAAnBA,mBAAmB;IAAqB;IAAAb,cAAA,GAAAG,CAAA;IAEhD,IAAI,CAACa,MAAM,GAAG,IAAI,CAACJ,oBAAoB,CAACwB,YAAY,EAAE;IAAC;IAAApC,cAAA,GAAAG,CAAA;IACvD,IAAI,CAACY,UAAU,GAAG,IAAI,CAACH,oBAAoB,CAACyB,YAAY,EAAE;IAAC;IAAArC,cAAA,GAAAG,CAAA;IAE3D,IAAI,CAACW,QAAQ,GAAG,IAAIT,WAAA,CAAAiC,QAAQ,CAAC;MAC3BtB,MAAM,EAAE,IAAI,CAACA,MAAM;MACnBuB,WAAW,EAAE;QACXC,WAAW,EAAE,IAAI,CAAC5B,oBAAoB,CAAC6B,iBAAiB,EAAE;QAC1DC,eAAe,EAAE,IAAI,CAAC9B,oBAAoB,CAAC+B,qBAAqB;;KAEnE,CAAC;EACJ;EAEA;;;;;;;EAOA,MAAMC,UAAUA,CACdC,IAAyB,EACzBC,QAAsB,EACtBC,OAAuB;IAAA;IAAA/C,cAAA,GAAAmC,CAAA;IAAAnC,cAAA,GAAAG,CAAA;IAEvB,IAAI;MACF;MACA,MAAM6C,QAAQ;MAAA;MAAA,CAAAhD,cAAA,GAAAG,CAAA,QAAG,IAAI,CAACuB,gBAAgB,CAACoB,QAAQ,CAAC;MAEhD;MACA,MAAMG,aAAa;MAAA;MAAA,CAAAjD,cAAA,GAAAG,CAAA,QAAkB;QACnC0B,YAAY;QAAE;QAAA,CAAA7B,cAAA,GAAAkD,CAAA,WAAAH,OAAO,EAAElB,YAAY;QAAA;QAAA,CAAA7B,cAAA,GAAAkD,CAAA,WAAIF,QAAQ,CAACnB,YAAY;QAC5DC,gBAAgB;QAAE;QAAA,CAAA9B,cAAA,GAAAkD,CAAA,WAAAH,OAAO,EAAEjB,gBAAgB;QAAA;QAAA,CAAA9B,cAAA,GAAAkD,CAAA,WAAIF,QAAQ,CAAClB,gBAAgB;QACxEqB,YAAY;QAAE;QAAA,CAAAnD,cAAA,GAAAkD,CAAA,WAAAH,OAAO,EAAEI,YAAY;QAAA;QAAA,CAAAnD,cAAA,GAAAkD,CAAA,WAAI,IAAI;QAC3CE,QAAQ,EAAEL,OAAO,EAAEK;OACpB;MAED;MAAA;MAAApD,cAAA,GAAAG,CAAA;MACA,MAAM,IAAI,CAACkD,YAAY,CAACR,IAAI,EAAE;QAC5BhB,YAAY,EAAEoB,aAAa,CAACpB,YAAa;QACzCC,gBAAgB,EAAEmB,aAAa,CAACnB,gBAAiB;QACjDwB,kBAAkB,EAAE;OACrB,CAAC;MAEF;MAAA;MAAAtD,cAAA,GAAAG,CAAA;MACA,IAAI8C,aAAa,CAACE,YAAY,EAAE;QAAA;QAAAnD,cAAA,GAAAkD,CAAA;QAAAlD,cAAA,GAAAG,CAAA;QAC9B,MAAM,IAAI,CAACU,mBAAmB,CAAC0C,QAAQ,CAACV,IAAI,CAACW,MAAM,EAAEX,IAAI,CAACY,YAAY,EAAEZ,IAAI,CAACa,QAAQ,CAAC;MACxF,CAAC;MAAA;MAAA;QAAA1D,cAAA,GAAAkD,CAAA;MAAA;MAED;MACA,MAAMS,GAAG;MAAA;MAAA,CAAA3D,cAAA,GAAAG,CAAA,QAAG,IAAI,CAACyD,eAAe,CAACf,IAAI,CAACY,YAAY,EAAEX,QAAQ,CAAC;MAE7D;MACA,MAAMe,OAAO;MAAA;MAAA,CAAA7D,cAAA,GAAAG,CAAA,QAAG,IAAIE,WAAA,CAAAyD,gBAAgB,CAAC;QACnCC,MAAM,EAAE,IAAI,CAAChD,UAAU;QACvBiD,GAAG,EAAEL,GAAG;QACRM,IAAI,EAAEpB,IAAI,CAACW,MAAM;QACjBU,WAAW,EAAErB,IAAI,CAACa,QAAQ;QAC1BS,QAAQ,EAAElB,aAAa,CAACG;OACzB,CAAC;MAAC;MAAApD,cAAA,GAAAG,CAAA;MAEH,MAAM,IAAI,CAACW,QAAQ,CAACsD,IAAI,CAACP,OAAO,CAAC;MAEjC,MAAMQ,GAAG;MAAA;MAAA,CAAArE,cAAA,GAAAG,CAAA,QAAG,WAAW,IAAI,CAACY,UAAU,OAAO,IAAI,CAACC,MAAM,kBAAkB2C,GAAG,EAAE;MAAC;MAAA3D,cAAA,GAAAG,CAAA;MAEhF,IAAI,CAACc,MAAM,CAACqD,GAAG,CAAC,qCAAqCX,GAAG,EAAE,CAAC;MAAC;MAAA3D,cAAA,GAAAG,CAAA;MAC5D,OAAO;QAAEwD,GAAG;QAAEU;MAAG,CAAE;IACrB,CAAC,CAAC,OAAOE,KAAU,EAAE;MAAA;MAAAvE,cAAA,GAAAG,CAAA;MACnB;MACA,IAAIoE,KAAK,YAAYrE,QAAA,CAAAsE,mBAAmB,EAAE;QAAA;QAAAxE,cAAA,GAAAkD,CAAA;QAAAlD,cAAA,GAAAG,CAAA;QACxC,MAAMoE,KAAK;MACb,CAAC;MAAA;MAAA;QAAAvE,cAAA,GAAAkD,CAAA;MAAA;MAAAlD,cAAA,GAAAG,CAAA;MAED,IAAI,CAACc,MAAM,CAACsD,KAAK,CAAC,gCAAgCA,KAAK,CAACE,OAAO,EAAE,EAAEF,KAAK,CAACG,KAAK,CAAC;MAAC;MAAA1E,cAAA,GAAAG,CAAA;MAChF,MAAM,IAAID,QAAA,CAAAyE,4BAA4B,CAAC,kCAAkC,CAAC;IAC5E;EACF;EAEA;;;;;;EAMA,MAAMtB,YAAYA,CAACR,IAAyB,EAAEE,OAA8B;IAAA;IAAA/C,cAAA,GAAAmC,CAAA;IAAAnC,cAAA,GAAAG,CAAA;IAC1E;IACA;IAAI;IAAA,CAAAH,cAAA,GAAAkD,CAAA,YAACL,IAAI;IAAA;IAAA,CAAA7C,cAAA,GAAAkD,CAAA,WAAI,CAACL,IAAI,CAACW,MAAM;IAAA;IAAA,CAAAxD,cAAA,GAAAkD,CAAA,WAAIL,IAAI,CAACW,MAAM,CAACoB,MAAM,KAAK,CAAC,GAAE;MAAA;MAAA5E,cAAA,GAAAkD,CAAA;MAAAlD,cAAA,GAAAG,CAAA;MACrD,MAAM,IAAID,QAAA,CAAAsE,mBAAmB,CAAC,mCAAmC,CAAC;IACpE,CAAC;IAAA;IAAA;MAAAxE,cAAA,GAAAkD,CAAA;IAAA;IAED;IAAAlD,cAAA,GAAAG,CAAA;IACA,IAAI0C,IAAI,CAACgC,IAAI,GAAG9B,OAAO,CAAClB,YAAY,EAAE;MAAA;MAAA7B,cAAA,GAAAkD,CAAA;MACpC,MAAM4B,SAAS;MAAA;MAAA,CAAA9E,cAAA,GAAAG,CAAA,QAAG,CAAC4C,OAAO,CAAClB,YAAY,IAAI,IAAI,GAAG,IAAI,CAAC,EAAEkD,OAAO,CAAC,CAAC,CAAC;MAAC;MAAA/E,cAAA,GAAAG,CAAA;MACpE,MAAM,IAAID,QAAA,CAAAsE,mBAAmB,CAAC,6CAA6CM,SAAS,KAAK,CAAC;IAC5F,CAAC;IAAA;IAAA;MAAA9E,cAAA,GAAAkD,CAAA;IAAA;IAED;IAAAlD,cAAA,GAAAG,CAAA;IACA,IAAI,CAAC4C,OAAO,CAACjB,gBAAgB,CAACkD,QAAQ,CAACnC,IAAI,CAACa,QAAQ,CAAC,EAAE;MAAA;MAAA1D,cAAA,GAAAkD,CAAA;MACrD,MAAM+B,YAAY;MAAA;MAAA,CAAAjF,cAAA,GAAAG,CAAA,QAAG4C,OAAO,CAACjB,gBAAgB,CAC1CoD,GAAG,CAAEC,IAAI,IAAK;QAAA;QAAAnF,cAAA,GAAAmC,CAAA;QAAAnC,cAAA,GAAAG,CAAA;QAAA,OAAAgF,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACC,WAAW,EAAE;MAAF,CAAE,CAAC,CAC/CC,IAAI,CAAC,IAAI,CAAC;MAAC;MAAAtF,cAAA,GAAAG,CAAA;MACd,MAAM,IAAID,QAAA,CAAAsE,mBAAmB,CAAC,2BAA2BS,YAAY,qBAAqB,CAAC;IAC7F,CAAC;IAAA;IAAA;MAAAjF,cAAA,GAAAkD,CAAA;IAAA;IAED;IAAAlD,cAAA,GAAAG,CAAA;IACA,IAAI4C,OAAO,CAACO,kBAAkB,EAAE;MAAA;MAAAtD,cAAA,GAAAkD,CAAA;MAC9B,MAAMqC,iBAAiB;MAAA;MAAA,CAAAvF,cAAA,GAAAG,CAAA,QAAG,IAAI,CAACmD,kBAAkB,CAACT,IAAI,CAACW,MAAM,EAAEX,IAAI,CAACa,QAAQ,CAAC;MAAC;MAAA1D,cAAA,GAAAG,CAAA;MAC9E,IAAI,CAACoF,iBAAiB,EAAE;QAAA;QAAAvF,cAAA,GAAAkD,CAAA;QAAAlD,cAAA,GAAAG,CAAA;QACtB,MAAM,IAAID,QAAA,CAAAsE,mBAAmB,CAAC,iDAAiD,CAAC;MAClF,CAAC;MAAA;MAAA;QAAAxE,cAAA,GAAAkD,CAAA;MAAA;IACH,CAAC;IAAA;IAAA;MAAAlD,cAAA,GAAAkD,CAAA;IAAA;IAAAlD,cAAA,GAAAG,CAAA;IAED,OAAO,IAAI;EACb;EAEA;;;;;;EAMQmD,kBAAkBA,CAACE,MAAc,EAAEnC,QAAgB;IAAA;IAAArB,cAAA,GAAAmC,CAAA;IACzD,MAAMb,OAAO;IAAA;IAAA,CAAAtB,cAAA,GAAAG,CAAA,QAAG,IAAI,CAACiB,kBAAkB,CAACoE,IAAI,CAAEC,CAAC,IAAK;MAAA;MAAAzF,cAAA,GAAAmC,CAAA;MAAAnC,cAAA,GAAAG,CAAA;MAAA,OAAAsF,CAAC,CAACpE,QAAQ,KAAKA,QAAQ;IAAR,CAAQ,CAAC;IAAC;IAAArB,cAAA,GAAAG,CAAA;IAE7E,IAAI,CAACmB,OAAO,EAAE;MAAA;MAAAtB,cAAA,GAAAkD,CAAA;MAAAlD,cAAA,GAAAG,CAAA;MACZ;MACA,IAAI,CAACc,MAAM,CAACyE,KAAK,CAAC,sCAAsCrE,QAAQ,EAAE,CAAC;MAAC;MAAArB,cAAA,GAAAG,CAAA;MACpE,OAAO,IAAI;IACb,CAAC;IAAA;IAAA;MAAAH,cAAA,GAAAkD,CAAA;IAAA;IAED,MAAMzB,MAAM;IAAA;IAAA,CAAAzB,cAAA,GAAAG,CAAA;IAAG;IAAA,CAAAH,cAAA,GAAAkD,CAAA,WAAA5B,OAAO,CAACG,MAAM;IAAA;IAAA,CAAAzB,cAAA,GAAAkD,CAAA,WAAI,CAAC;IAClC,MAAMyC,SAAS;IAAA;IAAA,CAAA3F,cAAA,GAAAG,CAAA,QAAGqD,MAAM,CAACoC,KAAK,CAACnE,MAAM,EAAEA,MAAM,GAAGH,OAAO,CAACA,OAAO,CAACsD,MAAM,CAAC;IAEvE;IAAA;IAAA5E,cAAA,GAAAG,CAAA;IACA,IAAIkB,QAAQ,KAAK,YAAY,EAAE;MAAA;MAAArB,cAAA,GAAAkD,CAAA;MAC7B,MAAM2C,SAAS;MAAA;MAAA,CAAA7F,cAAA,GAAAG,CAAA,QAAGwF,SAAS,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAACE,MAAM,CAACxE,OAAO,CAACA,OAAO,CAAC;MAC/D,MAAMyE,UAAU;MAAA;MAAA,CAAA/F,cAAA,GAAAG,CAAA,QAAGqD,MAAM,CAACoC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAACI,QAAQ,CAAC,OAAO,CAAC;MAAC;MAAAhG,cAAA,GAAAG,CAAA;MACzD,OAAO,2BAAAH,cAAA,GAAAkD,CAAA,WAAA2C,SAAS;MAAA;MAAA,CAAA7F,cAAA,GAAAkD,CAAA,WAAI6C,UAAU,KAAK,MAAM;IAC3C,CAAC;IAAA;IAAA;MAAA/F,cAAA,GAAAkD,CAAA;IAAA;IAAAlD,cAAA,GAAAG,CAAA;IAED,OAAOwF,SAAS,CAACG,MAAM,CAACxE,OAAO,CAACA,OAAO,CAAC;EAC1C;EAEA;;;;EAIA,MAAM2E,UAAUA,CAACtC,GAAW;IAAA;IAAA3D,cAAA,GAAAmC,CAAA;IAAAnC,cAAA,GAAAG,CAAA;IAC1B,IAAI;MACF,MAAM0D,OAAO;MAAA;MAAA,CAAA7D,cAAA,GAAAG,CAAA,QAAG,IAAIE,WAAA,CAAA6F,mBAAmB,CAAC;QACtCnC,MAAM,EAAE,IAAI,CAAChD,UAAU;QACvBiD,GAAG,EAAEL;OACN,CAAC;MAAC;MAAA3D,cAAA,GAAAG,CAAA;MAEH,MAAM,IAAI,CAACW,QAAQ,CAACsD,IAAI,CAACP,OAAO,CAAC;MAAC;MAAA7D,cAAA,GAAAG,CAAA;MAClC,IAAI,CAACc,MAAM,CAACqD,GAAG,CAAC,sCAAsCX,GAAG,EAAE,CAAC;IAC9D,CAAC,CAAC,OAAOY,KAAU,EAAE;MAAA;MAAAvE,cAAA,GAAAG,CAAA;MACnB,IAAI,CAACc,MAAM,CAACsD,KAAK,CAAC,kCAAkCA,KAAK,CAACE,OAAO,EAAE,EAAEF,KAAK,CAACG,KAAK,CAAC;MACjF;IACF;EACF;EAEA;;;;;;EAMA,MAAMyB,YAAYA,CAACxC,GAAW,EAAEyC,SAAS;EAAA;EAAA,CAAApG,cAAA,GAAAkD,CAAA,WAAG,IAAI;IAAA;IAAAlD,cAAA,GAAAmC,CAAA;IAAAnC,cAAA,GAAAG,CAAA;IAC9C,IAAI;MACF,MAAM0D,OAAO;MAAA;MAAA,CAAA7D,cAAA,GAAAG,CAAA,QAAG,IAAIE,WAAA,CAAAgG,gBAAgB,CAAC;QACnCtC,MAAM,EAAE,IAAI,CAAChD,UAAU;QACvBiD,GAAG,EAAEL;OACN,CAAC;MAAC;MAAA3D,cAAA,GAAAG,CAAA;MAEH,OAAO,MAAM,IAAAG,sBAAA,CAAA6F,YAAY,EAAC,IAAI,CAACrF,QAAQ,EAAE+C,OAAO,EAAE;QAAEuC;MAAS,CAAE,CAAC;IAClE,CAAC,CAAC,OAAO7B,KAAU,EAAE;MAAA;MAAAvE,cAAA,GAAAG,CAAA;MACnB,IAAI,CAACc,MAAM,CAACsD,KAAK,CAAC,kCAAkCA,KAAK,CAACE,OAAO,EAAE,EAAEF,KAAK,CAACG,KAAK,CAAC;MAAC;MAAA1E,cAAA,GAAAG,CAAA;MAClF,MAAM,IAAID,QAAA,CAAAyE,4BAA4B,CAAC,iCAAiC,CAAC;IAC3E;EACF;EAEA;;;;;EAKA,MAAM2B,OAAOA,CAAC3C,GAAW;IAAA;IAAA3D,cAAA,GAAAmC,CAAA;IAAAnC,cAAA,GAAAG,CAAA;IACvB,IAAI;MACF,MAAM0D,OAAO;MAAA;MAAA,CAAA7D,cAAA,GAAAG,CAAA,QAAG,IAAIE,WAAA,CAAAgG,gBAAgB,CAAC;QACnCtC,MAAM,EAAE,IAAI,CAAChD,UAAU;QACvBiD,GAAG,EAAEL;OACN,CAAC;MAEF,MAAM4C,QAAQ;MAAA;MAAA,CAAAvG,cAAA,GAAAG,CAAA,QAAG,MAAM,IAAI,CAACW,QAAQ,CAACsD,IAAI,CAACP,OAAO,CAAC;MAAC;MAAA7D,cAAA,GAAAG,CAAA;MACnD,OAAOoG,QAAQ,CAACtC,IAAgB;IAClC,CAAC,CAAC,OAAOM,KAAU,EAAE;MAAA;MAAAvE,cAAA,GAAAG,CAAA;MACnB,IAAI,CAACc,MAAM,CAACsD,KAAK,CAAC,+BAA+BA,KAAK,CAACE,OAAO,EAAE,EAAEF,KAAK,CAACG,KAAK,CAAC;MAAC;MAAA1E,cAAA,GAAAG,CAAA;MAC/E,MAAM,IAAID,QAAA,CAAAyE,4BAA4B,CAAC,sCAAsC,CAAC;IAChF;EACF;EAEA;;;;;EAKA,MAAM6B,eAAeA,CAAC7C,GAAW;IAAA;IAAA3D,cAAA,GAAAmC,CAAA;IAAAnC,cAAA,GAAAG,CAAA;IAC/B,IAAI;MACF,MAAM0D,OAAO;MAAA;MAAA,CAAA7D,cAAA,GAAAG,CAAA,QAAG,IAAIE,WAAA,CAAAoG,iBAAiB,CAAC;QACpC1C,MAAM,EAAE,IAAI,CAAChD,UAAU;QACvBiD,GAAG,EAAEL;OACN,CAAC;MAEF,MAAM4C,QAAQ;MAAA;MAAA,CAAAvG,cAAA,GAAAG,CAAA,QAAG,MAAM,IAAI,CAACW,QAAQ,CAACsD,IAAI,CAACP,OAAO,CAAC;MAAC;MAAA7D,cAAA,GAAAG,CAAA;MACnD,OAAO;QACL0E,IAAI;QAAE;QAAA,CAAA7E,cAAA,GAAAkD,CAAA,WAAAqD,QAAQ,CAACG,aAAa;QAAA;QAAA,CAAA1G,cAAA,GAAAkD,CAAA,WAAI,CAAC;QACjCyD,WAAW;QAAE;QAAA,CAAA3G,cAAA,GAAAkD,CAAA,WAAAqD,QAAQ,CAACrC,WAAW;QAAA;QAAA,CAAAlE,cAAA,GAAAkD,CAAA,WAAI,0BAA0B;OAChE;IACH,CAAC,CAAC,OAAOqB,KAAU,EAAE;MAAA;MAAAvE,cAAA,GAAAG,CAAA;MACnB,IAAI,CAACc,MAAM,CAACsD,KAAK,CAAC,wCAAwCA,KAAK,CAACE,OAAO,EAAE,EAAEF,KAAK,CAACG,KAAK,CAAC;MAAC;MAAA1E,cAAA,GAAAG,CAAA;MACxF,MAAM,IAAID,QAAA,CAAAyE,4BAA4B,CAAC,kCAAkC,CAAC;IAC5E;EACF;EAEA;;;;;;EAMQf,eAAeA,CAACgD,QAAgB,EAAE9D,QAAsB;IAAA;IAAA9C,cAAA,GAAAmC,CAAA;IAC9D,MAAM0E,SAAS;IAAA;IAAA,CAAA7G,cAAA,GAAAG,CAAA,QAAG2G,IAAI,CAACC,GAAG,EAAE;IAC5B,MAAMC,MAAM;IAAA;IAAA,CAAAhH,cAAA,GAAAG,CAAA,QAAG8G,IAAI,CAACC,KAAK,CAACD,IAAI,CAACD,MAAM,EAAE,GAAG,GAAG,CAAC;IAC9C,MAAMG,SAAS;IAAA;IAAA,CAAAnH,cAAA,GAAAG,CAAA;IAAG;IAAA,CAAAH,cAAA,GAAAkD,CAAA,WAAA0D,QAAQ,CAACxB,KAAK,CAAC,GAAG,CAAC,CAACgC,GAAG,EAAE;IAAA;IAAA,CAAApH,cAAA,GAAAkD,CAAA,WAAI,KAAK;IACpD,MAAMmE,kBAAkB;IAAA;IAAA,CAAArH,cAAA,GAAAG,CAAA,QAAGgH,SAAS,CAACG,OAAO,CAAC,eAAe,EAAE,EAAE,CAAC,CAACC,WAAW,EAAE;IAAC;IAAAvH,cAAA,GAAAG,CAAA;IAEhF,OAAO,GAAG2C,QAAQ,IAAI+D,SAAS,IAAIG,MAAM,IAAIK,kBAAkB,EAAE;EACnE;CACD;AAAA;AAAArH,cAAA,GAAAG,CAAA;AA1RYqH,OAAA,CAAA9G,cAAA,GAAAA,cAAA;AAAc;AAAAV,cAAA,GAAAG,CAAA;yBAAdO,cAAc,GAAAC,gBAAA,GAAA8G,UAAA,EAD1B,IAAAvH,QAAA,CAAAwH,UAAU,GAAE,E,iCA0CqBnH,wBAAA,CAAAoH,oBAAoB,EACrBnH,uBAAA,CAAAoH,mBAAmB,G,EA1CvClH,cAAc,CA0R1B","ignoreList":[]}