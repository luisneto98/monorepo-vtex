{"file":"/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/legal-pages/legal-pages.service.ts","mappings":"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","names":[],"sources":["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/legal-pages/legal-pages.service.ts"],"sourcesContent":["import {\n  Injectable,\n  NotFoundException,\n  BadRequestException,\n  InternalServerErrorException,\n} from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { LegalPage, LegalPageDocument, FileMetadata } from './schemas/legal-page.schema';\nimport { CreateLegalPageDto } from './dto/create-legal-page.dto';\nimport { UpdateLegalPageDto } from './dto/update-legal-page.dto';\nimport { SupportedLanguage } from './dto/upload-file.dto';\nimport { StorageService } from '../storage/services/storage.service';\nimport { FileCategory } from '../storage/types/storage.types';\nimport { Readable } from 'stream';\n\n@Injectable()\nexport class LegalPagesService {\n  constructor(\n    @InjectModel(LegalPage.name)\n    private legalPageModel: Model<LegalPageDocument>,\n    private storageService: StorageService,\n  ) {}\n\n  async create(createLegalPageDto: CreateLegalPageDto): Promise<LegalPage> {\n    try {\n      const existingPage = await this.legalPageModel.findOne({ slug: createLegalPageDto.slug });\n      if (existingPage) {\n        throw new BadRequestException('Legal page with this slug already exists');\n      }\n\n      const createdLegalPage = new this.legalPageModel(createLegalPageDto);\n      return await createdLegalPage.save();\n    } catch (error) {\n      if (error instanceof BadRequestException) {\n        throw error;\n      }\n      throw new InternalServerErrorException('Failed to create legal page');\n    }\n  }\n\n  async findAll(isActive?: boolean): Promise<LegalPage[]> {\n    const query = isActive !== undefined ? { isActive } : {};\n    return this.legalPageModel.find(query).exec();\n  }\n\n  async findOne(id: string): Promise<LegalPage> {\n    const legalPage = await this.legalPageModel.findById(id).exec();\n    if (!legalPage) {\n      throw new NotFoundException(`Legal page with ID ${id} not found`);\n    }\n    return legalPage;\n  }\n\n  async findBySlug(slug: string): Promise<LegalPage> {\n    const legalPage = await this.legalPageModel.findOne({ slug }).exec();\n    if (!legalPage) {\n      throw new NotFoundException(`Legal page with slug ${slug} not found`);\n    }\n    return legalPage;\n  }\n\n  async update(\n    id: string,\n    updateLegalPageDto: UpdateLegalPageDto,\n    userId: string,\n  ): Promise<LegalPage> {\n    const updatedData = {\n      ...updateLegalPageDto,\n      lastModifiedBy: userId,\n    };\n\n    const legalPage = await this.legalPageModel\n      .findByIdAndUpdate(id, updatedData, { new: true })\n      .exec();\n\n    if (!legalPage) {\n      throw new NotFoundException(`Legal page with ID ${id} not found`);\n    }\n    return legalPage;\n  }\n\n  async uploadFile(\n    id: string,\n    file: Express.Multer.File,\n    language: SupportedLanguage,\n    userId: string,\n  ): Promise<LegalPage> {\n    const legalPage = await this.legalPageModel.findById(id).exec();\n    if (!legalPage) {\n      throw new NotFoundException(`Legal page with ID ${id} not found`);\n    }\n\n    // Delete old file from S3 if exists\n    const oldFile = legalPage.files?.[language];\n    if (oldFile?.filename) {\n      await this.storageService.deleteFile(oldFile.filename);\n    }\n\n    // Upload new file using StorageService (includes virus scanning and validation)\n    const uploadResult = await this.storageService.uploadFile(file, FileCategory.LEGAL_DOCUMENTS, {\n      metadata: {\n        legalPageId: id,\n        language: language,\n        uploadedBy: userId,\n      },\n    });\n\n    const fileMetadata: FileMetadata = {\n      filename: uploadResult.key,\n      originalName: file.originalname,\n      size: file.size,\n      uploadedAt: new Date(),\n      uploadedBy: userId,\n    };\n\n    if (!legalPage.files) {\n      legalPage.files = {};\n    }\n    legalPage.files[language] = fileMetadata;\n    legalPage.lastModifiedBy = userId;\n\n    return await legalPage.save();\n  }\n\n  async deleteFile(id: string, language: SupportedLanguage, userId: string): Promise<LegalPage> {\n    const legalPage = await this.legalPageModel.findById(id).exec();\n    if (!legalPage) {\n      throw new NotFoundException(`Legal page with ID ${id} not found`);\n    }\n\n    const file = legalPage.files?.[language];\n    if (!file) {\n      throw new NotFoundException(`No file found for language ${language}`);\n    }\n\n    // Delete file from S3\n    await this.storageService.deleteFile(file.filename);\n\n    delete legalPage.files[language];\n    legalPage.lastModifiedBy = userId;\n\n    return await legalPage.save();\n  }\n\n  async remove(id: string): Promise<void> {\n    const legalPage = await this.findOne(id);\n\n    // Delete all files from S3\n    if (legalPage.files) {\n      const deletePromises = Object.values(legalPage.files)\n        .filter((file) => file?.filename)\n        .map((file) => this.storageService.deleteFile(file.filename));\n\n      await Promise.all(deletePromises);\n    }\n\n    await this.legalPageModel.findByIdAndDelete(id).exec();\n  }\n\n  async getPublicPages(): Promise<any[]> {\n    const pages = await this.legalPageModel\n      .find({ isActive: true })\n      .select('slug type title files')\n      .exec();\n\n    return pages.map((page) => ({\n      slug: page.slug,\n      type: page.type,\n      title: page.title,\n      availableLanguages: page.files\n        ? Object.keys(page.files).filter((lang) => page.files[lang])\n        : [],\n    }));\n  }\n\n  async getFileStream(\n    slug: string,\n    language: SupportedLanguage,\n  ): Promise<{ stream: Readable; metadata: FileMetadata }> {\n    const legalPage = await this.findBySlug(slug);\n\n    if (!legalPage.isActive) {\n      throw new NotFoundException('This legal page is not available');\n    }\n\n    const file = legalPage.files?.[language];\n    if (!file) {\n      throw new NotFoundException(`No file available for language ${language}`);\n    }\n\n    // Get file stream from S3\n    const stream = await this.storageService.getFile(file.filename);\n    return { stream, metadata: file };\n  }\n\n  async getSignedDownloadUrl(\n    slug: string,\n    language: SupportedLanguage,\n  ): Promise<{ url: string; metadata: FileMetadata }> {\n    const legalPage = await this.findBySlug(slug);\n\n    if (!legalPage.isActive) {\n      throw new NotFoundException('This legal page is not available');\n    }\n\n    const file = legalPage.files?.[language];\n    if (!file) {\n      throw new NotFoundException(`No file available for language ${language}`);\n    }\n\n    // Generate signed URL for direct S3 access\n    const url = await this.storageService.getSignedUrl(file.filename);\n    return { url, metadata: file };\n  }\n}\n"],"version":3}