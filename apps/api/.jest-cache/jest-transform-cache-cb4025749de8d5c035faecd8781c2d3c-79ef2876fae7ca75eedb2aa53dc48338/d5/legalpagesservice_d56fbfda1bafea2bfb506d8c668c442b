2e26c2f7df2a8a5259c5166df51e9079
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LegalPagesService = void 0;
const common_1 = require("@nestjs/common");
const mongoose_1 = require("@nestjs/mongoose");
const mongoose_2 = require("mongoose");
const legal_page_schema_1 = require("./schemas/legal-page.schema");
const storage_service_1 = require("../storage/services/storage.service");
const storage_types_1 = require("../storage/types/storage.types");
let LegalPagesService = class LegalPagesService {
    legalPageModel;
    storageService;
    constructor(legalPageModel, storageService) {
        this.legalPageModel = legalPageModel;
        this.storageService = storageService;
    }
    async create(createLegalPageDto) {
        try {
            const existingPage = await this.legalPageModel.findOne({ slug: createLegalPageDto.slug });
            if (existingPage) {
                throw new common_1.BadRequestException('Legal page with this slug already exists');
            }
            const createdLegalPage = new this.legalPageModel(createLegalPageDto);
            return await createdLegalPage.save();
        }
        catch (error) {
            if (error instanceof common_1.BadRequestException) {
                throw error;
            }
            throw new common_1.InternalServerErrorException('Failed to create legal page');
        }
    }
    async findAll(isActive) {
        const query = isActive !== undefined ? { isActive } : {};
        return this.legalPageModel.find(query).exec();
    }
    async findOne(id) {
        const legalPage = await this.legalPageModel.findById(id).exec();
        if (!legalPage) {
            throw new common_1.NotFoundException(`Legal page with ID ${id} not found`);
        }
        return legalPage;
    }
    async findBySlug(slug) {
        const legalPage = await this.legalPageModel.findOne({ slug }).exec();
        if (!legalPage) {
            throw new common_1.NotFoundException(`Legal page with slug ${slug} not found`);
        }
        return legalPage;
    }
    async update(id, updateLegalPageDto, userId) {
        const updatedData = {
            ...updateLegalPageDto,
            lastModifiedBy: userId,
        };
        const legalPage = await this.legalPageModel
            .findByIdAndUpdate(id, updatedData, { new: true })
            .exec();
        if (!legalPage) {
            throw new common_1.NotFoundException(`Legal page with ID ${id} not found`);
        }
        return legalPage;
    }
    async uploadFile(id, file, language, userId) {
        const legalPage = await this.legalPageModel.findById(id).exec();
        if (!legalPage) {
            throw new common_1.NotFoundException(`Legal page with ID ${id} not found`);
        }
        // Delete old file from S3 if exists
        const oldFile = legalPage.files?.[language];
        if (oldFile?.filename) {
            await this.storageService.deleteFile(oldFile.filename);
        }
        // Upload new file using StorageService (includes virus scanning and validation)
        const uploadResult = await this.storageService.uploadFile(file, storage_types_1.FileCategory.LEGAL_DOCUMENTS, {
            metadata: {
                legalPageId: id,
                language: language,
                uploadedBy: userId,
            },
        });
        const fileMetadata = {
            filename: uploadResult.key,
            originalName: file.originalname,
            size: file.size,
            uploadedAt: new Date(),
            uploadedBy: userId,
        };
        if (!legalPage.files) {
            legalPage.files = {};
        }
        legalPage.files[language] = fileMetadata;
        legalPage.lastModifiedBy = userId;
        return await legalPage.save();
    }
    async deleteFile(id, language, userId) {
        const legalPage = await this.legalPageModel.findById(id).exec();
        if (!legalPage) {
            throw new common_1.NotFoundException(`Legal page with ID ${id} not found`);
        }
        const file = legalPage.files?.[language];
        if (!file) {
            throw new common_1.NotFoundException(`No file found for language ${language}`);
        }
        // Delete file from S3
        await this.storageService.deleteFile(file.filename);
        delete legalPage.files[language];
        legalPage.lastModifiedBy = userId;
        return await legalPage.save();
    }
    async remove(id) {
        const legalPage = await this.findOne(id);
        // Delete all files from S3
        if (legalPage.files) {
            const deletePromises = Object.values(legalPage.files)
                .filter((file) => file?.filename)
                .map((file) => this.storageService.deleteFile(file.filename));
            await Promise.all(deletePromises);
        }
        await this.legalPageModel.findByIdAndDelete(id).exec();
    }
    async getPublicPages() {
        const pages = await this.legalPageModel
            .find({ isActive: true })
            .select('slug type title files')
            .exec();
        return pages.map((page) => ({
            slug: page.slug,
            type: page.type,
            title: page.title,
            availableLanguages: page.files
                ? Object.keys(page.files).filter((lang) => page.files[lang])
                : [],
        }));
    }
    async getFileStream(slug, language) {
        const legalPage = await this.findBySlug(slug);
        if (!legalPage.isActive) {
            throw new common_1.NotFoundException('This legal page is not available');
        }
        const file = legalPage.files?.[language];
        if (!file) {
            throw new common_1.NotFoundException(`No file available for language ${language}`);
        }
        // Get file stream from S3
        const stream = await this.storageService.getFile(file.filename);
        return { stream, metadata: file };
    }
    async getSignedDownloadUrl(slug, language) {
        const legalPage = await this.findBySlug(slug);
        if (!legalPage.isActive) {
            throw new common_1.NotFoundException('This legal page is not available');
        }
        const file = legalPage.files?.[language];
        if (!file) {
            throw new common_1.NotFoundException(`No file available for language ${language}`);
        }
        // Generate signed URL for direct S3 access
        const url = await this.storageService.getSignedUrl(file.filename);
        return { url, metadata: file };
    }
};
exports.LegalPagesService = LegalPagesService;
exports.LegalPagesService = LegalPagesService = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, mongoose_1.InjectModel)(legal_page_schema_1.LegalPage.name)),
    __metadata("design:paramtypes", [mongoose_2.Model,
        storage_service_1.StorageService])
], LegalPagesService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,