{"file":"/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/common/utils/encryption.util.ts","mappings":"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","names":[],"sources":["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/common/utils/encryption.util.ts"],"sourcesContent":["import { createCipheriv, createDecipheriv, randomBytes, scryptSync } from 'crypto';\n\n/**\n * Encryption utility for sensitive data like device tokens\n * Uses AES-256-GCM encryption\n */\nexport class EncryptionUtil {\n  private static readonly ALGORITHM = 'aes-256-gcm';\n  private static readonly IV_LENGTH = 16;\n  private static readonly KEY_LENGTH = 32;\n\n  /**\n   * Get encryption key from environment variable or generate a default one\n   * In production, this MUST be set via environment variable\n   */\n  private static getEncryptionKey(): Buffer {\n    const key = process.env['ENCRYPTION_KEY'] || 'default-key-change-in-production';\n\n    // Derive a proper 32-byte key using scrypt\n    const salt = Buffer.from('vtexday26-salt'); // Fixed salt for consistency\n    return scryptSync(key, salt, this.KEY_LENGTH);\n  }\n\n  /**\n   * Encrypts a string value\n   * @param plaintext - The text to encrypt\n   * @returns Encrypted value in format: iv:authTag:encryptedData (all base64 encoded)\n   */\n  static encrypt(plaintext: string): string {\n    if (!plaintext) {\n      return '';\n    }\n\n    const key = this.getEncryptionKey();\n    const iv = randomBytes(this.IV_LENGTH);\n\n    const cipher = createCipheriv(this.ALGORITHM, key, iv);\n\n    let encrypted = cipher.update(plaintext, 'utf8', 'base64');\n    encrypted += cipher.final('base64');\n\n    const authTag = cipher.getAuthTag();\n\n    // Format: iv:authTag:encryptedData\n    return `${iv.toString('base64')}:${authTag.toString('base64')}:${encrypted}`;\n  }\n\n  /**\n   * Decrypts an encrypted string value\n   * @param encryptedData - The encrypted value in format: iv:authTag:encryptedData\n   * @returns Decrypted plaintext\n   */\n  static decrypt(encryptedData: string): string {\n    if (!encryptedData) {\n      return '';\n    }\n\n    try {\n      const parts = encryptedData.split(':');\n      if (parts.length !== 3) {\n        throw new Error('Invalid encrypted data format');\n      }\n\n      const [ivBase64, authTagBase64, encrypted] = parts;\n\n      const key = this.getEncryptionKey();\n      const iv = Buffer.from(ivBase64, 'base64');\n      const authTag = Buffer.from(authTagBase64, 'base64');\n\n      const decipher = createDecipheriv(this.ALGORITHM, key, iv);\n      decipher.setAuthTag(authTag);\n\n      let decrypted = decipher.update(encrypted, 'base64', 'utf8');\n      decrypted += decipher.final('utf8');\n\n      return decrypted;\n    } catch (error: any) {\n      throw new Error(`Decryption failed: ${error?.message || 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Encrypts device token for storage\n   * @param token - Device token to encrypt\n   * @returns Encrypted token\n   */\n  static encryptDeviceToken(token: string): string {\n    return this.encrypt(token);\n  }\n\n  /**\n   * Decrypts device token for use\n   * @param encryptedToken - Encrypted device token\n   * @returns Decrypted token\n   */\n  static decryptDeviceToken(encryptedToken: string): string {\n    return this.decrypt(encryptedToken);\n  }\n}\n"],"version":3}