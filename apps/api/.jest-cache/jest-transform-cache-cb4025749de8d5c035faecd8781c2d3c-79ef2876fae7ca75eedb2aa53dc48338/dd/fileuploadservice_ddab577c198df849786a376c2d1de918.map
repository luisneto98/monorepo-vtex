{"version":3,"names":["cov_15dtyqm269","actualCoverage","common_1","s","require","s3_config_1","sanitization_util_1","storage_service_1","storage_types_1","FileUploadService","storageService","constructor","f","uploadFile","file","materialType","uploadedBy","validateFile","fileExtension","originalname","split","pop","toLowerCase","uploadResult","FileCategory","PRESS_MATERIALS","metadata","originalName","SanitizationUtil","sanitizeFilePath","size","format","b","fileUrl","url","error","console","BadRequestException","deleteFile","fileKey","extractKeyFromUrl","generateSignedUrl","expiresIn","S3_CONFIG","URL_EXPIRY","getSignedUrl","sanitizedFilename","allowedFormats","ALLOWED_FORMATS","includes","join","maxSize","MAX_FILE_SIZE","video","default","sanitizedUrl","urlParts","length","pathParts","key","slice","exports","__decorate","Injectable","StorageService"],"sources":["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/press-materials/services/file-upload.service.ts"],"sourcesContent":["import { Injectable, BadRequestException } from '@nestjs/common';\nimport { S3_CONFIG } from '../../../config/s3.config';\nimport { SanitizationUtil } from '../../../common/utils/sanitization.util';\nimport { FileMetadata, FileUploadResponse, PressMaterialType } from '@vtexday26/shared';\nimport { StorageService } from '../../storage/services/storage.service';\nimport { FileCategory } from '../../storage/types/storage.types';\n\n@Injectable()\nexport class FileUploadService {\n  constructor(private storageService: StorageService) {}\n\n  async uploadFile(\n    file: Express.Multer.File,\n    materialType: PressMaterialType,\n    uploadedBy: string,\n  ): Promise<FileUploadResponse> {\n    this.validateFile(file, materialType);\n\n    const fileExtension = file.originalname.split('.').pop()?.toLowerCase();\n\n    try {\n      // Use StorageService for upload (includes validation and virus scanning)\n      const uploadResult = await this.storageService.uploadFile(\n        file,\n        FileCategory.PRESS_MATERIALS,\n        {\n          metadata: {\n            uploadedBy,\n            originalName: SanitizationUtil.sanitizeFilePath(file.originalname),\n            materialType,\n          },\n        },\n      );\n\n      const metadata: FileMetadata = {\n        size: file.size,\n        format: fileExtension || '',\n      };\n\n      return {\n        fileUrl: uploadResult.url,\n        metadata,\n      };\n    } catch (error) {\n      console.error('S3 upload error:', error);\n      throw new BadRequestException('Failed to upload file to S3');\n    }\n  }\n\n  async deleteFile(fileUrl: string): Promise<void> {\n    try {\n      const fileKey = this.extractKeyFromUrl(fileUrl);\n      await this.storageService.deleteFile(fileKey);\n    } catch (error) {\n      console.error('S3 delete error:', error);\n      throw new BadRequestException('Failed to delete file from S3');\n    }\n  }\n\n  async generateSignedUrl(fileUrl: string, expiresIn = S3_CONFIG.URL_EXPIRY): Promise<string> {\n    try {\n      const fileKey = this.extractKeyFromUrl(fileUrl);\n      return await this.storageService.getSignedUrl(fileKey, expiresIn);\n    } catch (error) {\n      console.error('S3 signed URL error:', error);\n      throw new BadRequestException('Failed to generate signed URL');\n    }\n  }\n\n  private validateFile(file: Express.Multer.File, materialType: PressMaterialType): void {\n    if (!file) {\n      throw new BadRequestException('No file provided');\n    }\n\n    // Sanitize filename to prevent path traversal\n    const sanitizedFilename = SanitizationUtil.sanitizeFilePath(file.originalname);\n    const fileExtension = sanitizedFilename.split('.').pop()?.toLowerCase();\n    const allowedFormats = S3_CONFIG.ALLOWED_FORMATS[materialType];\n\n    if (!fileExtension || !allowedFormats.includes(fileExtension)) {\n      throw new BadRequestException(\n        `Invalid file format for ${materialType}. Allowed formats: ${allowedFormats.join(', ')}`,\n      );\n    }\n\n    const maxSize =\n      materialType === 'video' ? S3_CONFIG.MAX_FILE_SIZE.video : S3_CONFIG.MAX_FILE_SIZE.default;\n\n    if (file.size > maxSize) {\n      throw new BadRequestException(\n        `File size exceeds maximum allowed size of ${maxSize / (1024 * 1024)}MB`,\n      );\n    }\n  }\n\n  private extractKeyFromUrl(fileUrl: string): string {\n    // Sanitize file URL to prevent path traversal\n    const sanitizedUrl = SanitizationUtil.sanitizeFilePath(fileUrl);\n\n    const urlParts = sanitizedUrl.split('.amazonaws.com/');\n    if (urlParts.length !== 2) {\n      const pathParts = sanitizedUrl.split('/');\n      const key = pathParts.slice(3).join('/');\n      // Additional validation to ensure key doesn't contain path traversal\n      return SanitizationUtil.sanitizeFilePath(key);\n    }\n    return SanitizationUtil.sanitizeFilePath(urlParts[1]);\n  }\n}\n"],"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","ignoreList":[]}