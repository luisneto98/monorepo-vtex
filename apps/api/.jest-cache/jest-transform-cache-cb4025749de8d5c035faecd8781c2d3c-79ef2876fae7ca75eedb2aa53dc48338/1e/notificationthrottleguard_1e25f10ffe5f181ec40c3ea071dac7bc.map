{"file":"/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/common/guards/notification-throttle.guard.ts","mappings":";;;;;;;;;;;;AAAA,2CAMwB;AACxB,uCAAyC;AACzC,mGAGuD;AAQhD,IAAM,yBAAyB,GAA/B,MAAM,yBAAyB;IAGP;IAFZ,aAAa,GAAG,IAAI,GAAG,EAA0B,CAAC;IAEnE,YAA6B,SAAoB;QAApB,cAAS,GAAT,SAAS,CAAW;QAC/C,2CAA2C;QAC3C,WAAW,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,qBAAqB,EAAE,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;IACjE,CAAC;IAED,KAAK,CAAC,WAAW,CAAC,OAAyB;QACzC,MAAM,eAAe,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CACxC,2DAAyB,EACzB,OAAO,CAAC,UAAU,EAAE,CACrB,CAAC;QAEF,IAAI,CAAC,eAAe,EAAE,CAAC;YACrB,sDAAsD;YACtD,OAAO,IAAI,CAAC;QACd,CAAC;QAED,MAAM,OAAO,GAAG,OAAO,CAAC,YAAY,EAAE,CAAC,UAAU,EAAE,CAAC;QACpD,MAAM,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,EAAE,MAAM,CAAC;QAEvC,IAAI,CAAC,MAAM,EAAE,CAAC;YACZ,MAAM,IAAI,sBAAa,CAAC,wBAAwB,EAAE,mBAAU,CAAC,YAAY,CAAC,CAAC;QAC7E,CAAC;QAED,MAAM,GAAG,GAAG,yBAAyB,MAAM,EAAE,CAAC;QAC9C,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,eAAe,CAAC;QACvC,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAEvB,IAAI,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAEzC,iCAAiC;QACjC,IAAI,CAAC,MAAM,IAAI,GAAG,GAAG,MAAM,CAAC,SAAS,EAAE,CAAC;YACtC,MAAM,GAAG;gBACP,KAAK,EAAE,CAAC;gBACR,SAAS,EAAE,GAAG,GAAG,GAAG;aACrB,CAAC;YACF,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;QACtC,CAAC;QAED,0BAA0B;QAC1B,IAAI,MAAM,CAAC,KAAK,IAAI,KAAK,EAAE,CAAC;YAC1B,MAAM,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,SAAS,GAAG,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC;YACjE,MAAM,IAAI,sBAAa,CACrB,kDAAkD,aAAa,WAAW,EAC1E,mBAAU,CAAC,iBAAiB,CAC7B,CAAC;QACJ,CAAC;QAED,kBAAkB;QAClB,MAAM,CAAC,KAAK,EAAE,CAAC;QACf,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;QAEpC,OAAO,IAAI,CAAC;IACd,CAAC;IAEO,qBAAqB;QAC3B,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QACvB,KAAK,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,IAAI,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,EAAE,CAAC;YACzD,IAAI,GAAG,GAAG,MAAM,CAAC,SAAS,EAAE,CAAC;gBAC3B,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YACjC,CAAC;QACH,CAAC;IACH,CAAC;CACF,CAAA;AAjEY,8DAAyB;oCAAzB,yBAAyB;IADrC,IAAA,mBAAU,GAAE;qCAI6B,gBAAS;GAHtC,yBAAyB,CAiErC","names":[],"sources":["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/common/guards/notification-throttle.guard.ts"],"sourcesContent":["import {\n  Injectable,\n  ExecutionContext,\n  HttpException,\n  HttpStatus,\n  CanActivate,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport {\n  NOTIFICATION_THROTTLE_KEY,\n  NotificationThrottleOptions,\n} from '../decorators/notification-throttle.decorator';\n\ninterface ThrottleRecord {\n  count: number;\n  resetTime: number;\n}\n\n@Injectable()\nexport class NotificationThrottleGuard implements CanActivate {\n  private readonly throttleStore = new Map<string, ThrottleRecord>();\n\n  constructor(private readonly reflector: Reflector) {\n    // Clean up expired entries every 5 minutes\n    setInterval(() => this.cleanupExpiredEntries(), 5 * 60 * 1000);\n  }\n\n  async canActivate(context: ExecutionContext): Promise<boolean> {\n    const throttleOptions = this.reflector.get<NotificationThrottleOptions>(\n      NOTIFICATION_THROTTLE_KEY,\n      context.getHandler(),\n    );\n\n    if (!throttleOptions) {\n      // No notification throttle decorator, skip this guard\n      return true;\n    }\n\n    const request = context.switchToHttp().getRequest();\n    const userId = request['user']?.userId;\n\n    if (!userId) {\n      throw new HttpException('User not authenticated', HttpStatus.UNAUTHORIZED);\n    }\n\n    const key = `notification_throttle:${userId}`;\n    const { ttl, limit } = throttleOptions;\n    const now = Date.now();\n\n    let record = this.throttleStore.get(key);\n\n    // Initialize or reset if expired\n    if (!record || now > record.resetTime) {\n      record = {\n        count: 0,\n        resetTime: now + ttl,\n      };\n      this.throttleStore.set(key, record);\n    }\n\n    // Check if limit exceeded\n    if (record.count >= limit) {\n      const remainingTime = Math.ceil((record.resetTime - now) / 1000);\n      throw new HttpException(\n        `Notification rate limit exceeded. Try again in ${remainingTime} seconds.`,\n        HttpStatus.TOO_MANY_REQUESTS,\n      );\n    }\n\n    // Increment count\n    record.count++;\n    this.throttleStore.set(key, record);\n\n    return true;\n  }\n\n  private cleanupExpiredEntries(): void {\n    const now = Date.now();\n    for (const [key, record] of this.throttleStore.entries()) {\n      if (now > record.resetTime) {\n        this.throttleStore.delete(key);\n      }\n    }\n  }\n}\n"],"version":3}