{"version":3,"names":["common_1","cov_1m1iisaopx","s","require","config_1","sharp_1","__importDefault","AWS","__importStar","uuid_1","ImageProcessingService","configService","s3","bucketName","constructor","f","S3","accessKeyId","get","secretAccessKey","region","b","uploadImage","file","BadRequestException","maxSize","parseInt","size","allowedMimeTypes","includes","mimetype","fileName","v4","Date","now","originalKey","thumbnailKey","optimizedImage","default","buffer","resize","fit","withoutEnlargement","jpeg","quality","progressive","toBuffer","thumbnail","putObject","Bucket","Key","Body","ContentType","CacheControl","promise","cloudFrontUrl","baseUrl","url","thumbnailUrl","error","message","deleteImage","imageUrl","URL","key","pathname","substring","replace","deleteObject","console","generateResponsiveImages","sizes","original","width","large","medium","small","urls","config","Object","entries","processedImage","exports","__decorate","Injectable","ConfigService"],"sources":["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/news-releases/services/image-processing.service.ts"],"sourcesContent":["import { Injectable, BadRequestException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport sharp from 'sharp';\nimport * as AWS from 'aws-sdk';\nimport { v4 as uuidv4 } from 'uuid';\n\n@Injectable()\nexport class ImageProcessingService {\n  private s3: AWS.S3;\n  private bucketName: string;\n\n  constructor(private configService: ConfigService) {\n    this.s3 = new AWS.S3({\n      accessKeyId: this.configService.get('AWS_ACCESS_KEY_ID'),\n      secretAccessKey: this.configService.get('AWS_SECRET_ACCESS_KEY'),\n      region: this.configService.get('AWS_REGION'),\n    });\n    this.bucketName = this.configService.get('AWS_S3_NEWS_BUCKET') || 'vtex-day-news-images';\n  }\n\n  async uploadImage(file: Express.Multer.File): Promise<{ url: string; thumbnailUrl: string }> {\n    if (!file) {\n      throw new BadRequestException('No file provided');\n    }\n\n    const maxSize = parseInt(this.configService.get('NEWS_IMAGE_MAX_SIZE') || '10485760', 10);\n    if (file.size > maxSize) {\n      throw new BadRequestException(`File size exceeds maximum allowed size of ${maxSize} bytes`);\n    }\n\n    const allowedMimeTypes = ['image/jpeg', 'image/png', 'image/webp', 'image/gif'];\n    if (!allowedMimeTypes.includes(file.mimetype)) {\n      throw new BadRequestException('Invalid file type. Only JPEG, PNG, WebP, and GIF are allowed');\n    }\n\n    try {\n      const fileName = `${uuidv4()}-${Date.now()}`;\n      const originalKey = `news-releases/original/${fileName}`;\n      const thumbnailKey = `news-releases/thumbnail/${fileName}`;\n\n      const optimizedImage = await sharp(file.buffer)\n        .resize(1920, 1080, {\n          fit: 'inside',\n          withoutEnlargement: true,\n        })\n        .jpeg({ quality: 85, progressive: true })\n        .toBuffer();\n\n      const thumbnail = await sharp(file.buffer)\n        .resize(400, 300, {\n          fit: 'cover',\n        })\n        .jpeg({ quality: 80 })\n        .toBuffer();\n\n      await this.s3\n        .putObject({\n          Bucket: this.bucketName,\n          Key: originalKey,\n          Body: optimizedImage,\n          ContentType: 'image/jpeg',\n          CacheControl: 'max-age=31536000',\n        })\n        .promise();\n\n      await this.s3\n        .putObject({\n          Bucket: this.bucketName,\n          Key: thumbnailKey,\n          Body: thumbnail,\n          ContentType: 'image/jpeg',\n          CacheControl: 'max-age=31536000',\n        })\n        .promise();\n\n      const cloudFrontUrl = this.configService.get('CLOUDFRONT_URL');\n      const baseUrl = cloudFrontUrl || `https://${this.bucketName}.s3.amazonaws.com`;\n\n      return {\n        url: `${baseUrl}/${originalKey}`,\n        thumbnailUrl: `${baseUrl}/${thumbnailKey}`,\n      };\n    } catch (error: any) {\n      throw new BadRequestException(\n        `Failed to process image: ${error?.message || 'Unknown error'}`,\n      );\n    }\n  }\n\n  async deleteImage(imageUrl: string): Promise<void> {\n    try {\n      // Properly parse the URL to extract the key\n      const url = new URL(imageUrl);\n      let key = url.pathname.substring(1); // Remove leading slash\n\n      // Validate the key doesn't contain path traversal attempts\n      if (key.includes('../') || key.includes('..\\\\')) {\n        throw new BadRequestException('Invalid image URL');\n      }\n\n      // Sanitize the key\n      key = key.replace(/\\.\\./g, '').replace(/\\/+/g, '/');\n\n      if (key) {\n        await this.s3\n          .deleteObject({\n            Bucket: this.bucketName,\n            Key: key,\n          })\n          .promise();\n\n        const thumbnailKey = key.replace('/original/', '/thumbnail/');\n        await this.s3\n          .deleteObject({\n            Bucket: this.bucketName,\n            Key: thumbnailKey,\n          })\n          .promise();\n      }\n    } catch (error: any) {\n      if (error?.message === 'Invalid URL') {\n        throw new BadRequestException('Invalid image URL format');\n      }\n      console.error('Failed to delete image from S3:', error);\n    }\n  }\n\n  async generateResponsiveImages(file: Express.Multer.File): Promise<{\n    original: string;\n    large: string;\n    medium: string;\n    small: string;\n    thumbnail: string;\n  }> {\n    const fileName = `${uuidv4()}-${Date.now()}`;\n    const sizes = {\n      original: { width: null, quality: 95 },\n      large: { width: 1920, quality: 85 },\n      medium: { width: 1024, quality: 80 },\n      small: { width: 640, quality: 75 },\n      thumbnail: { width: 320, quality: 70 },\n    };\n\n    const urls: any = {};\n\n    for (const [size, config] of Object.entries(sizes)) {\n      const key = `news-releases/${size}/${fileName}`;\n\n      let processedImage = sharp(file.buffer);\n\n      if (config.width) {\n        processedImage = processedImage.resize(config.width, null, {\n          fit: 'inside',\n          withoutEnlargement: true,\n        });\n      }\n\n      const buffer = await processedImage\n        .jpeg({ quality: config.quality, progressive: true })\n        .toBuffer();\n\n      await this.s3\n        .putObject({\n          Bucket: this.bucketName,\n          Key: key,\n          Body: buffer,\n          ContentType: 'image/jpeg',\n          CacheControl: 'max-age=31536000',\n        })\n        .promise();\n\n      const cloudFrontUrl = this.configService.get('CLOUDFRONT_URL');\n      const baseUrl = cloudFrontUrl || `https://${this.bucketName}.s3.amazonaws.com`;\n      urls[size] = `${baseUrl}/${key}`;\n    }\n\n    return urls;\n  }\n}\n"],"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","ignoreList":[]}