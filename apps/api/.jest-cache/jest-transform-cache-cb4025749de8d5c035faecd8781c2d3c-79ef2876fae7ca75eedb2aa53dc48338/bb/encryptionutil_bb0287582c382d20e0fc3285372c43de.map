{"version":3,"names":["cov_1b0ioksuvs","actualCoverage","s","crypto_1","require","EncryptionUtil","ALGORITHM","IV_LENGTH","KEY_LENGTH","getEncryptionKey","f","key","b","process","env","salt","Buffer","from","scryptSync","encrypt","plaintext","iv","randomBytes","cipher","createCipheriv","encrypted","update","final","authTag","getAuthTag","toString","decrypt","encryptedData","parts","split","length","Error","ivBase64","authTagBase64","decipher","createDecipheriv","setAuthTag","decrypted","error","message","encryptDeviceToken","token","decryptDeviceToken","encryptedToken","exports"],"sources":["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/common/utils/encryption.util.ts"],"sourcesContent":["import { createCipheriv, createDecipheriv, randomBytes, scryptSync } from 'crypto';\n\n/**\n * Encryption utility for sensitive data like device tokens\n * Uses AES-256-GCM encryption\n */\nexport class EncryptionUtil {\n  private static readonly ALGORITHM = 'aes-256-gcm';\n  private static readonly IV_LENGTH = 16;\n  private static readonly KEY_LENGTH = 32;\n\n  /**\n   * Get encryption key from environment variable or generate a default one\n   * In production, this MUST be set via environment variable\n   */\n  private static getEncryptionKey(): Buffer {\n    const key = process.env['ENCRYPTION_KEY'] || 'default-key-change-in-production';\n\n    // Derive a proper 32-byte key using scrypt\n    const salt = Buffer.from('vtexday26-salt'); // Fixed salt for consistency\n    return scryptSync(key, salt, this.KEY_LENGTH);\n  }\n\n  /**\n   * Encrypts a string value\n   * @param plaintext - The text to encrypt\n   * @returns Encrypted value in format: iv:authTag:encryptedData (all base64 encoded)\n   */\n  static encrypt(plaintext: string): string {\n    if (!plaintext) {\n      return '';\n    }\n\n    const key = this.getEncryptionKey();\n    const iv = randomBytes(this.IV_LENGTH);\n\n    const cipher = createCipheriv(this.ALGORITHM, key, iv);\n\n    let encrypted = cipher.update(plaintext, 'utf8', 'base64');\n    encrypted += cipher.final('base64');\n\n    const authTag = cipher.getAuthTag();\n\n    // Format: iv:authTag:encryptedData\n    return `${iv.toString('base64')}:${authTag.toString('base64')}:${encrypted}`;\n  }\n\n  /**\n   * Decrypts an encrypted string value\n   * @param encryptedData - The encrypted value in format: iv:authTag:encryptedData\n   * @returns Decrypted plaintext\n   */\n  static decrypt(encryptedData: string): string {\n    if (!encryptedData) {\n      return '';\n    }\n\n    try {\n      const parts = encryptedData.split(':');\n      if (parts.length !== 3) {\n        throw new Error('Invalid encrypted data format');\n      }\n\n      const [ivBase64, authTagBase64, encrypted] = parts;\n\n      const key = this.getEncryptionKey();\n      const iv = Buffer.from(ivBase64, 'base64');\n      const authTag = Buffer.from(authTagBase64, 'base64');\n\n      const decipher = createDecipheriv(this.ALGORITHM, key, iv);\n      decipher.setAuthTag(authTag);\n\n      let decrypted = decipher.update(encrypted, 'base64', 'utf8');\n      decrypted += decipher.final('utf8');\n\n      return decrypted;\n    } catch (error: any) {\n      throw new Error(`Decryption failed: ${error?.message || 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Encrypts device token for storage\n   * @param token - Device token to encrypt\n   * @returns Encrypted token\n   */\n  static encryptDeviceToken(token: string): string {\n    return this.encrypt(token);\n  }\n\n  /**\n   * Decrypts device token for use\n   * @param encryptedToken - Encrypted device token\n   * @returns Decrypted token\n   */\n  static decryptDeviceToken(encryptedToken: string): string {\n    return this.decrypt(encryptedToken);\n  }\n}\n"],"mappingscK;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAAAA,cAAA,GAAAE,CAAA;;;;;;;AAdL,MAAAC,QAAA;AAAA;AAAA,CAAAH,cAAA,GAAAE,CAAA,OAAAE,OAAA;AAEA;;;;AAIA,MAAaC,cAAc;EACjB,OAAgBC,SAAS;EAAA;EAAA,CAAAN,cAAA,GAAAE,CAAA,OAAG,aAAa;EACzC,OAAgBK,SAAS;EAAA;EAAA,CAAAP,cAAA,GAAAE,CAAA,OAAG,EAAE;EAC9B,OAAgBM,UAAU;EAAA;EAAA,CAAAR,cAAA,GAAAE,CAAA,OAAG,EAAE;EAEvC;;;;EAIQ,OAAOO,gBAAgBA,CAAA;IAAA;IAAAT,cAAA,GAAAU,CAAA;IAC7B,MAAMC,GAAG;IAAA;IAAA,CAAAX,cAAA,GAAAE,CAAA;IAAG;IAAA,CAAAF,cAAA,GAAAY,CAAA,UAAAC,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;IAAA;IAAA,CAAAd,cAAA,GAAAY,CAAA,UAAI,kCAAkC;IAE/E;IACA,MAAMG,IAAI;IAAA;IAAA,CAAAf,cAAA,GAAAE,CAAA,OAAGc,MAAM,CAACC,IAAI,CAAC,gBAAgB,CAAC,EAAC,CAAC;IAAA;IAAAjB,cAAA,GAAAE,CAAA;IAC5C,OAAO,IAAAC,QAAA,CAAAe,UAAU,EAACP,GAAG,EAAEI,IAAI,EAAE,IAAI,CAACP,UAAU,CAAC;EAC/C;EAEA;;;;;EAKA,OAAOW,OAAOA,CAACC,SAAiB;IAAA;IAAApB,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAE,CAAA;IAC9B,IAAI,CAACkB,SAAS,EAAE;MAAA;MAAApB,cAAA,GAAAY,CAAA;MAAAZ,cAAA,GAAAE,CAAA;MACd,OAAO,EAAE;IACX,CAAC;IAAA;IAAA;MAAAF,cAAA,GAAAY,CAAA;IAAA;IAED,MAAMD,GAAG;IAAA;IAAA,CAAAX,cAAA,GAAAE,CAAA,QAAG,IAAI,CAACO,gBAAgB,EAAE;IACnC,MAAMY,EAAE;IAAA;IAAA,CAAArB,cAAA,GAAAE,CAAA,QAAG,IAAAC,QAAA,CAAAmB,WAAW,EAAC,IAAI,CAACf,SAAS,CAAC;IAEtC,MAAMgB,MAAM;IAAA;IAAA,CAAAvB,cAAA,GAAAE,CAAA,QAAG,IAAAC,QAAA,CAAAqB,cAAc,EAAC,IAAI,CAAClB,SAAS,EAAEK,GAAG,EAAEU,EAAE,CAAC;IAEtD,IAAII,SAAS;IAAA;IAAA,CAAAzB,cAAA,GAAAE,CAAA,QAAGqB,MAAM,CAACG,MAAM,CAACN,SAAS,EAAE,MAAM,EAAE,QAAQ,CAAC;IAAC;IAAApB,cAAA,GAAAE,CAAA;IAC3DuB,SAAS,IAAIF,MAAM,CAACI,KAAK,CAAC,QAAQ,CAAC;IAEnC,MAAMC,OAAO;IAAA;IAAA,CAAA5B,cAAA,GAAAE,CAAA,QAAGqB,MAAM,CAACM,UAAU,EAAE;IAEnC;IAAA;IAAA7B,cAAA,GAAAE,CAAA;IACA,OAAO,GAAGmB,EAAE,CAACS,QAAQ,CAAC,QAAQ,CAAC,IAAIF,OAAO,CAACE,QAAQ,CAAC,QAAQ,CAAC,IAAIL,SAAS,EAAE;EAC9E;EAEA;;;;;EAKA,OAAOM,OAAOA,CAACC,aAAqB;IAAA;IAAAhC,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAE,CAAA;IAClC,IAAI,CAAC8B,aAAa,EAAE;MAAA;MAAAhC,cAAA,GAAAY,CAAA;MAAAZ,cAAA,GAAAE,CAAA;MAClB,OAAO,EAAE;IACX,CAAC;IAAA;IAAA;MAAAF,cAAA,GAAAY,CAAA;IAAA;IAAAZ,cAAA,GAAAE,CAAA;IAED,IAAI;MACF,MAAM+B,KAAK;MAAA;MAAA,CAAAjC,cAAA,GAAAE,CAAA,QAAG8B,aAAa,CAACE,KAAK,CAAC,GAAG,CAAC;MAAC;MAAAlC,cAAA,GAAAE,CAAA;MACvC,IAAI+B,KAAK,CAACE,MAAM,KAAK,CAAC,EAAE;QAAA;QAAAnC,cAAA,GAAAY,CAAA;QAAAZ,cAAA,GAAAE,CAAA;QACtB,MAAM,IAAIkC,KAAK,CAAC,+BAA+B,CAAC;MAClD,CAAC;MAAA;MAAA;QAAApC,cAAA,GAAAY,CAAA;MAAA;MAED,MAAM,CAACyB,QAAQ,EAAEC,aAAa,EAAEb,SAAS,CAAC;MAAA;MAAA,CAAAzB,cAAA,GAAAE,CAAA,QAAG+B,KAAK;MAElD,MAAMtB,GAAG;MAAA;MAAA,CAAAX,cAAA,GAAAE,CAAA,QAAG,IAAI,CAACO,gBAAgB,EAAE;MACnC,MAAMY,EAAE;MAAA;MAAA,CAAArB,cAAA,GAAAE,CAAA,QAAGc,MAAM,CAACC,IAAI,CAACoB,QAAQ,EAAE,QAAQ,CAAC;MAC1C,MAAMT,OAAO;MAAA;MAAA,CAAA5B,cAAA,GAAAE,CAAA,QAAGc,MAAM,CAACC,IAAI,CAACqB,aAAa,EAAE,QAAQ,CAAC;MAEpD,MAAMC,QAAQ;MAAA;MAAA,CAAAvC,cAAA,GAAAE,CAAA,QAAG,IAAAC,QAAA,CAAAqC,gBAAgB,EAAC,IAAI,CAAClC,SAAS,EAAEK,GAAG,EAAEU,EAAE,CAAC;MAAC;MAAArB,cAAA,GAAAE,CAAA;MAC3DqC,QAAQ,CAACE,UAAU,CAACb,OAAO,CAAC;MAE5B,IAAIc,SAAS;MAAA;MAAA,CAAA1C,cAAA,GAAAE,CAAA,QAAGqC,QAAQ,CAACb,MAAM,CAACD,SAAS,EAAE,QAAQ,EAAE,MAAM,CAAC;MAAC;MAAAzB,cAAA,GAAAE,CAAA;MAC7DwC,SAAS,IAAIH,QAAQ,CAACZ,KAAK,CAAC,MAAM,CAAC;MAAC;MAAA3B,cAAA,GAAAE,CAAA;MAEpC,OAAOwC,SAAS;IAClB,CAAC,CAAC,OAAOC,KAAU,EAAE;MAAA;MAAA3C,cAAA,GAAAE,CAAA;MACnB,MAAM,IAAIkC,KAAK,CAAC;MAAsB;MAAA,CAAApC,cAAA,GAAAY,CAAA,UAAA+B,KAAK,EAAEC,OAAO;MAAA;MAAA,CAAA5C,cAAA,GAAAY,CAAA,UAAI,eAAe,GAAE,CAAC;IAC5E;EACF;EAEA;;;;;EAKA,OAAOiC,kBAAkBA,CAACC,KAAa;IAAA;IAAA9C,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAE,CAAA;IACrC,OAAO,IAAI,CAACiB,OAAO,CAAC2B,KAAK,CAAC;EAC5B;EAEA;;;;;EAKA,OAAOC,kBAAkBA,CAACC,cAAsB;IAAA;IAAAhD,cAAA,GAAAU,CAAA;IAAAV,cAAA,GAAAE,CAAA;IAC9C,OAAO,IAAI,CAAC6B,OAAO,CAACiB,cAAc,CAAC;EACrC;;;;AA3FFC,OAAA,CAAA5C,cAAA,GAAAA,cAAA","ignoreList":[]}