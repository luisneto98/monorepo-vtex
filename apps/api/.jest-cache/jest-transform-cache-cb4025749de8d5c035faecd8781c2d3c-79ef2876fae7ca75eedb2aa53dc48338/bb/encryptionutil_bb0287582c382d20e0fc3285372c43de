f4d2fa5f4c0be8ba871965dd992b71ac
"use strict";

/* istanbul ignore next */
function cov_1b0ioksuvs() {
  var path = "/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/common/utils/encryption.util.ts";
  var hash = "7d039a81a5f3190526bf78a2ab16a286c82712dc";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/common/utils/encryption.util.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 32
        }
      },
      "2": {
        start: {
          line: 4,
          column: 17
        },
        end: {
          line: 4,
          column: 34
        }
      },
      "3": {
        start: {
          line: 10,
          column: 23
        },
        end: {
          line: 10,
          column: 36
        }
      },
      "4": {
        start: {
          line: 11,
          column: 23
        },
        end: {
          line: 11,
          column: 25
        }
      },
      "5": {
        start: {
          line: 12,
          column: 24
        },
        end: {
          line: 12,
          column: 26
        }
      },
      "6": {
        start: {
          line: 18,
          column: 20
        },
        end: {
          line: 18,
          column: 87
        }
      },
      "7": {
        start: {
          line: 20,
          column: 21
        },
        end: {
          line: 20,
          column: 50
        }
      },
      "8": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 68
        }
      },
      "9": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 31,
          column: 9
        }
      },
      "10": {
        start: {
          line: 30,
          column: 12
        },
        end: {
          line: 30,
          column: 22
        }
      },
      "11": {
        start: {
          line: 32,
          column: 20
        },
        end: {
          line: 32,
          column: 43
        }
      },
      "12": {
        start: {
          line: 33,
          column: 19
        },
        end: {
          line: 33,
          column: 60
        }
      },
      "13": {
        start: {
          line: 34,
          column: 23
        },
        end: {
          line: 34,
          column: 76
        }
      },
      "14": {
        start: {
          line: 35,
          column: 24
        },
        end: {
          line: 35,
          column: 66
        }
      },
      "15": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 36,
          column: 44
        }
      },
      "16": {
        start: {
          line: 37,
          column: 24
        },
        end: {
          line: 37,
          column: 43
        }
      },
      "17": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 39,
          column: 85
        }
      },
      "18": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 49,
          column: 9
        }
      },
      "19": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 48,
          column: 22
        }
      },
      "20": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 67,
          column: 9
        }
      },
      "21": {
        start: {
          line: 51,
          column: 26
        },
        end: {
          line: 51,
          column: 50
        }
      },
      "22": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 54,
          column: 13
        }
      },
      "23": {
        start: {
          line: 53,
          column: 16
        },
        end: {
          line: 53,
          column: 65
        }
      },
      "24": {
        start: {
          line: 55,
          column: 57
        },
        end: {
          line: 55,
          column: 62
        }
      },
      "25": {
        start: {
          line: 56,
          column: 24
        },
        end: {
          line: 56,
          column: 47
        }
      },
      "26": {
        start: {
          line: 57,
          column: 23
        },
        end: {
          line: 57,
          column: 54
        }
      },
      "27": {
        start: {
          line: 58,
          column: 28
        },
        end: {
          line: 58,
          column: 64
        }
      },
      "28": {
        start: {
          line: 59,
          column: 29
        },
        end: {
          line: 59,
          column: 84
        }
      },
      "29": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 60,
          column: 41
        }
      },
      "30": {
        start: {
          line: 61,
          column: 28
        },
        end: {
          line: 61,
          column: 72
        }
      },
      "31": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 62,
          column: 48
        }
      },
      "32": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 63,
          column: 29
        }
      },
      "33": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 66,
          column: 87
        }
      },
      "34": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 75,
          column: 35
        }
      },
      "35": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 83,
          column: 44
        }
      },
      "36": {
        start: {
          line: 86,
          column: 0
        },
        end: {
          line: 86,
          column: 40
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 17,
            column: 5
          }
        },
        loc: {
          start: {
            line: 17,
            column: 30
          },
          end: {
            line: 22,
            column: 5
          }
        },
        line: 17
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 28,
            column: 4
          },
          end: {
            line: 28,
            column: 5
          }
        },
        loc: {
          start: {
            line: 28,
            column: 30
          },
          end: {
            line: 40,
            column: 5
          }
        },
        line: 28
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 46,
            column: 4
          },
          end: {
            line: 46,
            column: 5
          }
        },
        loc: {
          start: {
            line: 46,
            column: 34
          },
          end: {
            line: 68,
            column: 5
          }
        },
        line: 46
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 74,
            column: 4
          },
          end: {
            line: 74,
            column: 5
          }
        },
        loc: {
          start: {
            line: 74,
            column: 37
          },
          end: {
            line: 76,
            column: 5
          }
        },
        line: 74
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 82,
            column: 4
          },
          end: {
            line: 82,
            column: 5
          }
        },
        loc: {
          start: {
            line: 82,
            column: 46
          },
          end: {
            line: 84,
            column: 5
          }
        },
        line: 82
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 18,
            column: 20
          },
          end: {
            line: 18,
            column: 87
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 18,
            column: 20
          },
          end: {
            line: 18,
            column: 49
          }
        }, {
          start: {
            line: 18,
            column: 53
          },
          end: {
            line: 18,
            column: 87
          }
        }],
        line: 18
      },
      "1": {
        loc: {
          start: {
            line: 29,
            column: 8
          },
          end: {
            line: 31,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 29,
            column: 8
          },
          end: {
            line: 31,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 29
      },
      "2": {
        loc: {
          start: {
            line: 47,
            column: 8
          },
          end: {
            line: 49,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 47,
            column: 8
          },
          end: {
            line: 49,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 47
      },
      "3": {
        loc: {
          start: {
            line: 52,
            column: 12
          },
          end: {
            line: 54,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 52,
            column: 12
          },
          end: {
            line: 54,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 52
      },
      "4": {
        loc: {
          start: {
            line: 66,
            column: 50
          },
          end: {
            line: 66,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 66,
            column: 50
          },
          end: {
            line: 66,
            column: 64
          }
        }, {
          start: {
            line: 66,
            column: 68
          },
          end: {
            line: 66,
            column: 83
          }
        }],
        line: 66
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0]
    },
    inputSourceMap: {
      file: "/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/common/utils/encryption.util.ts",
      mappings: "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",
      names: [],
      sources: ["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/common/utils/encryption.util.ts"],
      sourcesContent: ["import { createCipheriv, createDecipheriv, randomBytes, scryptSync } from 'crypto';\n\n/**\n * Encryption utility for sensitive data like device tokens\n * Uses AES-256-GCM encryption\n */\nexport class EncryptionUtil {\n  private static readonly ALGORITHM = 'aes-256-gcm';\n  private static readonly IV_LENGTH = 16;\n  private static readonly KEY_LENGTH = 32;\n\n  /**\n   * Get encryption key from environment variable or generate a default one\n   * In production, this MUST be set via environment variable\n   */\n  private static getEncryptionKey(): Buffer {\n    const key = process.env['ENCRYPTION_KEY'] || 'default-key-change-in-production';\n\n    // Derive a proper 32-byte key using scrypt\n    const salt = Buffer.from('vtexday26-salt'); // Fixed salt for consistency\n    return scryptSync(key, salt, this.KEY_LENGTH);\n  }\n\n  /**\n   * Encrypts a string value\n   * @param plaintext - The text to encrypt\n   * @returns Encrypted value in format: iv:authTag:encryptedData (all base64 encoded)\n   */\n  static encrypt(plaintext: string): string {\n    if (!plaintext) {\n      return '';\n    }\n\n    const key = this.getEncryptionKey();\n    const iv = randomBytes(this.IV_LENGTH);\n\n    const cipher = createCipheriv(this.ALGORITHM, key, iv);\n\n    let encrypted = cipher.update(plaintext, 'utf8', 'base64');\n    encrypted += cipher.final('base64');\n\n    const authTag = cipher.getAuthTag();\n\n    // Format: iv:authTag:encryptedData\n    return `${iv.toString('base64')}:${authTag.toString('base64')}:${encrypted}`;\n  }\n\n  /**\n   * Decrypts an encrypted string value\n   * @param encryptedData - The encrypted value in format: iv:authTag:encryptedData\n   * @returns Decrypted plaintext\n   */\n  static decrypt(encryptedData: string): string {\n    if (!encryptedData) {\n      return '';\n    }\n\n    try {\n      const parts = encryptedData.split(':');\n      if (parts.length !== 3) {\n        throw new Error('Invalid encrypted data format');\n      }\n\n      const [ivBase64, authTagBase64, encrypted] = parts;\n\n      const key = this.getEncryptionKey();\n      const iv = Buffer.from(ivBase64, 'base64');\n      const authTag = Buffer.from(authTagBase64, 'base64');\n\n      const decipher = createDecipheriv(this.ALGORITHM, key, iv);\n      decipher.setAuthTag(authTag);\n\n      let decrypted = decipher.update(encrypted, 'base64', 'utf8');\n      decrypted += decipher.final('utf8');\n\n      return decrypted;\n    } catch (error: any) {\n      throw new Error(`Decryption failed: ${error?.message || 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Encrypts device token for storage\n   * @param token - Device token to encrypt\n   * @returns Encrypted token\n   */\n  static encryptDeviceToken(token: string): string {\n    return this.encrypt(token);\n  }\n\n  /**\n   * Decrypts device token for use\n   * @param encryptedToken - Encrypted device token\n   * @returns Decrypted token\n   */\n  static decryptDeviceToken(encryptedToken: string): string {\n    return this.decrypt(encryptedToken);\n  }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "7d039a81a5f3190526bf78a2ab16a286c82712dc"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1b0ioksuvs = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1b0ioksuvs();
cov_1b0ioksuvs().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1b0ioksuvs().s[1]++;
exports.EncryptionUtil = void 0;
const crypto_1 =
/* istanbul ignore next */
(cov_1b0ioksuvs().s[2]++, require("crypto"));
/**
 * Encryption utility for sensitive data like device tokens
 * Uses AES-256-GCM encryption
 */
class EncryptionUtil {
  static ALGORITHM =
  /* istanbul ignore next */
  (cov_1b0ioksuvs().s[3]++, 'aes-256-gcm');
  static IV_LENGTH =
  /* istanbul ignore next */
  (cov_1b0ioksuvs().s[4]++, 16);
  static KEY_LENGTH =
  /* istanbul ignore next */
  (cov_1b0ioksuvs().s[5]++, 32);
  /**
   * Get encryption key from environment variable or generate a default one
   * In production, this MUST be set via environment variable
   */
  static getEncryptionKey() {
    /* istanbul ignore next */
    cov_1b0ioksuvs().f[0]++;
    const key =
    /* istanbul ignore next */
    (cov_1b0ioksuvs().s[6]++,
    /* istanbul ignore next */
    (cov_1b0ioksuvs().b[0][0]++, process.env['ENCRYPTION_KEY']) ||
    /* istanbul ignore next */
    (cov_1b0ioksuvs().b[0][1]++, 'default-key-change-in-production'));
    // Derive a proper 32-byte key using scrypt
    const salt =
    /* istanbul ignore next */
    (cov_1b0ioksuvs().s[7]++, Buffer.from('vtexday26-salt')); // Fixed salt for consistency
    /* istanbul ignore next */
    cov_1b0ioksuvs().s[8]++;
    return (0, crypto_1.scryptSync)(key, salt, this.KEY_LENGTH);
  }
  /**
   * Encrypts a string value
   * @param plaintext - The text to encrypt
   * @returns Encrypted value in format: iv:authTag:encryptedData (all base64 encoded)
   */
  static encrypt(plaintext) {
    /* istanbul ignore next */
    cov_1b0ioksuvs().f[1]++;
    cov_1b0ioksuvs().s[9]++;
    if (!plaintext) {
      /* istanbul ignore next */
      cov_1b0ioksuvs().b[1][0]++;
      cov_1b0ioksuvs().s[10]++;
      return '';
    } else
    /* istanbul ignore next */
    {
      cov_1b0ioksuvs().b[1][1]++;
    }
    const key =
    /* istanbul ignore next */
    (cov_1b0ioksuvs().s[11]++, this.getEncryptionKey());
    const iv =
    /* istanbul ignore next */
    (cov_1b0ioksuvs().s[12]++, (0, crypto_1.randomBytes)(this.IV_LENGTH));
    const cipher =
    /* istanbul ignore next */
    (cov_1b0ioksuvs().s[13]++, (0, crypto_1.createCipheriv)(this.ALGORITHM, key, iv));
    let encrypted =
    /* istanbul ignore next */
    (cov_1b0ioksuvs().s[14]++, cipher.update(plaintext, 'utf8', 'base64'));
    /* istanbul ignore next */
    cov_1b0ioksuvs().s[15]++;
    encrypted += cipher.final('base64');
    const authTag =
    /* istanbul ignore next */
    (cov_1b0ioksuvs().s[16]++, cipher.getAuthTag());
    // Format: iv:authTag:encryptedData
    /* istanbul ignore next */
    cov_1b0ioksuvs().s[17]++;
    return `${iv.toString('base64')}:${authTag.toString('base64')}:${encrypted}`;
  }
  /**
   * Decrypts an encrypted string value
   * @param encryptedData - The encrypted value in format: iv:authTag:encryptedData
   * @returns Decrypted plaintext
   */
  static decrypt(encryptedData) {
    /* istanbul ignore next */
    cov_1b0ioksuvs().f[2]++;
    cov_1b0ioksuvs().s[18]++;
    if (!encryptedData) {
      /* istanbul ignore next */
      cov_1b0ioksuvs().b[2][0]++;
      cov_1b0ioksuvs().s[19]++;
      return '';
    } else
    /* istanbul ignore next */
    {
      cov_1b0ioksuvs().b[2][1]++;
    }
    cov_1b0ioksuvs().s[20]++;
    try {
      const parts =
      /* istanbul ignore next */
      (cov_1b0ioksuvs().s[21]++, encryptedData.split(':'));
      /* istanbul ignore next */
      cov_1b0ioksuvs().s[22]++;
      if (parts.length !== 3) {
        /* istanbul ignore next */
        cov_1b0ioksuvs().b[3][0]++;
        cov_1b0ioksuvs().s[23]++;
        throw new Error('Invalid encrypted data format');
      } else
      /* istanbul ignore next */
      {
        cov_1b0ioksuvs().b[3][1]++;
      }
      const [ivBase64, authTagBase64, encrypted] =
      /* istanbul ignore next */
      (cov_1b0ioksuvs().s[24]++, parts);
      const key =
      /* istanbul ignore next */
      (cov_1b0ioksuvs().s[25]++, this.getEncryptionKey());
      const iv =
      /* istanbul ignore next */
      (cov_1b0ioksuvs().s[26]++, Buffer.from(ivBase64, 'base64'));
      const authTag =
      /* istanbul ignore next */
      (cov_1b0ioksuvs().s[27]++, Buffer.from(authTagBase64, 'base64'));
      const decipher =
      /* istanbul ignore next */
      (cov_1b0ioksuvs().s[28]++, (0, crypto_1.createDecipheriv)(this.ALGORITHM, key, iv));
      /* istanbul ignore next */
      cov_1b0ioksuvs().s[29]++;
      decipher.setAuthTag(authTag);
      let decrypted =
      /* istanbul ignore next */
      (cov_1b0ioksuvs().s[30]++, decipher.update(encrypted, 'base64', 'utf8'));
      /* istanbul ignore next */
      cov_1b0ioksuvs().s[31]++;
      decrypted += decipher.final('utf8');
      /* istanbul ignore next */
      cov_1b0ioksuvs().s[32]++;
      return decrypted;
    } catch (error) {
      /* istanbul ignore next */
      cov_1b0ioksuvs().s[33]++;
      throw new Error(`Decryption failed: ${
      /* istanbul ignore next */
      (cov_1b0ioksuvs().b[4][0]++, error?.message) ||
      /* istanbul ignore next */
      (cov_1b0ioksuvs().b[4][1]++, 'Unknown error')}`);
    }
  }
  /**
   * Encrypts device token for storage
   * @param token - Device token to encrypt
   * @returns Encrypted token
   */
  static encryptDeviceToken(token) {
    /* istanbul ignore next */
    cov_1b0ioksuvs().f[3]++;
    cov_1b0ioksuvs().s[34]++;
    return this.encrypt(token);
  }
  /**
   * Decrypts device token for use
   * @param encryptedToken - Encrypted device token
   * @returns Decrypted token
   */
  static decryptDeviceToken(encryptedToken) {
    /* istanbul ignore next */
    cov_1b0ioksuvs().f[4]++;
    cov_1b0ioksuvs().s[35]++;
    return this.decrypt(encryptedToken);
  }
}
/* istanbul ignore next */
cov_1b0ioksuvs().s[36]++;
exports.EncryptionUtil = EncryptionUtil;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,