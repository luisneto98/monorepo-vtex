{"version":3,"names":["common_1","cov_243kf9kfl9","s","require","mongoose_1","mongoose_2","bull_1","notification_schema_1","device_token_schema_1","sanitize_util_1","NotificationsService","NotificationsService_1","notificationModel","deviceTokenModel","notificationQueue","logger","Logger","name","constructor","f","sendEmail","to","subject","body","log","sendPushNotification","userId","title","message","sendSessionReminder","sessionId","broadcastNotification","sanitized","sanitizeNotification","createNotification","dto","sanitizedDto","deviceCount","countDocuments","notification","createdBy","Types","ObjectId","status","scheduledAt","b","NotificationStatus","SCHEDULED","DRAFT","saved","save","scheduleNotification","_id","toString","notificationId","delay","getTime","Date","now","Error","add","removeOnComplete","attempts","backoff","type","toISOString","findAll","page","limit","query","skip","data","total","Promise","all","find","sort","createdAt","populate","exec","totalPages","Math","ceil","findOne","id","findById","NotFoundException","updateNotification","findByIdAndUpdate","new","cancelScheduledNotification","deleteNotification","result","findByIdAndDelete","jobs","getJobs","job","remove","getHistory","startDate","endDate","search","$in","SENT","FAILED","sentAt","$gte","$lte","$or","$regex","$options","getStats","totalSent","totalFailed","totalScheduled","totalDevices","deliveryRate","registerDevice","existing","token","platform","appVersion","isTestDevice","lastActive","deviceToken","undefined","getTestDevices","sendTestNotification","deviceTokenId","device","deliverNotification","SENDING","devices","delivered","failed","substring","error","errorMessage","deliveredCount","failedCount","exports","__decorate","Injectable","__param","InjectModel","Notification","DeviceToken","InjectQueue","Model","Object"],"sources":["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/notifications/notifications.service.ts"],"sourcesContent":["import { Injectable, Logger, NotFoundException } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, Types } from 'mongoose';\nimport { InjectQueue } from '@nestjs/bull';\nimport { Queue } from 'bull';\nimport {\n  Notification,\n  NotificationDocument,\n  NotificationStatus,\n} from './schemas/notification.schema';\nimport { DeviceToken, DeviceTokenDocument } from './schemas/device-token.schema';\nimport { CreateNotificationDto } from './dto/create-notification.dto';\nimport { UpdateNotificationDto } from './dto/update-notification.dto';\nimport { RegisterDeviceDto } from './dto/register-device.dto';\nimport { sanitizeNotification } from '@common/utils/sanitize.util';\n\n@Injectable()\nexport class NotificationsService {\n  private readonly logger = new Logger(NotificationsService.name);\n\n  constructor(\n    @InjectModel(Notification.name)\n    private notificationModel: Model<NotificationDocument>,\n    @InjectModel(DeviceToken.name)\n    private deviceTokenModel: Model<DeviceTokenDocument>,\n    @InjectQueue('notifications') private notificationQueue: Queue,\n  ) {}\n\n  // Legacy methods (kept for backward compatibility)\n  async sendEmail(to: string, subject: string, body: string): Promise<void> {\n    this.logger.log(`Sending email to ${to}: ${subject} - Body: ${body}`);\n    // TODO: Implement email sending logic (SendGrid, AWS SES, etc.)\n  }\n\n  async sendPushNotification(userId: string, title: string, message: string): Promise<void> {\n    this.logger.log(`Sending push notification to user ${userId}: ${title} - Message: ${message}`);\n    // TODO: Implement push notification logic (FCM, APNS, etc.)\n  }\n\n  async sendSessionReminder(userId: string, sessionId: string): Promise<void> {\n    this.logger.log(`Sending session reminder to user ${userId} for session ${sessionId}`);\n    // TODO: Implement session reminder logic\n  }\n\n  async broadcastNotification(title: string, message: string): Promise<void> {\n    // Sanitize user inputs to prevent XSS attacks\n    const sanitized = sanitizeNotification({ title, message });\n\n    this.logger.log(\n      `Broadcasting notification: ${sanitized.title} - Message: ${sanitized.message}`,\n    );\n    // TODO: Implement broadcast logic\n  }\n\n  // New notification management methods\n  async createNotification(\n    dto: CreateNotificationDto,\n    userId: string,\n  ): Promise<NotificationDocument> {\n    // Sanitize user inputs to prevent XSS attacks\n    const sanitizedDto = sanitizeNotification(dto);\n\n    const deviceCount = await this.deviceTokenModel.countDocuments();\n\n    const notification = new this.notificationModel({\n      ...sanitizedDto,\n      createdBy: new Types.ObjectId(userId),\n      deviceCount,\n      status: dto.scheduledAt\n        ? NotificationStatus.SCHEDULED\n        : dto.status || NotificationStatus.DRAFT,\n    });\n\n    const saved = await notification.save();\n\n    // Schedule notification if scheduledAt is provided\n    if (dto.scheduledAt) {\n      await this.scheduleNotification(saved._id.toString(), dto.scheduledAt);\n    }\n\n    return saved;\n  }\n\n  async scheduleNotification(notificationId: string, scheduledAt: Date): Promise<void> {\n    const delay = scheduledAt.getTime() - Date.now();\n\n    if (delay < 0) {\n      throw new Error('Cannot schedule notification in the past');\n    }\n\n    await this.notificationQueue.add(\n      'send-notification',\n      { notificationId },\n      { delay, removeOnComplete: true, attempts: 3, backoff: { type: 'exponential', delay: 5000 } },\n    );\n\n    this.logger.log(`Notification ${notificationId} scheduled for ${scheduledAt.toISOString()}`);\n  }\n\n  async findAll(\n    page = 1,\n    limit = 10,\n    status?: NotificationStatus,\n    createdBy?: string,\n  ): Promise<{\n    data: NotificationDocument[];\n    total: number;\n    page: number;\n    totalPages: number;\n  }> {\n    const query: any = {};\n\n    if (status) {\n      query.status = status;\n    }\n\n    if (createdBy) {\n      query.createdBy = new Types.ObjectId(createdBy);\n    }\n\n    const skip = (page - 1) * limit;\n\n    const [data, total] = await Promise.all([\n      this.notificationModel\n        .find(query)\n        .sort({ createdAt: -1 })\n        .skip(skip)\n        .limit(limit)\n        .populate('createdBy', 'name email')\n        .exec(),\n      this.notificationModel.countDocuments(query),\n    ]);\n\n    return {\n      data,\n      total,\n      page,\n      totalPages: Math.ceil(total / limit),\n    };\n  }\n\n  async findOne(id: string): Promise<NotificationDocument> {\n    const notification = await this.notificationModel\n      .findById(id)\n      .populate('createdBy', 'name email')\n      .exec();\n\n    if (!notification) {\n      throw new NotFoundException(`Notification with ID ${id} not found`);\n    }\n\n    return notification;\n  }\n\n  async updateNotification(id: string, dto: UpdateNotificationDto): Promise<NotificationDocument> {\n    // Sanitize user inputs to prevent XSS attacks\n    const sanitizedDto = sanitizeNotification(dto);\n\n    const notification = await this.notificationModel\n      .findByIdAndUpdate(id, sanitizedDto, { new: true })\n      .exec();\n\n    if (!notification) {\n      throw new NotFoundException(`Notification with ID ${id} not found`);\n    }\n\n    // Reschedule if scheduledAt changed\n    if (dto.scheduledAt && notification.status === NotificationStatus.SCHEDULED) {\n      // Remove old job and create new one\n      await this.cancelScheduledNotification(id);\n      await this.scheduleNotification(id, dto.scheduledAt);\n    }\n\n    return notification;\n  }\n\n  async deleteNotification(id: string): Promise<void> {\n    const result = await this.notificationModel.findByIdAndDelete(id).exec();\n\n    if (!result) {\n      throw new NotFoundException(`Notification with ID ${id} not found`);\n    }\n\n    // Cancel scheduled job if exists\n    if (result.status === NotificationStatus.SCHEDULED) {\n      await this.cancelScheduledNotification(id);\n    }\n  }\n\n  async cancelScheduledNotification(id: string): Promise<void> {\n    const jobs = await this.notificationQueue.getJobs(['delayed', 'waiting']);\n\n    for (const job of jobs) {\n      if (job.data.notificationId === id) {\n        await job.remove();\n        this.logger.log(`Cancelled scheduled notification job for ${id}`);\n      }\n    }\n\n    await this.notificationModel.findByIdAndUpdate(id, {\n      status: NotificationStatus.DRAFT,\n    });\n  }\n\n  async getHistory(\n    page = 1,\n    limit = 10,\n    startDate?: Date,\n    endDate?: Date,\n    createdBy?: string,\n    search?: string,\n  ): Promise<{\n    data: NotificationDocument[];\n    total: number;\n    page: number;\n    totalPages: number;\n  }> {\n    const query: any = {\n      status: { $in: [NotificationStatus.SENT, NotificationStatus.FAILED] },\n    };\n\n    if (startDate || endDate) {\n      query.sentAt = {};\n      if (startDate) query.sentAt.$gte = startDate;\n      if (endDate) query.sentAt.$lte = endDate;\n    }\n\n    if (createdBy) {\n      query.createdBy = new Types.ObjectId(createdBy);\n    }\n\n    if (search) {\n      query.$or = [\n        { title: { $regex: search, $options: 'i' } },\n        { message: { $regex: search, $options: 'i' } },\n      ];\n    }\n\n    const skip = (page - 1) * limit;\n\n    const [data, total] = await Promise.all([\n      this.notificationModel\n        .find(query)\n        .sort({ sentAt: -1 })\n        .skip(skip)\n        .limit(limit)\n        .populate('createdBy', 'name email')\n        .exec(),\n      this.notificationModel.countDocuments(query),\n    ]);\n\n    return {\n      data,\n      total,\n      page,\n      totalPages: Math.ceil(total / limit),\n    };\n  }\n\n  async getStats(): Promise<{\n    totalSent: number;\n    totalFailed: number;\n    totalScheduled: number;\n    totalDevices: number;\n    deliveryRate: number;\n  }> {\n    const [totalSent, totalFailed, totalScheduled, totalDevices] = await Promise.all([\n      this.notificationModel.countDocuments({\n        status: NotificationStatus.SENT,\n      }),\n      this.notificationModel.countDocuments({\n        status: NotificationStatus.FAILED,\n      }),\n      this.notificationModel.countDocuments({\n        status: NotificationStatus.SCHEDULED,\n      }),\n      this.deviceTokenModel.countDocuments(),\n    ]);\n\n    const deliveryRate =\n      totalSent + totalFailed > 0 ? (totalSent / (totalSent + totalFailed)) * 100 : 0;\n\n    return {\n      totalSent,\n      totalFailed,\n      totalScheduled,\n      totalDevices,\n      deliveryRate,\n    };\n  }\n\n  // Device token management\n  async registerDevice(dto: RegisterDeviceDto, userId?: string): Promise<DeviceTokenDocument> {\n    const existing = await this.deviceTokenModel.findOne({ token: dto.token });\n\n    if (existing) {\n      existing.userId = userId ? new Types.ObjectId(userId) : existing.userId;\n      existing.platform = dto.platform;\n      existing.appVersion = dto.appVersion;\n      existing.isTestDevice = dto.isTestDevice ?? existing.isTestDevice;\n      existing.lastActive = new Date();\n      return existing.save();\n    }\n\n    const deviceToken = new this.deviceTokenModel({\n      ...dto,\n      userId: userId ? new Types.ObjectId(userId) : undefined,\n      lastActive: new Date(),\n    });\n\n    return deviceToken.save();\n  }\n\n  async getTestDevices(): Promise<DeviceTokenDocument[]> {\n    return this.deviceTokenModel.find({ isTestDevice: true }).sort({ lastActive: -1 }).exec();\n  }\n\n  async sendTestNotification(title: string, message: string, deviceTokenId: string): Promise<void> {\n    // Sanitize user inputs to prevent XSS attacks\n    const sanitized = sanitizeNotification({ title, message });\n\n    const device = await this.deviceTokenModel.findById(deviceTokenId);\n\n    if (!device) {\n      throw new NotFoundException(`Device token with ID ${deviceTokenId} not found`);\n    }\n\n    this.logger.log(\n      `Sending test notification to device ${deviceTokenId}: ${sanitized.title} - ${sanitized.message}`,\n    );\n\n    // Decrypt token for use (tokens are encrypted at rest)\n    // const decryptedToken = (device as any).getDecryptedToken();\n\n    // TODO: Implement actual push notification sending via FCM/APNS\n    // When implementing, use: const token = (device as any).getDecryptedToken();\n    // For now, just log it (don't log the actual token in production)\n    this.logger.log(`Test notification would be sent to ${device.platform} device`);\n  }\n\n  // Actual notification delivery (called by queue processor)\n  async deliverNotification(notificationId: string): Promise<void> {\n    const notification = await this.notificationModel.findById(notificationId);\n\n    if (!notification) {\n      throw new NotFoundException(`Notification ${notificationId} not found`);\n    }\n\n    // Update status to sending\n    notification.status = NotificationStatus.SENDING;\n    await notification.save();\n\n    try {\n      // Get all active device tokens\n      const devices = await this.deviceTokenModel.find({\n        isTestDevice: false,\n      });\n\n      let delivered = 0;\n      let failed = 0;\n\n      // TODO: Implement actual FCM/APNS sending logic\n      // For now, simulate delivery\n      for (const device of devices) {\n        try {\n          this.logger.log(\n            `Sending to ${device.platform} device: ${device.token.substring(0, 20)}...`,\n          );\n          delivered++;\n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n          this.logger.error(`Failed to send to device ${device._id}: ${errorMessage}`);\n          failed++;\n        }\n      }\n\n      // Update notification with delivery stats\n      notification.status = NotificationStatus.SENT;\n      notification.sentAt = new Date();\n      notification.deliveredCount = delivered;\n      notification.failedCount = failed;\n      await notification.save();\n\n      this.logger.log(\n        `Notification ${notificationId} delivered: ${delivered} succeeded, ${failed} failed`,\n      );\n    } catch (error) {\n      notification.status = NotificationStatus.FAILED;\n      await notification.save();\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      this.logger.error(`Failed to deliver notification ${notificationId}: ${errorMessage}`);\n      throw error;\n    }\n  }\n}\n"],"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","ignoreList":[]}