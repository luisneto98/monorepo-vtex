9fcc754338f7bd719bbc3e55f5b9383a
"use strict";

/* istanbul ignore next */
function cov_243kf9kfl9() {
  var path = "/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/notifications/notifications.service.ts";
  var hash = "02b870a735de409db608d4f8095abeba0e286cc6";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/notifications/notifications.service.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 17
        },
        end: {
          line: 7,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 12
        },
        end: {
          line: 3,
          column: 28
        }
      },
      "2": {
        start: {
          line: 3,
          column: 34
        },
        end: {
          line: 3,
          column: 125
        }
      },
      "3": {
        start: {
          line: 4,
          column: 4
        },
        end: {
          line: 5,
          column: 150
        }
      },
      "4": {
        start: {
          line: 4,
          column: 79
        },
        end: {
          line: 4,
          column: 131
        }
      },
      "5": {
        start: {
          line: 5,
          column: 9
        },
        end: {
          line: 5,
          column: 150
        }
      },
      "6": {
        start: {
          line: 5,
          column: 22
        },
        end: {
          line: 5,
          column: 43
        }
      },
      "7": {
        start: {
          line: 5,
          column: 58
        },
        end: {
          line: 5,
          column: 150
        }
      },
      "8": {
        start: {
          line: 5,
          column: 81
        },
        end: {
          line: 5,
          column: 150
        }
      },
      "9": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 6,
          column: 66
        }
      },
      "10": {
        start: {
          line: 8,
          column: 17
        },
        end: {
          line: 10,
          column: 1
        }
      },
      "11": {
        start: {
          line: 9,
          column: 4
        },
        end: {
          line: 9,
          column: 109
        }
      },
      "12": {
        start: {
          line: 9,
          column: 79
        },
        end: {
          line: 9,
          column: 109
        }
      },
      "13": {
        start: {
          line: 11,
          column: 14
        },
        end: {
          line: 13,
          column: 1
        }
      },
      "14": {
        start: {
          line: 12,
          column: 4
        },
        end: {
          line: 12,
          column: 73
        }
      },
      "15": {
        start: {
          line: 12,
          column: 36
        },
        end: {
          line: 12,
          column: 71
        }
      },
      "16": {
        start: {
          line: 15,
          column: 0
        },
        end: {
          line: 15,
          column: 62
        }
      },
      "17": {
        start: {
          line: 16,
          column: 0
        },
        end: {
          line: 16,
          column: 38
        }
      },
      "18": {
        start: {
          line: 17,
          column: 17
        },
        end: {
          line: 17,
          column: 42
        }
      },
      "19": {
        start: {
          line: 18,
          column: 19
        },
        end: {
          line: 18,
          column: 46
        }
      },
      "20": {
        start: {
          line: 19,
          column: 19
        },
        end: {
          line: 19,
          column: 38
        }
      },
      "21": {
        start: {
          line: 20,
          column: 15
        },
        end: {
          line: 20,
          column: 38
        }
      },
      "22": {
        start: {
          line: 21,
          column: 30
        },
        end: {
          line: 21,
          column: 70
        }
      },
      "23": {
        start: {
          line: 22,
          column: 30
        },
        end: {
          line: 22,
          column: 70
        }
      },
      "24": {
        start: {
          line: 23,
          column: 24
        },
        end: {
          line: 23,
          column: 62
        }
      },
      "25": {
        start: {
          line: 24,
          column: 27
        },
        end: {
          line: 297,
          column: 1
        }
      },
      "26": {
        start: {
          line: 28,
          column: 13
        },
        end: {
          line: 28,
          column: 61
        }
      },
      "27": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 51
        }
      },
      "28": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 49
        }
      },
      "29": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 51
        }
      },
      "30": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 36,
          column: 78
        }
      },
      "31": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 103
        }
      },
      "32": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 44,
          column: 95
        }
      },
      "33": {
        start: {
          line: 49,
          column: 26
        },
        end: {
          line: 49,
          column: 87
        }
      },
      "34": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 50,
          column: 105
        }
      },
      "35": {
        start: {
          line: 56,
          column: 29
        },
        end: {
          line: 56,
          column: 75
        }
      },
      "36": {
        start: {
          line: 57,
          column: 28
        },
        end: {
          line: 57,
          column: 72
        }
      },
      "37": {
        start: {
          line: 58,
          column: 29
        },
        end: {
          line: 65,
          column: 10
        }
      },
      "38": {
        start: {
          line: 66,
          column: 22
        },
        end: {
          line: 66,
          column: 47
        }
      },
      "39": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 70,
          column: 9
        }
      },
      "40": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 69,
          column: 83
        }
      },
      "41": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 71,
          column: 21
        }
      },
      "42": {
        start: {
          line: 74,
          column: 22
        },
        end: {
          line: 74,
          column: 56
        }
      },
      "43": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 77,
          column: 9
        }
      },
      "44": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 76,
          column: 72
        }
      },
      "45": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 78,
          column: 177
        }
      },
      "46": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 79,
          column: 101
        }
      },
      "47": {
        start: {
          line: 82,
          column: 22
        },
        end: {
          line: 82,
          column: 24
        }
      },
      "48": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 85,
          column: 9
        }
      },
      "49": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 84,
          column: 34
        }
      },
      "50": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 88,
          column: 9
        }
      },
      "51": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 87,
          column: 71
        }
      },
      "52": {
        start: {
          line: 89,
          column: 21
        },
        end: {
          line: 89,
          column: 39
        }
      },
      "53": {
        start: {
          line: 90,
          column: 30
        },
        end: {
          line: 99,
          column: 10
        }
      },
      "54": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 105,
          column: 10
        }
      },
      "55": {
        start: {
          line: 108,
          column: 29
        },
        end: {
          line: 111,
          column: 19
        }
      },
      "56": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 114,
          column: 9
        }
      },
      "57": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 113,
          column: 89
        }
      },
      "58": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 115,
          column: 28
        }
      },
      "59": {
        start: {
          line: 119,
          column: 29
        },
        end: {
          line: 119,
          column: 75
        }
      },
      "60": {
        start: {
          line: 120,
          column: 29
        },
        end: {
          line: 122,
          column: 19
        }
      },
      "61": {
        start: {
          line: 123,
          column: 8
        },
        end: {
          line: 125,
          column: 9
        }
      },
      "62": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 124,
          column: 89
        }
      },
      "63": {
        start: {
          line: 127,
          column: 8
        },
        end: {
          line: 131,
          column: 9
        }
      },
      "64": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 129,
          column: 55
        }
      },
      "65": {
        start: {
          line: 130,
          column: 12
        },
        end: {
          line: 130,
          column: 65
        }
      },
      "66": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 132,
          column: 28
        }
      },
      "67": {
        start: {
          line: 135,
          column: 23
        },
        end: {
          line: 135,
          column: 80
        }
      },
      "68": {
        start: {
          line: 136,
          column: 8
        },
        end: {
          line: 138,
          column: 9
        }
      },
      "69": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 137,
          column: 89
        }
      },
      "70": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 142,
          column: 9
        }
      },
      "71": {
        start: {
          line: 141,
          column: 12
        },
        end: {
          line: 141,
          column: 55
        }
      },
      "72": {
        start: {
          line: 145,
          column: 21
        },
        end: {
          line: 145,
          column: 81
        }
      },
      "73": {
        start: {
          line: 146,
          column: 8
        },
        end: {
          line: 151,
          column: 9
        }
      },
      "74": {
        start: {
          line: 147,
          column: 12
        },
        end: {
          line: 150,
          column: 13
        }
      },
      "75": {
        start: {
          line: 148,
          column: 16
        },
        end: {
          line: 148,
          column: 35
        }
      },
      "76": {
        start: {
          line: 149,
          column: 16
        },
        end: {
          line: 149,
          column: 82
        }
      },
      "77": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 154,
          column: 11
        }
      },
      "78": {
        start: {
          line: 157,
          column: 22
        },
        end: {
          line: 159,
          column: 9
        }
      },
      "79": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 166,
          column: 9
        }
      },
      "80": {
        start: {
          line: 161,
          column: 12
        },
        end: {
          line: 161,
          column: 30
        }
      },
      "81": {
        start: {
          line: 162,
          column: 12
        },
        end: {
          line: 163,
          column: 46
        }
      },
      "82": {
        start: {
          line: 163,
          column: 16
        },
        end: {
          line: 163,
          column: 46
        }
      },
      "83": {
        start: {
          line: 164,
          column: 12
        },
        end: {
          line: 165,
          column: 44
        }
      },
      "84": {
        start: {
          line: 165,
          column: 16
        },
        end: {
          line: 165,
          column: 44
        }
      },
      "85": {
        start: {
          line: 167,
          column: 8
        },
        end: {
          line: 169,
          column: 9
        }
      },
      "86": {
        start: {
          line: 168,
          column: 12
        },
        end: {
          line: 168,
          column: 71
        }
      },
      "87": {
        start: {
          line: 170,
          column: 8
        },
        end: {
          line: 175,
          column: 9
        }
      },
      "88": {
        start: {
          line: 171,
          column: 12
        },
        end: {
          line: 174,
          column: 14
        }
      },
      "89": {
        start: {
          line: 176,
          column: 21
        },
        end: {
          line: 176,
          column: 39
        }
      },
      "90": {
        start: {
          line: 177,
          column: 30
        },
        end: {
          line: 186,
          column: 10
        }
      },
      "91": {
        start: {
          line: 187,
          column: 8
        },
        end: {
          line: 192,
          column: 10
        }
      },
      "92": {
        start: {
          line: 195,
          column: 71
        },
        end: {
          line: 206,
          column: 10
        }
      },
      "93": {
        start: {
          line: 207,
          column: 29
        },
        end: {
          line: 207,
          column: 108
        }
      },
      "94": {
        start: {
          line: 208,
          column: 8
        },
        end: {
          line: 214,
          column: 10
        }
      },
      "95": {
        start: {
          line: 218,
          column: 25
        },
        end: {
          line: 218,
          column: 82
        }
      },
      "96": {
        start: {
          line: 219,
          column: 8
        },
        end: {
          line: 226,
          column: 9
        }
      },
      "97": {
        start: {
          line: 220,
          column: 12
        },
        end: {
          line: 220,
          column: 95
        }
      },
      "98": {
        start: {
          line: 221,
          column: 12
        },
        end: {
          line: 221,
          column: 45
        }
      },
      "99": {
        start: {
          line: 222,
          column: 12
        },
        end: {
          line: 222,
          column: 49
        }
      },
      "100": {
        start: {
          line: 223,
          column: 12
        },
        end: {
          line: 223,
          column: 78
        }
      },
      "101": {
        start: {
          line: 224,
          column: 12
        },
        end: {
          line: 224,
          column: 45
        }
      },
      "102": {
        start: {
          line: 225,
          column: 12
        },
        end: {
          line: 225,
          column: 35
        }
      },
      "103": {
        start: {
          line: 227,
          column: 28
        },
        end: {
          line: 231,
          column: 10
        }
      },
      "104": {
        start: {
          line: 232,
          column: 8
        },
        end: {
          line: 232,
          column: 34
        }
      },
      "105": {
        start: {
          line: 235,
          column: 8
        },
        end: {
          line: 235,
          column: 98
        }
      },
      "106": {
        start: {
          line: 239,
          column: 26
        },
        end: {
          line: 239,
          column: 87
        }
      },
      "107": {
        start: {
          line: 240,
          column: 23
        },
        end: {
          line: 240,
          column: 74
        }
      },
      "108": {
        start: {
          line: 241,
          column: 8
        },
        end: {
          line: 243,
          column: 9
        }
      },
      "109": {
        start: {
          line: 242,
          column: 12
        },
        end: {
          line: 242,
          column: 100
        }
      },
      "110": {
        start: {
          line: 244,
          column: 8
        },
        end: {
          line: 244,
          column: 123
        }
      },
      "111": {
        start: {
          line: 250,
          column: 8
        },
        end: {
          line: 250,
          column: 88
        }
      },
      "112": {
        start: {
          line: 254,
          column: 29
        },
        end: {
          line: 254,
          column: 82
        }
      },
      "113": {
        start: {
          line: 255,
          column: 8
        },
        end: {
          line: 257,
          column: 9
        }
      },
      "114": {
        start: {
          line: 256,
          column: 12
        },
        end: {
          line: 256,
          column: 93
        }
      },
      "115": {
        start: {
          line: 259,
          column: 8
        },
        end: {
          line: 259,
          column: 79
        }
      },
      "116": {
        start: {
          line: 260,
          column: 8
        },
        end: {
          line: 260,
          column: 34
        }
      },
      "117": {
        start: {
          line: 261,
          column: 8
        },
        end: {
          line: 295,
          column: 9
        }
      },
      "118": {
        start: {
          line: 263,
          column: 28
        },
        end: {
          line: 265,
          column: 14
        }
      },
      "119": {
        start: {
          line: 266,
          column: 28
        },
        end: {
          line: 266,
          column: 29
        }
      },
      "120": {
        start: {
          line: 267,
          column: 25
        },
        end: {
          line: 267,
          column: 26
        }
      },
      "121": {
        start: {
          line: 270,
          column: 12
        },
        end: {
          line: 280,
          column: 13
        }
      },
      "122": {
        start: {
          line: 271,
          column: 16
        },
        end: {
          line: 279,
          column: 17
        }
      },
      "123": {
        start: {
          line: 272,
          column: 20
        },
        end: {
          line: 272,
          column: 113
        }
      },
      "124": {
        start: {
          line: 273,
          column: 20
        },
        end: {
          line: 273,
          column: 32
        }
      },
      "125": {
        start: {
          line: 276,
          column: 41
        },
        end: {
          line: 276,
          column: 97
        }
      },
      "126": {
        start: {
          line: 277,
          column: 20
        },
        end: {
          line: 277,
          column: 97
        }
      },
      "127": {
        start: {
          line: 278,
          column: 20
        },
        end: {
          line: 278,
          column: 29
        }
      },
      "128": {
        start: {
          line: 282,
          column: 12
        },
        end: {
          line: 282,
          column: 80
        }
      },
      "129": {
        start: {
          line: 283,
          column: 12
        },
        end: {
          line: 283,
          column: 45
        }
      },
      "130": {
        start: {
          line: 284,
          column: 12
        },
        end: {
          line: 284,
          column: 52
        }
      },
      "131": {
        start: {
          line: 285,
          column: 12
        },
        end: {
          line: 285,
          column: 46
        }
      },
      "132": {
        start: {
          line: 286,
          column: 12
        },
        end: {
          line: 286,
          column: 38
        }
      },
      "133": {
        start: {
          line: 287,
          column: 12
        },
        end: {
          line: 287,
          column: 114
        }
      },
      "134": {
        start: {
          line: 290,
          column: 12
        },
        end: {
          line: 290,
          column: 82
        }
      },
      "135": {
        start: {
          line: 291,
          column: 12
        },
        end: {
          line: 291,
          column: 38
        }
      },
      "136": {
        start: {
          line: 292,
          column: 33
        },
        end: {
          line: 292,
          column: 89
        }
      },
      "137": {
        start: {
          line: 293,
          column: 12
        },
        end: {
          line: 293,
          column: 99
        }
      },
      "138": {
        start: {
          line: 294,
          column: 12
        },
        end: {
          line: 294,
          column: 24
        }
      },
      "139": {
        start: {
          line: 298,
          column: 0
        },
        end: {
          line: 298,
          column: 52
        }
      },
      "140": {
        start: {
          line: 299,
          column: 0
        },
        end: {
          line: 306,
          column: 25
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 46
          },
          end: {
            line: 2,
            column: 47
          }
        },
        loc: {
          start: {
            line: 2,
            column: 87
          },
          end: {
            line: 7,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 8,
            column: 46
          },
          end: {
            line: 8,
            column: 47
          }
        },
        loc: {
          start: {
            line: 8,
            column: 62
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 8
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 11,
            column: 40
          },
          end: {
            line: 11,
            column: 41
          }
        },
        loc: {
          start: {
            line: 11,
            column: 73
          },
          end: {
            line: 13,
            column: 1
          }
        },
        line: 11
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 12,
            column: 11
          },
          end: {
            line: 12,
            column: 12
          }
        },
        loc: {
          start: {
            line: 12,
            column: 34
          },
          end: {
            line: 12,
            column: 73
          }
        },
        line: 12
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 29,
            column: 4
          },
          end: {
            line: 29,
            column: 5
          }
        },
        loc: {
          start: {
            line: 29,
            column: 72
          },
          end: {
            line: 33,
            column: 5
          }
        },
        line: 29
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 35,
            column: 4
          },
          end: {
            line: 35,
            column: 5
          }
        },
        loc: {
          start: {
            line: 35,
            column: 39
          },
          end: {
            line: 38,
            column: 5
          }
        },
        line: 35
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 39,
            column: 5
          }
        },
        loc: {
          start: {
            line: 39,
            column: 55
          },
          end: {
            line: 42,
            column: 5
          }
        },
        line: 39
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 43,
            column: 4
          },
          end: {
            line: 43,
            column: 5
          }
        },
        loc: {
          start: {
            line: 43,
            column: 49
          },
          end: {
            line: 46,
            column: 5
          }
        },
        line: 43
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 47,
            column: 4
          },
          end: {
            line: 47,
            column: 5
          }
        },
        loc: {
          start: {
            line: 47,
            column: 48
          },
          end: {
            line: 52,
            column: 5
          }
        },
        line: 47
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 54,
            column: 4
          },
          end: {
            line: 54,
            column: 5
          }
        },
        loc: {
          start: {
            line: 54,
            column: 42
          },
          end: {
            line: 72,
            column: 5
          }
        },
        line: 54
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 73,
            column: 4
          },
          end: {
            line: 73,
            column: 5
          }
        },
        loc: {
          start: {
            line: 73,
            column: 60
          },
          end: {
            line: 80,
            column: 5
          }
        },
        line: 73
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 81,
            column: 4
          },
          end: {
            line: 81,
            column: 5
          }
        },
        loc: {
          start: {
            line: 81,
            column: 59
          },
          end: {
            line: 106,
            column: 5
          }
        },
        line: 81
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 107,
            column: 4
          },
          end: {
            line: 107,
            column: 5
          }
        },
        loc: {
          start: {
            line: 107,
            column: 22
          },
          end: {
            line: 116,
            column: 5
          }
        },
        line: 107
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 117,
            column: 4
          },
          end: {
            line: 117,
            column: 5
          }
        },
        loc: {
          start: {
            line: 117,
            column: 38
          },
          end: {
            line: 133,
            column: 5
          }
        },
        line: 117
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 134,
            column: 4
          },
          end: {
            line: 134,
            column: 5
          }
        },
        loc: {
          start: {
            line: 134,
            column: 33
          },
          end: {
            line: 143,
            column: 5
          }
        },
        line: 134
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 144,
            column: 4
          },
          end: {
            line: 144,
            column: 5
          }
        },
        loc: {
          start: {
            line: 144,
            column: 42
          },
          end: {
            line: 155,
            column: 5
          }
        },
        line: 144
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 156,
            column: 4
          },
          end: {
            line: 156,
            column: 5
          }
        },
        loc: {
          start: {
            line: 156,
            column: 82
          },
          end: {
            line: 193,
            column: 5
          }
        },
        line: 156
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 194,
            column: 4
          },
          end: {
            line: 194,
            column: 5
          }
        },
        loc: {
          start: {
            line: 194,
            column: 21
          },
          end: {
            line: 215,
            column: 5
          }
        },
        line: 194
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 217,
            column: 4
          },
          end: {
            line: 217,
            column: 5
          }
        },
        loc: {
          start: {
            line: 217,
            column: 38
          },
          end: {
            line: 233,
            column: 5
          }
        },
        line: 217
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 234,
            column: 4
          },
          end: {
            line: 234,
            column: 5
          }
        },
        loc: {
          start: {
            line: 234,
            column: 27
          },
          end: {
            line: 236,
            column: 5
          }
        },
        line: 234
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 237,
            column: 4
          },
          end: {
            line: 237,
            column: 5
          }
        },
        loc: {
          start: {
            line: 237,
            column: 62
          },
          end: {
            line: 251,
            column: 5
          }
        },
        line: 237
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 253,
            column: 4
          },
          end: {
            line: 253,
            column: 5
          }
        },
        loc: {
          start: {
            line: 253,
            column: 46
          },
          end: {
            line: 296,
            column: 5
          }
        },
        line: 253
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 17
          },
          end: {
            line: 7,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 18
          },
          end: {
            line: 2,
            column: 22
          }
        }, {
          start: {
            line: 2,
            column: 26
          },
          end: {
            line: 2,
            column: 41
          }
        }, {
          start: {
            line: 2,
            column: 46
          },
          end: {
            line: 7,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 34
          },
          end: {
            line: 3,
            column: 125
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 42
          },
          end: {
            line: 3,
            column: 48
          }
        }, {
          start: {
            line: 3,
            column: 51
          },
          end: {
            line: 3,
            column: 125
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 51
          },
          end: {
            line: 3,
            column: 125
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 67
          },
          end: {
            line: 3,
            column: 118
          }
        }, {
          start: {
            line: 3,
            column: 121
          },
          end: {
            line: 3,
            column: 125
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 4,
            column: 4
          },
          end: {
            line: 5,
            column: 150
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 4,
            column: 4
          },
          end: {
            line: 5,
            column: 150
          }
        }, {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 150
          }
        }],
        line: 4
      },
      "4": {
        loc: {
          start: {
            line: 4,
            column: 8
          },
          end: {
            line: 4,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 4,
            column: 8
          },
          end: {
            line: 4,
            column: 35
          }
        }, {
          start: {
            line: 4,
            column: 39
          },
          end: {
            line: 4,
            column: 77
          }
        }],
        line: 4
      },
      "5": {
        loc: {
          start: {
            line: 5,
            column: 58
          },
          end: {
            line: 5,
            column: 150
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 5,
            column: 58
          },
          end: {
            line: 5,
            column: 150
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 5
      },
      "6": {
        loc: {
          start: {
            line: 5,
            column: 85
          },
          end: {
            line: 5,
            column: 149
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 86
          },
          end: {
            line: 5,
            column: 143
          }
        }, {
          start: {
            line: 5,
            column: 148
          },
          end: {
            line: 5,
            column: 149
          }
        }],
        line: 5
      },
      "7": {
        loc: {
          start: {
            line: 5,
            column: 86
          },
          end: {
            line: 5,
            column: 143
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 5,
            column: 94
          },
          end: {
            line: 5,
            column: 98
          }
        }, {
          start: {
            line: 5,
            column: 101
          },
          end: {
            line: 5,
            column: 143
          }
        }],
        line: 5
      },
      "8": {
        loc: {
          start: {
            line: 5,
            column: 101
          },
          end: {
            line: 5,
            column: 143
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 5,
            column: 109
          },
          end: {
            line: 5,
            column: 126
          }
        }, {
          start: {
            line: 5,
            column: 129
          },
          end: {
            line: 5,
            column: 143
          }
        }],
        line: 5
      },
      "9": {
        loc: {
          start: {
            line: 6,
            column: 11
          },
          end: {
            line: 6,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 6,
            column: 11
          },
          end: {
            line: 6,
            column: 16
          }
        }, {
          start: {
            line: 6,
            column: 20
          },
          end: {
            line: 6,
            column: 21
          }
        }, {
          start: {
            line: 6,
            column: 25
          },
          end: {
            line: 6,
            column: 62
          }
        }],
        line: 6
      },
      "10": {
        loc: {
          start: {
            line: 8,
            column: 17
          },
          end: {
            line: 10,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 8,
            column: 18
          },
          end: {
            line: 8,
            column: 22
          }
        }, {
          start: {
            line: 8,
            column: 26
          },
          end: {
            line: 8,
            column: 41
          }
        }, {
          start: {
            line: 8,
            column: 46
          },
          end: {
            line: 10,
            column: 1
          }
        }],
        line: 8
      },
      "11": {
        loc: {
          start: {
            line: 9,
            column: 4
          },
          end: {
            line: 9,
            column: 109
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 9,
            column: 4
          },
          end: {
            line: 9,
            column: 109
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 9
      },
      "12": {
        loc: {
          start: {
            line: 9,
            column: 8
          },
          end: {
            line: 9,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 9,
            column: 8
          },
          end: {
            line: 9,
            column: 35
          }
        }, {
          start: {
            line: 9,
            column: 39
          },
          end: {
            line: 9,
            column: 77
          }
        }],
        line: 9
      },
      "13": {
        loc: {
          start: {
            line: 11,
            column: 14
          },
          end: {
            line: 13,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 11,
            column: 15
          },
          end: {
            line: 11,
            column: 19
          }
        }, {
          start: {
            line: 11,
            column: 23
          },
          end: {
            line: 11,
            column: 35
          }
        }, {
          start: {
            line: 11,
            column: 40
          },
          end: {
            line: 13,
            column: 1
          }
        }],
        line: 11
      },
      "14": {
        loc: {
          start: {
            line: 62,
            column: 20
          },
          end: {
            line: 64,
            column: 78
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 63,
            column: 18
          },
          end: {
            line: 63,
            column: 68
          }
        }, {
          start: {
            line: 64,
            column: 18
          },
          end: {
            line: 64,
            column: 78
          }
        }],
        line: 62
      },
      "15": {
        loc: {
          start: {
            line: 64,
            column: 18
          },
          end: {
            line: 64,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 64,
            column: 18
          },
          end: {
            line: 64,
            column: 28
          }
        }, {
          start: {
            line: 64,
            column: 32
          },
          end: {
            line: 64,
            column: 78
          }
        }],
        line: 64
      },
      "16": {
        loc: {
          start: {
            line: 68,
            column: 8
          },
          end: {
            line: 70,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 68,
            column: 8
          },
          end: {
            line: 70,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 68
      },
      "17": {
        loc: {
          start: {
            line: 75,
            column: 8
          },
          end: {
            line: 77,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 75,
            column: 8
          },
          end: {
            line: 77,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 75
      },
      "18": {
        loc: {
          start: {
            line: 81,
            column: 18
          },
          end: {
            line: 81,
            column: 26
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 81,
            column: 25
          },
          end: {
            line: 81,
            column: 26
          }
        }],
        line: 81
      },
      "19": {
        loc: {
          start: {
            line: 81,
            column: 28
          },
          end: {
            line: 81,
            column: 38
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 81,
            column: 36
          },
          end: {
            line: 81,
            column: 38
          }
        }],
        line: 81
      },
      "20": {
        loc: {
          start: {
            line: 83,
            column: 8
          },
          end: {
            line: 85,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 83,
            column: 8
          },
          end: {
            line: 85,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 83
      },
      "21": {
        loc: {
          start: {
            line: 86,
            column: 8
          },
          end: {
            line: 88,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 86,
            column: 8
          },
          end: {
            line: 88,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 86
      },
      "22": {
        loc: {
          start: {
            line: 112,
            column: 8
          },
          end: {
            line: 114,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 112,
            column: 8
          },
          end: {
            line: 114,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 112
      },
      "23": {
        loc: {
          start: {
            line: 123,
            column: 8
          },
          end: {
            line: 125,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 123,
            column: 8
          },
          end: {
            line: 125,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 123
      },
      "24": {
        loc: {
          start: {
            line: 127,
            column: 8
          },
          end: {
            line: 131,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 127,
            column: 8
          },
          end: {
            line: 131,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 127
      },
      "25": {
        loc: {
          start: {
            line: 127,
            column: 12
          },
          end: {
            line: 127,
            column: 105
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 127,
            column: 12
          },
          end: {
            line: 127,
            column: 27
          }
        }, {
          start: {
            line: 127,
            column: 31
          },
          end: {
            line: 127,
            column: 105
          }
        }],
        line: 127
      },
      "26": {
        loc: {
          start: {
            line: 136,
            column: 8
          },
          end: {
            line: 138,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 136,
            column: 8
          },
          end: {
            line: 138,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 136
      },
      "27": {
        loc: {
          start: {
            line: 140,
            column: 8
          },
          end: {
            line: 142,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 140,
            column: 8
          },
          end: {
            line: 142,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 140
      },
      "28": {
        loc: {
          start: {
            line: 147,
            column: 12
          },
          end: {
            line: 150,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 147,
            column: 12
          },
          end: {
            line: 150,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 147
      },
      "29": {
        loc: {
          start: {
            line: 156,
            column: 21
          },
          end: {
            line: 156,
            column: 29
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 156,
            column: 28
          },
          end: {
            line: 156,
            column: 29
          }
        }],
        line: 156
      },
      "30": {
        loc: {
          start: {
            line: 156,
            column: 31
          },
          end: {
            line: 156,
            column: 41
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 156,
            column: 39
          },
          end: {
            line: 156,
            column: 41
          }
        }],
        line: 156
      },
      "31": {
        loc: {
          start: {
            line: 160,
            column: 8
          },
          end: {
            line: 166,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 160,
            column: 8
          },
          end: {
            line: 166,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 160
      },
      "32": {
        loc: {
          start: {
            line: 160,
            column: 12
          },
          end: {
            line: 160,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 160,
            column: 12
          },
          end: {
            line: 160,
            column: 21
          }
        }, {
          start: {
            line: 160,
            column: 25
          },
          end: {
            line: 160,
            column: 32
          }
        }],
        line: 160
      },
      "33": {
        loc: {
          start: {
            line: 162,
            column: 12
          },
          end: {
            line: 163,
            column: 46
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 162,
            column: 12
          },
          end: {
            line: 163,
            column: 46
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 162
      },
      "34": {
        loc: {
          start: {
            line: 164,
            column: 12
          },
          end: {
            line: 165,
            column: 44
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 164,
            column: 12
          },
          end: {
            line: 165,
            column: 44
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 164
      },
      "35": {
        loc: {
          start: {
            line: 167,
            column: 8
          },
          end: {
            line: 169,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 167,
            column: 8
          },
          end: {
            line: 169,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 167
      },
      "36": {
        loc: {
          start: {
            line: 170,
            column: 8
          },
          end: {
            line: 175,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 170,
            column: 8
          },
          end: {
            line: 175,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 170
      },
      "37": {
        loc: {
          start: {
            line: 207,
            column: 29
          },
          end: {
            line: 207,
            column: 108
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 207,
            column: 59
          },
          end: {
            line: 207,
            column: 104
          }
        }, {
          start: {
            line: 207,
            column: 107
          },
          end: {
            line: 207,
            column: 108
          }
        }],
        line: 207
      },
      "38": {
        loc: {
          start: {
            line: 219,
            column: 8
          },
          end: {
            line: 226,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 219,
            column: 8
          },
          end: {
            line: 226,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 219
      },
      "39": {
        loc: {
          start: {
            line: 220,
            column: 30
          },
          end: {
            line: 220,
            column: 94
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 220,
            column: 39
          },
          end: {
            line: 220,
            column: 76
          }
        }, {
          start: {
            line: 220,
            column: 79
          },
          end: {
            line: 220,
            column: 94
          }
        }],
        line: 220
      },
      "40": {
        loc: {
          start: {
            line: 223,
            column: 36
          },
          end: {
            line: 223,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 223,
            column: 36
          },
          end: {
            line: 223,
            column: 52
          }
        }, {
          start: {
            line: 223,
            column: 56
          },
          end: {
            line: 223,
            column: 77
          }
        }],
        line: 223
      },
      "41": {
        loc: {
          start: {
            line: 229,
            column: 20
          },
          end: {
            line: 229,
            column: 78
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 229,
            column: 29
          },
          end: {
            line: 229,
            column: 66
          }
        }, {
          start: {
            line: 229,
            column: 69
          },
          end: {
            line: 229,
            column: 78
          }
        }],
        line: 229
      },
      "42": {
        loc: {
          start: {
            line: 241,
            column: 8
          },
          end: {
            line: 243,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 241,
            column: 8
          },
          end: {
            line: 243,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 241
      },
      "43": {
        loc: {
          start: {
            line: 255,
            column: 8
          },
          end: {
            line: 257,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 255,
            column: 8
          },
          end: {
            line: 257,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 255
      },
      "44": {
        loc: {
          start: {
            line: 276,
            column: 41
          },
          end: {
            line: 276,
            column: 97
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 276,
            column: 66
          },
          end: {
            line: 276,
            column: 79
          }
        }, {
          start: {
            line: 276,
            column: 82
          },
          end: {
            line: 276,
            column: 97
          }
        }],
        line: 276
      },
      "45": {
        loc: {
          start: {
            line: 292,
            column: 33
          },
          end: {
            line: 292,
            column: 89
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 292,
            column: 58
          },
          end: {
            line: 292,
            column: 71
          }
        }, {
          start: {
            line: 292,
            column: 74
          },
          end: {
            line: 292,
            column: 89
          }
        }],
        line: 292
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0, 0],
      "10": [0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0],
      "19": [0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0],
      "30": [0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0]
    },
    inputSourceMap: {
      file: "/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/notifications/notifications.service.ts",
      mappings: ";;;;;;;;;;;;;;;;AAAA,2CAAuE;AACvE,+CAA+C;AAC/C,uCAAwC;AACxC,uCAA2C;AAE3C,uEAIuC;AACvC,uEAAiF;AAIjF,+DAAmE;AAG5D,IAAM,oBAAoB,4BAA1B,MAAM,oBAAoB;IAKrB;IAEA;IAC8B;IAPvB,MAAM,GAAG,IAAI,eAAM,CAAC,sBAAoB,CAAC,IAAI,CAAC,CAAC;IAEhE,YAEU,iBAA8C,EAE9C,gBAA4C,EACd,iBAAwB;QAHtD,sBAAiB,GAAjB,iBAAiB,CAA6B;QAE9C,qBAAgB,GAAhB,gBAAgB,CAA4B;QACd,sBAAiB,GAAjB,iBAAiB,CAAO;IAC7D,CAAC;IAEJ,mDAAmD;IACnD,KAAK,CAAC,SAAS,CAAC,EAAU,EAAE,OAAe,EAAE,IAAY;QACvD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,oBAAoB,EAAE,KAAK,OAAO,YAAY,IAAI,EAAE,CAAC,CAAC;QACtE,gEAAgE;IAClE,CAAC;IAED,KAAK,CAAC,oBAAoB,CAAC,MAAc,EAAE,KAAa,EAAE,OAAe;QACvE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,qCAAqC,MAAM,KAAK,KAAK,eAAe,OAAO,EAAE,CAAC,CAAC;QAC/F,4DAA4D;IAC9D,CAAC;IAED,KAAK,CAAC,mBAAmB,CAAC,MAAc,EAAE,SAAiB;QACzD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,oCAAoC,MAAM,gBAAgB,SAAS,EAAE,CAAC,CAAC;QACvF,yCAAyC;IAC3C,CAAC;IAED,KAAK,CAAC,qBAAqB,CAAC,KAAa,EAAE,OAAe;QACxD,8CAA8C;QAC9C,MAAM,SAAS,GAAG,IAAA,oCAAoB,EAAC,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;QAE3D,IAAI,CAAC,MAAM,CAAC,GAAG,CACb,8BAA8B,SAAS,CAAC,KAAK,eAAe,SAAS,CAAC,OAAO,EAAE,CAChF,CAAC;QACF,kCAAkC;IACpC,CAAC;IAED,sCAAsC;IACtC,KAAK,CAAC,kBAAkB,CACtB,GAA0B,EAC1B,MAAc;QAEd,8CAA8C;QAC9C,MAAM,YAAY,GAAG,IAAA,oCAAoB,EAAC,GAAG,CAAC,CAAC;QAE/C,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,cAAc,EAAE,CAAC;QAEjE,MAAM,YAAY,GAAG,IAAI,IAAI,CAAC,iBAAiB,CAAC;YAC9C,GAAG,YAAY;YACf,SAAS,EAAE,IAAI,gBAAK,CAAC,QAAQ,CAAC,MAAM,CAAC;YACrC,WAAW;YACX,MAAM,EAAE,GAAG,CAAC,WAAW;gBACrB,CAAC,CAAC,wCAAkB,CAAC,SAAS;gBAC9B,CAAC,CAAC,GAAG,CAAC,MAAM,IAAI,wCAAkB,CAAC,KAAK;SAC3C,CAAC,CAAC;QAEH,MAAM,KAAK,GAAG,MAAM,YAAY,CAAC,IAAI,EAAE,CAAC;QAExC,mDAAmD;QACnD,IAAI,GAAG,CAAC,WAAW,EAAE,CAAC;YACpB,MAAM,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE,GAAG,CAAC,WAAW,CAAC,CAAC;QACzE,CAAC;QAED,OAAO,KAAK,CAAC;IACf,CAAC;IAED,KAAK,CAAC,oBAAoB,CAAC,cAAsB,EAAE,WAAiB;QAClE,MAAM,KAAK,GAAG,WAAW,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAEjD,IAAI,KAAK,GAAG,CAAC,EAAE,CAAC;YACd,MAAM,IAAI,KAAK,CAAC,0CAA0C,CAAC,CAAC;QAC9D,CAAC;QAED,MAAM,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAC9B,mBAAmB,EACnB,EAAE,cAAc,EAAE,EAClB,EAAE,KAAK,EAAE,gBAAgB,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,EAAE,OAAO,EAAE,EAAE,IAAI,EAAE,aAAa,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE,CAC9F,CAAC;QAEF,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,gBAAgB,cAAc,kBAAkB,WAAW,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;IAC/F,CAAC;IAED,KAAK,CAAC,OAAO,CACX,IAAI,GAAG,CAAC,EACR,KAAK,GAAG,EAAE,EACV,MAA2B,EAC3B,SAAkB;QAOlB,MAAM,KAAK,GAAQ,EAAE,CAAC;QAEtB,IAAI,MAAM,EAAE,CAAC;YACX,KAAK,CAAC,MAAM,GAAG,MAAM,CAAC;QACxB,CAAC;QAED,IAAI,SAAS,EAAE,CAAC;YACd,KAAK,CAAC,SAAS,GAAG,IAAI,gBAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;QAClD,CAAC;QAED,MAAM,IAAI,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC;QAEhC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;YACtC,IAAI,CAAC,iBAAiB;iBACnB,IAAI,CAAC,KAAK,CAAC;iBACX,IAAI,CAAC,EAAE,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC;iBACvB,IAAI,CAAC,IAAI,CAAC;iBACV,KAAK,CAAC,KAAK,CAAC;iBACZ,QAAQ,CAAC,WAAW,EAAE,YAAY,CAAC;iBACnC,IAAI,EAAE;YACT,IAAI,CAAC,iBAAiB,CAAC,cAAc,CAAC,KAAK,CAAC;SAC7C,CAAC,CAAC;QAEH,OAAO;YACL,IAAI;YACJ,KAAK;YACL,IAAI;YACJ,UAAU,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;SACrC,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,EAAU;QACtB,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,iBAAiB;aAC9C,QAAQ,CAAC,EAAE,CAAC;aACZ,QAAQ,CAAC,WAAW,EAAE,YAAY,CAAC;aACnC,IAAI,EAAE,CAAC;QAEV,IAAI,CAAC,YAAY,EAAE,CAAC;YAClB,MAAM,IAAI,0BAAiB,CAAC,wBAAwB,EAAE,YAAY,CAAC,CAAC;QACtE,CAAC;QAED,OAAO,YAAY,CAAC;IACtB,CAAC;IAED,KAAK,CAAC,kBAAkB,CAAC,EAAU,EAAE,GAA0B;QAC7D,8CAA8C;QAC9C,MAAM,YAAY,GAAG,IAAA,oCAAoB,EAAC,GAAG,CAAC,CAAC;QAE/C,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,iBAAiB;aAC9C,iBAAiB,CAAC,EAAE,EAAE,YAAY,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC;aAClD,IAAI,EAAE,CAAC;QAEV,IAAI,CAAC,YAAY,EAAE,CAAC;YAClB,MAAM,IAAI,0BAAiB,CAAC,wBAAwB,EAAE,YAAY,CAAC,CAAC;QACtE,CAAC;QAED,oCAAoC;QACpC,IAAI,GAAG,CAAC,WAAW,IAAI,YAAY,CAAC,MAAM,KAAK,wCAAkB,CAAC,SAAS,EAAE,CAAC;YAC5E,oCAAoC;YACpC,MAAM,IAAI,CAAC,2BAA2B,CAAC,EAAE,CAAC,CAAC;YAC3C,MAAM,IAAI,CAAC,oBAAoB,CAAC,EAAE,EAAE,GAAG,CAAC,WAAW,CAAC,CAAC;QACvD,CAAC;QAED,OAAO,YAAY,CAAC;IACtB,CAAC;IAED,KAAK,CAAC,kBAAkB,CAAC,EAAU;QACjC,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;QAEzE,IAAI,CAAC,MAAM,EAAE,CAAC;YACZ,MAAM,IAAI,0BAAiB,CAAC,wBAAwB,EAAE,YAAY,CAAC,CAAC;QACtE,CAAC;QAED,iCAAiC;QACjC,IAAI,MAAM,CAAC,MAAM,KAAK,wCAAkB,CAAC,SAAS,EAAE,CAAC;YACnD,MAAM,IAAI,CAAC,2BAA2B,CAAC,EAAE,CAAC,CAAC;QAC7C,CAAC;IACH,CAAC;IAED,KAAK,CAAC,2BAA2B,CAAC,EAAU;QAC1C,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC,CAAC;QAE1E,KAAK,MAAM,GAAG,IAAI,IAAI,EAAE,CAAC;YACvB,IAAI,GAAG,CAAC,IAAI,CAAC,cAAc,KAAK,EAAE,EAAE,CAAC;gBACnC,MAAM,GAAG,CAAC,MAAM,EAAE,CAAC;gBACnB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,4CAA4C,EAAE,EAAE,CAAC,CAAC;YACpE,CAAC;QACH,CAAC;QAED,MAAM,IAAI,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,EAAE,EAAE;YACjD,MAAM,EAAE,wCAAkB,CAAC,KAAK;SACjC,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,UAAU,CACd,IAAI,GAAG,CAAC,EACR,KAAK,GAAG,EAAE,EACV,SAAgB,EAChB,OAAc,EACd,SAAkB,EAClB,MAAe;QAOf,MAAM,KAAK,GAAQ;YACjB,MAAM,EAAE,EAAE,GAAG,EAAE,CAAC,wCAAkB,CAAC,IAAI,EAAE,wCAAkB,CAAC,MAAM,CAAC,EAAE;SACtE,CAAC;QAEF,IAAI,SAAS,IAAI,OAAO,EAAE,CAAC;YACzB,KAAK,CAAC,MAAM,GAAG,EAAE,CAAC;YAClB,IAAI,SAAS;gBAAE,KAAK,CAAC,MAAM,CAAC,IAAI,GAAG,SAAS,CAAC;YAC7C,IAAI,OAAO;gBAAE,KAAK,CAAC,MAAM,CAAC,IAAI,GAAG,OAAO,CAAC;QAC3C,CAAC;QAED,IAAI,SAAS,EAAE,CAAC;YACd,KAAK,CAAC,SAAS,GAAG,IAAI,gBAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;QAClD,CAAC;QAED,IAAI,MAAM,EAAE,CAAC;YACX,KAAK,CAAC,GAAG,GAAG;gBACV,EAAE,KAAK,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,GAAG,EAAE,EAAE;gBAC5C,EAAE,OAAO,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,GAAG,EAAE,EAAE;aAC/C,CAAC;QACJ,CAAC;QAED,MAAM,IAAI,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC;QAEhC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;YACtC,IAAI,CAAC,iBAAiB;iBACnB,IAAI,CAAC,KAAK,CAAC;iBACX,IAAI,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC;iBACpB,IAAI,CAAC,IAAI,CAAC;iBACV,KAAK,CAAC,KAAK,CAAC;iBACZ,QAAQ,CAAC,WAAW,EAAE,YAAY,CAAC;iBACnC,IAAI,EAAE;YACT,IAAI,CAAC,iBAAiB,CAAC,cAAc,CAAC,KAAK,CAAC;SAC7C,CAAC,CAAC;QAEH,OAAO;YACL,IAAI;YACJ,KAAK;YACL,IAAI;YACJ,UAAU,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;SACrC,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,QAAQ;QAOZ,MAAM,CAAC,SAAS,EAAE,WAAW,EAAE,cAAc,EAAE,YAAY,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;YAC/E,IAAI,CAAC,iBAAiB,CAAC,cAAc,CAAC;gBACpC,MAAM,EAAE,wCAAkB,CAAC,IAAI;aAChC,CAAC;YACF,IAAI,CAAC,iBAAiB,CAAC,cAAc,CAAC;gBACpC,MAAM,EAAE,wCAAkB,CAAC,MAAM;aAClC,CAAC;YACF,IAAI,CAAC,iBAAiB,CAAC,cAAc,CAAC;gBACpC,MAAM,EAAE,wCAAkB,CAAC,SAAS;aACrC,CAAC;YACF,IAAI,CAAC,gBAAgB,CAAC,cAAc,EAAE;SACvC,CAAC,CAAC;QAEH,MAAM,YAAY,GAChB,SAAS,GAAG,WAAW,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,GAAG,CAAC,SAAS,GAAG,WAAW,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAElF,OAAO;YACL,SAAS;YACT,WAAW;YACX,cAAc;YACd,YAAY;YACZ,YAAY;SACb,CAAC;IACJ,CAAC;IAED,0BAA0B;IAC1B,KAAK,CAAC,cAAc,CAAC,GAAsB,EAAE,MAAe;QAC1D,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC;QAE3E,IAAI,QAAQ,EAAE,CAAC;YACb,QAAQ,CAAC,MAAM,GAAG,MAAM,CAAC,CAAC,CAAC,IAAI,gBAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC;YACxE,QAAQ,CAAC,QAAQ,GAAG,GAAG,CAAC,QAAQ,CAAC;YACjC,QAAQ,CAAC,UAAU,GAAG,GAAG,CAAC,UAAU,CAAC;YACrC,QAAQ,CAAC,YAAY,GAAG,GAAG,CAAC,YAAY,IAAI,QAAQ,CAAC,YAAY,CAAC;YAClE,QAAQ,CAAC,UAAU,GAAG,IAAI,IAAI,EAAE,CAAC;YACjC,OAAO,QAAQ,CAAC,IAAI,EAAE,CAAC;QACzB,CAAC;QAED,MAAM,WAAW,GAAG,IAAI,IAAI,CAAC,gBAAgB,CAAC;YAC5C,GAAG,GAAG;YACN,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC,IAAI,gBAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,SAAS;YACvD,UAAU,EAAE,IAAI,IAAI,EAAE;SACvB,CAAC,CAAC;QAEH,OAAO,WAAW,CAAC,IAAI,EAAE,CAAC;IAC5B,CAAC;IAED,KAAK,CAAC,cAAc;QAClB,OAAO,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE,UAAU,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;IAC5F,CAAC;IAED,KAAK,CAAC,oBAAoB,CAAC,KAAa,EAAE,OAAe,EAAE,aAAqB;QAC9E,8CAA8C;QAC9C,MAAM,SAAS,GAAG,IAAA,oCAAoB,EAAC,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;QAE3D,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;QAEnE,IAAI,CAAC,MAAM,EAAE,CAAC;YACZ,MAAM,IAAI,0BAAiB,CAAC,wBAAwB,aAAa,YAAY,CAAC,CAAC;QACjF,CAAC;QAED,IAAI,CAAC,MAAM,CAAC,GAAG,CACb,uCAAuC,aAAa,KAAK,SAAS,CAAC,KAAK,MAAM,SAAS,CAAC,OAAO,EAAE,CAClG,CAAC;QAEF,uDAAuD;QACvD,8DAA8D;QAE9D,gEAAgE;QAChE,6EAA6E;QAC7E,kEAAkE;QAClE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,sCAAsC,MAAM,CAAC,QAAQ,SAAS,CAAC,CAAC;IAClF,CAAC;IAED,2DAA2D;IAC3D,KAAK,CAAC,mBAAmB,CAAC,cAAsB;QAC9C,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC;QAE3E,IAAI,CAAC,YAAY,EAAE,CAAC;YAClB,MAAM,IAAI,0BAAiB,CAAC,gBAAgB,cAAc,YAAY,CAAC,CAAC;QAC1E,CAAC;QAED,2BAA2B;QAC3B,YAAY,CAAC,MAAM,GAAG,wCAAkB,CAAC,OAAO,CAAC;QACjD,MAAM,YAAY,CAAC,IAAI,EAAE,CAAC;QAE1B,IAAI,CAAC;YACH,+BAA+B;YAC/B,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC;gBAC/C,YAAY,EAAE,KAAK;aACpB,CAAC,CAAC;YAEH,IAAI,SAAS,GAAG,CAAC,CAAC;YAClB,IAAI,MAAM,GAAG,CAAC,CAAC;YAEf,gDAAgD;YAChD,6BAA6B;YAC7B,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE,CAAC;gBAC7B,IAAI,CAAC;oBACH,IAAI,CAAC,MAAM,CAAC,GAAG,CACb,cAAc,MAAM,CAAC,QAAQ,YAAY,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK,CAC5E,CAAC;oBACF,SAAS,EAAE,CAAC;gBACd,CAAC;gBAAC,OAAO,KAAK,EAAE,CAAC;oBACf,MAAM,YAAY,GAAG,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe,CAAC;oBAC9E,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,4BAA4B,MAAM,CAAC,GAAG,KAAK,YAAY,EAAE,CAAC,CAAC;oBAC7E,MAAM,EAAE,CAAC;gBACX,CAAC;YACH,CAAC;YAED,0CAA0C;YAC1C,YAAY,CAAC,MAAM,GAAG,wCAAkB,CAAC,IAAI,CAAC;YAC9C,YAAY,CAAC,MAAM,GAAG,IAAI,IAAI,EAAE,CAAC;YACjC,YAAY,CAAC,cAAc,GAAG,SAAS,CAAC;YACxC,YAAY,CAAC,WAAW,GAAG,MAAM,CAAC;YAClC,MAAM,YAAY,CAAC,IAAI,EAAE,CAAC;YAE1B,IAAI,CAAC,MAAM,CAAC,GAAG,CACb,gBAAgB,cAAc,eAAe,SAAS,eAAe,MAAM,SAAS,CACrF,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,YAAY,CAAC,MAAM,GAAG,wCAAkB,CAAC,MAAM,CAAC;YAChD,MAAM,YAAY,CAAC,IAAI,EAAE,CAAC;YAC1B,MAAM,YAAY,GAAG,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe,CAAC;YAC9E,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,kCAAkC,cAAc,KAAK,YAAY,EAAE,CAAC,CAAC;YACvF,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;CACF,CAAA;AAzXY,oDAAoB;+BAApB,oBAAoB;IADhC,IAAA,mBAAU,GAAE;IAKR,WAAA,IAAA,sBAAW,EAAC,kCAAY,CAAC,IAAI,CAAC,CAAA;IAE9B,WAAA,IAAA,sBAAW,EAAC,iCAAW,CAAC,IAAI,CAAC,CAAA;IAE7B,WAAA,IAAA,kBAAW,EAAC,eAAe,CAAC,CAAA;qCAHF,gBAAK;QAEN,gBAAK;GAPtB,oBAAoB,CAyXhC",
      names: [],
      sources: ["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/modules/notifications/notifications.service.ts"],
      sourcesContent: ["import { Injectable, Logger, NotFoundException } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, Types } from 'mongoose';\nimport { InjectQueue } from '@nestjs/bull';\nimport { Queue } from 'bull';\nimport {\n  Notification,\n  NotificationDocument,\n  NotificationStatus,\n} from './schemas/notification.schema';\nimport { DeviceToken, DeviceTokenDocument } from './schemas/device-token.schema';\nimport { CreateNotificationDto } from './dto/create-notification.dto';\nimport { UpdateNotificationDto } from './dto/update-notification.dto';\nimport { RegisterDeviceDto } from './dto/register-device.dto';\nimport { sanitizeNotification } from '@common/utils/sanitize.util';\n\n@Injectable()\nexport class NotificationsService {\n  private readonly logger = new Logger(NotificationsService.name);\n\n  constructor(\n    @InjectModel(Notification.name)\n    private notificationModel: Model<NotificationDocument>,\n    @InjectModel(DeviceToken.name)\n    private deviceTokenModel: Model<DeviceTokenDocument>,\n    @InjectQueue('notifications') private notificationQueue: Queue,\n  ) {}\n\n  // Legacy methods (kept for backward compatibility)\n  async sendEmail(to: string, subject: string, body: string): Promise<void> {\n    this.logger.log(`Sending email to ${to}: ${subject} - Body: ${body}`);\n    // TODO: Implement email sending logic (SendGrid, AWS SES, etc.)\n  }\n\n  async sendPushNotification(userId: string, title: string, message: string): Promise<void> {\n    this.logger.log(`Sending push notification to user ${userId}: ${title} - Message: ${message}`);\n    // TODO: Implement push notification logic (FCM, APNS, etc.)\n  }\n\n  async sendSessionReminder(userId: string, sessionId: string): Promise<void> {\n    this.logger.log(`Sending session reminder to user ${userId} for session ${sessionId}`);\n    // TODO: Implement session reminder logic\n  }\n\n  async broadcastNotification(title: string, message: string): Promise<void> {\n    // Sanitize user inputs to prevent XSS attacks\n    const sanitized = sanitizeNotification({ title, message });\n\n    this.logger.log(\n      `Broadcasting notification: ${sanitized.title} - Message: ${sanitized.message}`,\n    );\n    // TODO: Implement broadcast logic\n  }\n\n  // New notification management methods\n  async createNotification(\n    dto: CreateNotificationDto,\n    userId: string,\n  ): Promise<NotificationDocument> {\n    // Sanitize user inputs to prevent XSS attacks\n    const sanitizedDto = sanitizeNotification(dto);\n\n    const deviceCount = await this.deviceTokenModel.countDocuments();\n\n    const notification = new this.notificationModel({\n      ...sanitizedDto,\n      createdBy: new Types.ObjectId(userId),\n      deviceCount,\n      status: dto.scheduledAt\n        ? NotificationStatus.SCHEDULED\n        : dto.status || NotificationStatus.DRAFT,\n    });\n\n    const saved = await notification.save();\n\n    // Schedule notification if scheduledAt is provided\n    if (dto.scheduledAt) {\n      await this.scheduleNotification(saved._id.toString(), dto.scheduledAt);\n    }\n\n    return saved;\n  }\n\n  async scheduleNotification(notificationId: string, scheduledAt: Date): Promise<void> {\n    const delay = scheduledAt.getTime() - Date.now();\n\n    if (delay < 0) {\n      throw new Error('Cannot schedule notification in the past');\n    }\n\n    await this.notificationQueue.add(\n      'send-notification',\n      { notificationId },\n      { delay, removeOnComplete: true, attempts: 3, backoff: { type: 'exponential', delay: 5000 } },\n    );\n\n    this.logger.log(`Notification ${notificationId} scheduled for ${scheduledAt.toISOString()}`);\n  }\n\n  async findAll(\n    page = 1,\n    limit = 10,\n    status?: NotificationStatus,\n    createdBy?: string,\n  ): Promise<{\n    data: NotificationDocument[];\n    total: number;\n    page: number;\n    totalPages: number;\n  }> {\n    const query: any = {};\n\n    if (status) {\n      query.status = status;\n    }\n\n    if (createdBy) {\n      query.createdBy = new Types.ObjectId(createdBy);\n    }\n\n    const skip = (page - 1) * limit;\n\n    const [data, total] = await Promise.all([\n      this.notificationModel\n        .find(query)\n        .sort({ createdAt: -1 })\n        .skip(skip)\n        .limit(limit)\n        .populate('createdBy', 'name email')\n        .exec(),\n      this.notificationModel.countDocuments(query),\n    ]);\n\n    return {\n      data,\n      total,\n      page,\n      totalPages: Math.ceil(total / limit),\n    };\n  }\n\n  async findOne(id: string): Promise<NotificationDocument> {\n    const notification = await this.notificationModel\n      .findById(id)\n      .populate('createdBy', 'name email')\n      .exec();\n\n    if (!notification) {\n      throw new NotFoundException(`Notification with ID ${id} not found`);\n    }\n\n    return notification;\n  }\n\n  async updateNotification(id: string, dto: UpdateNotificationDto): Promise<NotificationDocument> {\n    // Sanitize user inputs to prevent XSS attacks\n    const sanitizedDto = sanitizeNotification(dto);\n\n    const notification = await this.notificationModel\n      .findByIdAndUpdate(id, sanitizedDto, { new: true })\n      .exec();\n\n    if (!notification) {\n      throw new NotFoundException(`Notification with ID ${id} not found`);\n    }\n\n    // Reschedule if scheduledAt changed\n    if (dto.scheduledAt && notification.status === NotificationStatus.SCHEDULED) {\n      // Remove old job and create new one\n      await this.cancelScheduledNotification(id);\n      await this.scheduleNotification(id, dto.scheduledAt);\n    }\n\n    return notification;\n  }\n\n  async deleteNotification(id: string): Promise<void> {\n    const result = await this.notificationModel.findByIdAndDelete(id).exec();\n\n    if (!result) {\n      throw new NotFoundException(`Notification with ID ${id} not found`);\n    }\n\n    // Cancel scheduled job if exists\n    if (result.status === NotificationStatus.SCHEDULED) {\n      await this.cancelScheduledNotification(id);\n    }\n  }\n\n  async cancelScheduledNotification(id: string): Promise<void> {\n    const jobs = await this.notificationQueue.getJobs(['delayed', 'waiting']);\n\n    for (const job of jobs) {\n      if (job.data.notificationId === id) {\n        await job.remove();\n        this.logger.log(`Cancelled scheduled notification job for ${id}`);\n      }\n    }\n\n    await this.notificationModel.findByIdAndUpdate(id, {\n      status: NotificationStatus.DRAFT,\n    });\n  }\n\n  async getHistory(\n    page = 1,\n    limit = 10,\n    startDate?: Date,\n    endDate?: Date,\n    createdBy?: string,\n    search?: string,\n  ): Promise<{\n    data: NotificationDocument[];\n    total: number;\n    page: number;\n    totalPages: number;\n  }> {\n    const query: any = {\n      status: { $in: [NotificationStatus.SENT, NotificationStatus.FAILED] },\n    };\n\n    if (startDate || endDate) {\n      query.sentAt = {};\n      if (startDate) query.sentAt.$gte = startDate;\n      if (endDate) query.sentAt.$lte = endDate;\n    }\n\n    if (createdBy) {\n      query.createdBy = new Types.ObjectId(createdBy);\n    }\n\n    if (search) {\n      query.$or = [\n        { title: { $regex: search, $options: 'i' } },\n        { message: { $regex: search, $options: 'i' } },\n      ];\n    }\n\n    const skip = (page - 1) * limit;\n\n    const [data, total] = await Promise.all([\n      this.notificationModel\n        .find(query)\n        .sort({ sentAt: -1 })\n        .skip(skip)\n        .limit(limit)\n        .populate('createdBy', 'name email')\n        .exec(),\n      this.notificationModel.countDocuments(query),\n    ]);\n\n    return {\n      data,\n      total,\n      page,\n      totalPages: Math.ceil(total / limit),\n    };\n  }\n\n  async getStats(): Promise<{\n    totalSent: number;\n    totalFailed: number;\n    totalScheduled: number;\n    totalDevices: number;\n    deliveryRate: number;\n  }> {\n    const [totalSent, totalFailed, totalScheduled, totalDevices] = await Promise.all([\n      this.notificationModel.countDocuments({\n        status: NotificationStatus.SENT,\n      }),\n      this.notificationModel.countDocuments({\n        status: NotificationStatus.FAILED,\n      }),\n      this.notificationModel.countDocuments({\n        status: NotificationStatus.SCHEDULED,\n      }),\n      this.deviceTokenModel.countDocuments(),\n    ]);\n\n    const deliveryRate =\n      totalSent + totalFailed > 0 ? (totalSent / (totalSent + totalFailed)) * 100 : 0;\n\n    return {\n      totalSent,\n      totalFailed,\n      totalScheduled,\n      totalDevices,\n      deliveryRate,\n    };\n  }\n\n  // Device token management\n  async registerDevice(dto: RegisterDeviceDto, userId?: string): Promise<DeviceTokenDocument> {\n    const existing = await this.deviceTokenModel.findOne({ token: dto.token });\n\n    if (existing) {\n      existing.userId = userId ? new Types.ObjectId(userId) : existing.userId;\n      existing.platform = dto.platform;\n      existing.appVersion = dto.appVersion;\n      existing.isTestDevice = dto.isTestDevice ?? existing.isTestDevice;\n      existing.lastActive = new Date();\n      return existing.save();\n    }\n\n    const deviceToken = new this.deviceTokenModel({\n      ...dto,\n      userId: userId ? new Types.ObjectId(userId) : undefined,\n      lastActive: new Date(),\n    });\n\n    return deviceToken.save();\n  }\n\n  async getTestDevices(): Promise<DeviceTokenDocument[]> {\n    return this.deviceTokenModel.find({ isTestDevice: true }).sort({ lastActive: -1 }).exec();\n  }\n\n  async sendTestNotification(title: string, message: string, deviceTokenId: string): Promise<void> {\n    // Sanitize user inputs to prevent XSS attacks\n    const sanitized = sanitizeNotification({ title, message });\n\n    const device = await this.deviceTokenModel.findById(deviceTokenId);\n\n    if (!device) {\n      throw new NotFoundException(`Device token with ID ${deviceTokenId} not found`);\n    }\n\n    this.logger.log(\n      `Sending test notification to device ${deviceTokenId}: ${sanitized.title} - ${sanitized.message}`,\n    );\n\n    // Decrypt token for use (tokens are encrypted at rest)\n    // const decryptedToken = (device as any).getDecryptedToken();\n\n    // TODO: Implement actual push notification sending via FCM/APNS\n    // When implementing, use: const token = (device as any).getDecryptedToken();\n    // For now, just log it (don't log the actual token in production)\n    this.logger.log(`Test notification would be sent to ${device.platform} device`);\n  }\n\n  // Actual notification delivery (called by queue processor)\n  async deliverNotification(notificationId: string): Promise<void> {\n    const notification = await this.notificationModel.findById(notificationId);\n\n    if (!notification) {\n      throw new NotFoundException(`Notification ${notificationId} not found`);\n    }\n\n    // Update status to sending\n    notification.status = NotificationStatus.SENDING;\n    await notification.save();\n\n    try {\n      // Get all active device tokens\n      const devices = await this.deviceTokenModel.find({\n        isTestDevice: false,\n      });\n\n      let delivered = 0;\n      let failed = 0;\n\n      // TODO: Implement actual FCM/APNS sending logic\n      // For now, simulate delivery\n      for (const device of devices) {\n        try {\n          this.logger.log(\n            `Sending to ${device.platform} device: ${device.token.substring(0, 20)}...`,\n          );\n          delivered++;\n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n          this.logger.error(`Failed to send to device ${device._id}: ${errorMessage}`);\n          failed++;\n        }\n      }\n\n      // Update notification with delivery stats\n      notification.status = NotificationStatus.SENT;\n      notification.sentAt = new Date();\n      notification.deliveredCount = delivered;\n      notification.failedCount = failed;\n      await notification.save();\n\n      this.logger.log(\n        `Notification ${notificationId} delivered: ${delivered} succeeded, ${failed} failed`,\n      );\n    } catch (error) {\n      notification.status = NotificationStatus.FAILED;\n      await notification.save();\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      this.logger.error(`Failed to deliver notification ${notificationId}: ${errorMessage}`);\n      throw error;\n    }\n  }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "02b870a735de409db608d4f8095abeba0e286cc6"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_243kf9kfl9 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_243kf9kfl9();
var __decorate =
/* istanbul ignore next */
(cov_243kf9kfl9().s[0]++,
/* istanbul ignore next */
(cov_243kf9kfl9().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_243kf9kfl9().b[0][1]++, this.__decorate) ||
/* istanbul ignore next */
(cov_243kf9kfl9().b[0][2]++, function (decorators, target, key, desc) {
  /* istanbul ignore next */
  cov_243kf9kfl9().f[0]++;
  var c =
    /* istanbul ignore next */
    (cov_243kf9kfl9().s[1]++, arguments.length),
    r =
    /* istanbul ignore next */
    (cov_243kf9kfl9().s[2]++, c < 3 ?
    /* istanbul ignore next */
    (cov_243kf9kfl9().b[1][0]++, target) :
    /* istanbul ignore next */
    (cov_243kf9kfl9().b[1][1]++, desc === null ?
    /* istanbul ignore next */
    (cov_243kf9kfl9().b[2][0]++, desc = Object.getOwnPropertyDescriptor(target, key)) :
    /* istanbul ignore next */
    (cov_243kf9kfl9().b[2][1]++, desc))),
    d;
  /* istanbul ignore next */
  cov_243kf9kfl9().s[3]++;
  if (
  /* istanbul ignore next */
  (cov_243kf9kfl9().b[4][0]++, typeof Reflect === "object") &&
  /* istanbul ignore next */
  (cov_243kf9kfl9().b[4][1]++, typeof Reflect.decorate === "function")) {
    /* istanbul ignore next */
    cov_243kf9kfl9().b[3][0]++;
    cov_243kf9kfl9().s[4]++;
    r = Reflect.decorate(decorators, target, key, desc);
  } else {
    /* istanbul ignore next */
    cov_243kf9kfl9().b[3][1]++;
    cov_243kf9kfl9().s[5]++;
    for (var i =
    /* istanbul ignore next */
    (cov_243kf9kfl9().s[6]++, decorators.length - 1); i >= 0; i--) {
      /* istanbul ignore next */
      cov_243kf9kfl9().s[7]++;
      if (d = decorators[i]) {
        /* istanbul ignore next */
        cov_243kf9kfl9().b[5][0]++;
        cov_243kf9kfl9().s[8]++;
        r =
        /* istanbul ignore next */
        (cov_243kf9kfl9().b[6][0]++, c < 3 ?
        /* istanbul ignore next */
        (cov_243kf9kfl9().b[7][0]++, d(r)) :
        /* istanbul ignore next */
        (cov_243kf9kfl9().b[7][1]++, c > 3 ?
        /* istanbul ignore next */
        (cov_243kf9kfl9().b[8][0]++, d(target, key, r)) :
        /* istanbul ignore next */
        (cov_243kf9kfl9().b[8][1]++, d(target, key)))) ||
        /* istanbul ignore next */
        (cov_243kf9kfl9().b[6][1]++, r);
      } else
      /* istanbul ignore next */
      {
        cov_243kf9kfl9().b[5][1]++;
      }
    }
  }
  /* istanbul ignore next */
  cov_243kf9kfl9().s[9]++;
  return /* istanbul ignore next */(cov_243kf9kfl9().b[9][0]++, c > 3) &&
  /* istanbul ignore next */
  (cov_243kf9kfl9().b[9][1]++, r) &&
  /* istanbul ignore next */
  (cov_243kf9kfl9().b[9][2]++, Object.defineProperty(target, key, r)), r;
}));
var __metadata =
/* istanbul ignore next */
(cov_243kf9kfl9().s[10]++,
/* istanbul ignore next */
(cov_243kf9kfl9().b[10][0]++, this) &&
/* istanbul ignore next */
(cov_243kf9kfl9().b[10][1]++, this.__metadata) ||
/* istanbul ignore next */
(cov_243kf9kfl9().b[10][2]++, function (k, v) {
  /* istanbul ignore next */
  cov_243kf9kfl9().f[1]++;
  cov_243kf9kfl9().s[11]++;
  if (
  /* istanbul ignore next */
  (cov_243kf9kfl9().b[12][0]++, typeof Reflect === "object") &&
  /* istanbul ignore next */
  (cov_243kf9kfl9().b[12][1]++, typeof Reflect.metadata === "function")) {
    /* istanbul ignore next */
    cov_243kf9kfl9().b[11][0]++;
    cov_243kf9kfl9().s[12]++;
    return Reflect.metadata(k, v);
  } else
  /* istanbul ignore next */
  {
    cov_243kf9kfl9().b[11][1]++;
  }
}));
var __param =
/* istanbul ignore next */
(cov_243kf9kfl9().s[13]++,
/* istanbul ignore next */
(cov_243kf9kfl9().b[13][0]++, this) &&
/* istanbul ignore next */
(cov_243kf9kfl9().b[13][1]++, this.__param) ||
/* istanbul ignore next */
(cov_243kf9kfl9().b[13][2]++, function (paramIndex, decorator) {
  /* istanbul ignore next */
  cov_243kf9kfl9().f[2]++;
  cov_243kf9kfl9().s[14]++;
  return function (target, key) {
    /* istanbul ignore next */
    cov_243kf9kfl9().f[3]++;
    cov_243kf9kfl9().s[15]++;
    decorator(target, key, paramIndex);
  };
}));
var NotificationsService_1;
/* istanbul ignore next */
cov_243kf9kfl9().s[16]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_243kf9kfl9().s[17]++;
exports.NotificationsService = void 0;
const common_1 =
/* istanbul ignore next */
(cov_243kf9kfl9().s[18]++, require("@nestjs/common"));
const mongoose_1 =
/* istanbul ignore next */
(cov_243kf9kfl9().s[19]++, require("@nestjs/mongoose"));
const mongoose_2 =
/* istanbul ignore next */
(cov_243kf9kfl9().s[20]++, require("mongoose"));
const bull_1 =
/* istanbul ignore next */
(cov_243kf9kfl9().s[21]++, require("@nestjs/bull"));
const notification_schema_1 =
/* istanbul ignore next */
(cov_243kf9kfl9().s[22]++, require("./schemas/notification.schema"));
const device_token_schema_1 =
/* istanbul ignore next */
(cov_243kf9kfl9().s[23]++, require("./schemas/device-token.schema"));
const sanitize_util_1 =
/* istanbul ignore next */
(cov_243kf9kfl9().s[24]++, require("@common/utils/sanitize.util"));
let NotificationsService =
/* istanbul ignore next */
(cov_243kf9kfl9().s[25]++, NotificationsService_1 = class NotificationsService {
  notificationModel;
  deviceTokenModel;
  notificationQueue;
  logger =
  /* istanbul ignore next */
  (cov_243kf9kfl9().s[26]++, new common_1.Logger(NotificationsService_1.name));
  constructor(notificationModel, deviceTokenModel, notificationQueue) {
    /* istanbul ignore next */
    cov_243kf9kfl9().f[4]++;
    cov_243kf9kfl9().s[27]++;
    this.notificationModel = notificationModel;
    /* istanbul ignore next */
    cov_243kf9kfl9().s[28]++;
    this.deviceTokenModel = deviceTokenModel;
    /* istanbul ignore next */
    cov_243kf9kfl9().s[29]++;
    this.notificationQueue = notificationQueue;
  }
  // Legacy methods (kept for backward compatibility)
  async sendEmail(to, subject, body) {
    /* istanbul ignore next */
    cov_243kf9kfl9().f[5]++;
    cov_243kf9kfl9().s[30]++;
    this.logger.log(`Sending email to ${to}: ${subject} - Body: ${body}`);
    // TODO: Implement email sending logic (SendGrid, AWS SES, etc.)
  }
  async sendPushNotification(userId, title, message) {
    /* istanbul ignore next */
    cov_243kf9kfl9().f[6]++;
    cov_243kf9kfl9().s[31]++;
    this.logger.log(`Sending push notification to user ${userId}: ${title} - Message: ${message}`);
    // TODO: Implement push notification logic (FCM, APNS, etc.)
  }
  async sendSessionReminder(userId, sessionId) {
    /* istanbul ignore next */
    cov_243kf9kfl9().f[7]++;
    cov_243kf9kfl9().s[32]++;
    this.logger.log(`Sending session reminder to user ${userId} for session ${sessionId}`);
    // TODO: Implement session reminder logic
  }
  async broadcastNotification(title, message) {
    /* istanbul ignore next */
    cov_243kf9kfl9().f[8]++;
    // Sanitize user inputs to prevent XSS attacks
    const sanitized =
    /* istanbul ignore next */
    (cov_243kf9kfl9().s[33]++, (0, sanitize_util_1.sanitizeNotification)({
      title,
      message
    }));
    /* istanbul ignore next */
    cov_243kf9kfl9().s[34]++;
    this.logger.log(`Broadcasting notification: ${sanitized.title} - Message: ${sanitized.message}`);
    // TODO: Implement broadcast logic
  }
  // New notification management methods
  async createNotification(dto, userId) {
    /* istanbul ignore next */
    cov_243kf9kfl9().f[9]++;
    // Sanitize user inputs to prevent XSS attacks
    const sanitizedDto =
    /* istanbul ignore next */
    (cov_243kf9kfl9().s[35]++, (0, sanitize_util_1.sanitizeNotification)(dto));
    const deviceCount =
    /* istanbul ignore next */
    (cov_243kf9kfl9().s[36]++, await this.deviceTokenModel.countDocuments());
    const notification =
    /* istanbul ignore next */
    (cov_243kf9kfl9().s[37]++, new this.notificationModel({
      ...sanitizedDto,
      createdBy: new mongoose_2.Types.ObjectId(userId),
      deviceCount,
      status: dto.scheduledAt ?
      /* istanbul ignore next */
      (cov_243kf9kfl9().b[14][0]++, notification_schema_1.NotificationStatus.SCHEDULED) :
      /* istanbul ignore next */
      (cov_243kf9kfl9().b[14][1]++,
      /* istanbul ignore next */
      (cov_243kf9kfl9().b[15][0]++, dto.status) ||
      /* istanbul ignore next */
      (cov_243kf9kfl9().b[15][1]++, notification_schema_1.NotificationStatus.DRAFT))
    }));
    const saved =
    /* istanbul ignore next */
    (cov_243kf9kfl9().s[38]++, await notification.save());
    // Schedule notification if scheduledAt is provided
    /* istanbul ignore next */
    cov_243kf9kfl9().s[39]++;
    if (dto.scheduledAt) {
      /* istanbul ignore next */
      cov_243kf9kfl9().b[16][0]++;
      cov_243kf9kfl9().s[40]++;
      await this.scheduleNotification(saved._id.toString(), dto.scheduledAt);
    } else
    /* istanbul ignore next */
    {
      cov_243kf9kfl9().b[16][1]++;
    }
    cov_243kf9kfl9().s[41]++;
    return saved;
  }
  async scheduleNotification(notificationId, scheduledAt) {
    /* istanbul ignore next */
    cov_243kf9kfl9().f[10]++;
    const delay =
    /* istanbul ignore next */
    (cov_243kf9kfl9().s[42]++, scheduledAt.getTime() - Date.now());
    /* istanbul ignore next */
    cov_243kf9kfl9().s[43]++;
    if (delay < 0) {
      /* istanbul ignore next */
      cov_243kf9kfl9().b[17][0]++;
      cov_243kf9kfl9().s[44]++;
      throw new Error('Cannot schedule notification in the past');
    } else
    /* istanbul ignore next */
    {
      cov_243kf9kfl9().b[17][1]++;
    }
    cov_243kf9kfl9().s[45]++;
    await this.notificationQueue.add('send-notification', {
      notificationId
    }, {
      delay,
      removeOnComplete: true,
      attempts: 3,
      backoff: {
        type: 'exponential',
        delay: 5000
      }
    });
    /* istanbul ignore next */
    cov_243kf9kfl9().s[46]++;
    this.logger.log(`Notification ${notificationId} scheduled for ${scheduledAt.toISOString()}`);
  }
  async findAll(page =
  /* istanbul ignore next */
  (cov_243kf9kfl9().b[18][0]++, 1), limit =
  /* istanbul ignore next */
  (cov_243kf9kfl9().b[19][0]++, 10), status, createdBy) {
    /* istanbul ignore next */
    cov_243kf9kfl9().f[11]++;
    const query =
    /* istanbul ignore next */
    (cov_243kf9kfl9().s[47]++, {});
    /* istanbul ignore next */
    cov_243kf9kfl9().s[48]++;
    if (status) {
      /* istanbul ignore next */
      cov_243kf9kfl9().b[20][0]++;
      cov_243kf9kfl9().s[49]++;
      query.status = status;
    } else
    /* istanbul ignore next */
    {
      cov_243kf9kfl9().b[20][1]++;
    }
    cov_243kf9kfl9().s[50]++;
    if (createdBy) {
      /* istanbul ignore next */
      cov_243kf9kfl9().b[21][0]++;
      cov_243kf9kfl9().s[51]++;
      query.createdBy = new mongoose_2.Types.ObjectId(createdBy);
    } else
    /* istanbul ignore next */
    {
      cov_243kf9kfl9().b[21][1]++;
    }
    const skip =
    /* istanbul ignore next */
    (cov_243kf9kfl9().s[52]++, (page - 1) * limit);
    const [data, total] =
    /* istanbul ignore next */
    (cov_243kf9kfl9().s[53]++, await Promise.all([this.notificationModel.find(query).sort({
      createdAt: -1
    }).skip(skip).limit(limit).populate('createdBy', 'name email').exec(), this.notificationModel.countDocuments(query)]));
    /* istanbul ignore next */
    cov_243kf9kfl9().s[54]++;
    return {
      data,
      total,
      page,
      totalPages: Math.ceil(total / limit)
    };
  }
  async findOne(id) {
    /* istanbul ignore next */
    cov_243kf9kfl9().f[12]++;
    const notification =
    /* istanbul ignore next */
    (cov_243kf9kfl9().s[55]++, await this.notificationModel.findById(id).populate('createdBy', 'name email').exec());
    /* istanbul ignore next */
    cov_243kf9kfl9().s[56]++;
    if (!notification) {
      /* istanbul ignore next */
      cov_243kf9kfl9().b[22][0]++;
      cov_243kf9kfl9().s[57]++;
      throw new common_1.NotFoundException(`Notification with ID ${id} not found`);
    } else
    /* istanbul ignore next */
    {
      cov_243kf9kfl9().b[22][1]++;
    }
    cov_243kf9kfl9().s[58]++;
    return notification;
  }
  async updateNotification(id, dto) {
    /* istanbul ignore next */
    cov_243kf9kfl9().f[13]++;
    // Sanitize user inputs to prevent XSS attacks
    const sanitizedDto =
    /* istanbul ignore next */
    (cov_243kf9kfl9().s[59]++, (0, sanitize_util_1.sanitizeNotification)(dto));
    const notification =
    /* istanbul ignore next */
    (cov_243kf9kfl9().s[60]++, await this.notificationModel.findByIdAndUpdate(id, sanitizedDto, {
      new: true
    }).exec());
    /* istanbul ignore next */
    cov_243kf9kfl9().s[61]++;
    if (!notification) {
      /* istanbul ignore next */
      cov_243kf9kfl9().b[23][0]++;
      cov_243kf9kfl9().s[62]++;
      throw new common_1.NotFoundException(`Notification with ID ${id} not found`);
    } else
    /* istanbul ignore next */
    {
      cov_243kf9kfl9().b[23][1]++;
    }
    // Reschedule if scheduledAt changed
    cov_243kf9kfl9().s[63]++;
    if (
    /* istanbul ignore next */
    (cov_243kf9kfl9().b[25][0]++, dto.scheduledAt) &&
    /* istanbul ignore next */
    (cov_243kf9kfl9().b[25][1]++, notification.status === notification_schema_1.NotificationStatus.SCHEDULED)) {
      /* istanbul ignore next */
      cov_243kf9kfl9().b[24][0]++;
      cov_243kf9kfl9().s[64]++;
      // Remove old job and create new one
      await this.cancelScheduledNotification(id);
      /* istanbul ignore next */
      cov_243kf9kfl9().s[65]++;
      await this.scheduleNotification(id, dto.scheduledAt);
    } else
    /* istanbul ignore next */
    {
      cov_243kf9kfl9().b[24][1]++;
    }
    cov_243kf9kfl9().s[66]++;
    return notification;
  }
  async deleteNotification(id) {
    /* istanbul ignore next */
    cov_243kf9kfl9().f[14]++;
    const result =
    /* istanbul ignore next */
    (cov_243kf9kfl9().s[67]++, await this.notificationModel.findByIdAndDelete(id).exec());
    /* istanbul ignore next */
    cov_243kf9kfl9().s[68]++;
    if (!result) {
      /* istanbul ignore next */
      cov_243kf9kfl9().b[26][0]++;
      cov_243kf9kfl9().s[69]++;
      throw new common_1.NotFoundException(`Notification with ID ${id} not found`);
    } else
    /* istanbul ignore next */
    {
      cov_243kf9kfl9().b[26][1]++;
    }
    // Cancel scheduled job if exists
    cov_243kf9kfl9().s[70]++;
    if (result.status === notification_schema_1.NotificationStatus.SCHEDULED) {
      /* istanbul ignore next */
      cov_243kf9kfl9().b[27][0]++;
      cov_243kf9kfl9().s[71]++;
      await this.cancelScheduledNotification(id);
    } else
    /* istanbul ignore next */
    {
      cov_243kf9kfl9().b[27][1]++;
    }
  }
  async cancelScheduledNotification(id) {
    /* istanbul ignore next */
    cov_243kf9kfl9().f[15]++;
    const jobs =
    /* istanbul ignore next */
    (cov_243kf9kfl9().s[72]++, await this.notificationQueue.getJobs(['delayed', 'waiting']));
    /* istanbul ignore next */
    cov_243kf9kfl9().s[73]++;
    for (const job of jobs) {
      /* istanbul ignore next */
      cov_243kf9kfl9().s[74]++;
      if (job.data.notificationId === id) {
        /* istanbul ignore next */
        cov_243kf9kfl9().b[28][0]++;
        cov_243kf9kfl9().s[75]++;
        await job.remove();
        /* istanbul ignore next */
        cov_243kf9kfl9().s[76]++;
        this.logger.log(`Cancelled scheduled notification job for ${id}`);
      } else
      /* istanbul ignore next */
      {
        cov_243kf9kfl9().b[28][1]++;
      }
    }
    /* istanbul ignore next */
    cov_243kf9kfl9().s[77]++;
    await this.notificationModel.findByIdAndUpdate(id, {
      status: notification_schema_1.NotificationStatus.DRAFT
    });
  }
  async getHistory(page =
  /* istanbul ignore next */
  (cov_243kf9kfl9().b[29][0]++, 1), limit =
  /* istanbul ignore next */
  (cov_243kf9kfl9().b[30][0]++, 10), startDate, endDate, createdBy, search) {
    /* istanbul ignore next */
    cov_243kf9kfl9().f[16]++;
    const query =
    /* istanbul ignore next */
    (cov_243kf9kfl9().s[78]++, {
      status: {
        $in: [notification_schema_1.NotificationStatus.SENT, notification_schema_1.NotificationStatus.FAILED]
      }
    });
    /* istanbul ignore next */
    cov_243kf9kfl9().s[79]++;
    if (
    /* istanbul ignore next */
    (cov_243kf9kfl9().b[32][0]++, startDate) ||
    /* istanbul ignore next */
    (cov_243kf9kfl9().b[32][1]++, endDate)) {
      /* istanbul ignore next */
      cov_243kf9kfl9().b[31][0]++;
      cov_243kf9kfl9().s[80]++;
      query.sentAt = {};
      /* istanbul ignore next */
      cov_243kf9kfl9().s[81]++;
      if (startDate) {
        /* istanbul ignore next */
        cov_243kf9kfl9().b[33][0]++;
        cov_243kf9kfl9().s[82]++;
        query.sentAt.$gte = startDate;
      } else
      /* istanbul ignore next */
      {
        cov_243kf9kfl9().b[33][1]++;
      }
      cov_243kf9kfl9().s[83]++;
      if (endDate) {
        /* istanbul ignore next */
        cov_243kf9kfl9().b[34][0]++;
        cov_243kf9kfl9().s[84]++;
        query.sentAt.$lte = endDate;
      } else
      /* istanbul ignore next */
      {
        cov_243kf9kfl9().b[34][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_243kf9kfl9().b[31][1]++;
    }
    cov_243kf9kfl9().s[85]++;
    if (createdBy) {
      /* istanbul ignore next */
      cov_243kf9kfl9().b[35][0]++;
      cov_243kf9kfl9().s[86]++;
      query.createdBy = new mongoose_2.Types.ObjectId(createdBy);
    } else
    /* istanbul ignore next */
    {
      cov_243kf9kfl9().b[35][1]++;
    }
    cov_243kf9kfl9().s[87]++;
    if (search) {
      /* istanbul ignore next */
      cov_243kf9kfl9().b[36][0]++;
      cov_243kf9kfl9().s[88]++;
      query.$or = [{
        title: {
          $regex: search,
          $options: 'i'
        }
      }, {
        message: {
          $regex: search,
          $options: 'i'
        }
      }];
    } else
    /* istanbul ignore next */
    {
      cov_243kf9kfl9().b[36][1]++;
    }
    const skip =
    /* istanbul ignore next */
    (cov_243kf9kfl9().s[89]++, (page - 1) * limit);
    const [data, total] =
    /* istanbul ignore next */
    (cov_243kf9kfl9().s[90]++, await Promise.all([this.notificationModel.find(query).sort({
      sentAt: -1
    }).skip(skip).limit(limit).populate('createdBy', 'name email').exec(), this.notificationModel.countDocuments(query)]));
    /* istanbul ignore next */
    cov_243kf9kfl9().s[91]++;
    return {
      data,
      total,
      page,
      totalPages: Math.ceil(total / limit)
    };
  }
  async getStats() {
    /* istanbul ignore next */
    cov_243kf9kfl9().f[17]++;
    const [totalSent, totalFailed, totalScheduled, totalDevices] =
    /* istanbul ignore next */
    (cov_243kf9kfl9().s[92]++, await Promise.all([this.notificationModel.countDocuments({
      status: notification_schema_1.NotificationStatus.SENT
    }), this.notificationModel.countDocuments({
      status: notification_schema_1.NotificationStatus.FAILED
    }), this.notificationModel.countDocuments({
      status: notification_schema_1.NotificationStatus.SCHEDULED
    }), this.deviceTokenModel.countDocuments()]));
    const deliveryRate =
    /* istanbul ignore next */
    (cov_243kf9kfl9().s[93]++, totalSent + totalFailed > 0 ?
    /* istanbul ignore next */
    (cov_243kf9kfl9().b[37][0]++, totalSent / (totalSent + totalFailed) * 100) :
    /* istanbul ignore next */
    (cov_243kf9kfl9().b[37][1]++, 0));
    /* istanbul ignore next */
    cov_243kf9kfl9().s[94]++;
    return {
      totalSent,
      totalFailed,
      totalScheduled,
      totalDevices,
      deliveryRate
    };
  }
  // Device token management
  async registerDevice(dto, userId) {
    /* istanbul ignore next */
    cov_243kf9kfl9().f[18]++;
    const existing =
    /* istanbul ignore next */
    (cov_243kf9kfl9().s[95]++, await this.deviceTokenModel.findOne({
      token: dto.token
    }));
    /* istanbul ignore next */
    cov_243kf9kfl9().s[96]++;
    if (existing) {
      /* istanbul ignore next */
      cov_243kf9kfl9().b[38][0]++;
      cov_243kf9kfl9().s[97]++;
      existing.userId = userId ?
      /* istanbul ignore next */
      (cov_243kf9kfl9().b[39][0]++, new mongoose_2.Types.ObjectId(userId)) :
      /* istanbul ignore next */
      (cov_243kf9kfl9().b[39][1]++, existing.userId);
      /* istanbul ignore next */
      cov_243kf9kfl9().s[98]++;
      existing.platform = dto.platform;
      /* istanbul ignore next */
      cov_243kf9kfl9().s[99]++;
      existing.appVersion = dto.appVersion;
      /* istanbul ignore next */
      cov_243kf9kfl9().s[100]++;
      existing.isTestDevice =
      /* istanbul ignore next */
      (cov_243kf9kfl9().b[40][0]++, dto.isTestDevice) ??
      /* istanbul ignore next */
      (cov_243kf9kfl9().b[40][1]++, existing.isTestDevice);
      /* istanbul ignore next */
      cov_243kf9kfl9().s[101]++;
      existing.lastActive = new Date();
      /* istanbul ignore next */
      cov_243kf9kfl9().s[102]++;
      return existing.save();
    } else
    /* istanbul ignore next */
    {
      cov_243kf9kfl9().b[38][1]++;
    }
    const deviceToken =
    /* istanbul ignore next */
    (cov_243kf9kfl9().s[103]++, new this.deviceTokenModel({
      ...dto,
      userId: userId ?
      /* istanbul ignore next */
      (cov_243kf9kfl9().b[41][0]++, new mongoose_2.Types.ObjectId(userId)) :
      /* istanbul ignore next */
      (cov_243kf9kfl9().b[41][1]++, undefined),
      lastActive: new Date()
    }));
    /* istanbul ignore next */
    cov_243kf9kfl9().s[104]++;
    return deviceToken.save();
  }
  async getTestDevices() {
    /* istanbul ignore next */
    cov_243kf9kfl9().f[19]++;
    cov_243kf9kfl9().s[105]++;
    return this.deviceTokenModel.find({
      isTestDevice: true
    }).sort({
      lastActive: -1
    }).exec();
  }
  async sendTestNotification(title, message, deviceTokenId) {
    /* istanbul ignore next */
    cov_243kf9kfl9().f[20]++;
    // Sanitize user inputs to prevent XSS attacks
    const sanitized =
    /* istanbul ignore next */
    (cov_243kf9kfl9().s[106]++, (0, sanitize_util_1.sanitizeNotification)({
      title,
      message
    }));
    const device =
    /* istanbul ignore next */
    (cov_243kf9kfl9().s[107]++, await this.deviceTokenModel.findById(deviceTokenId));
    /* istanbul ignore next */
    cov_243kf9kfl9().s[108]++;
    if (!device) {
      /* istanbul ignore next */
      cov_243kf9kfl9().b[42][0]++;
      cov_243kf9kfl9().s[109]++;
      throw new common_1.NotFoundException(`Device token with ID ${deviceTokenId} not found`);
    } else
    /* istanbul ignore next */
    {
      cov_243kf9kfl9().b[42][1]++;
    }
    cov_243kf9kfl9().s[110]++;
    this.logger.log(`Sending test notification to device ${deviceTokenId}: ${sanitized.title} - ${sanitized.message}`);
    // Decrypt token for use (tokens are encrypted at rest)
    // const decryptedToken = (device as any).getDecryptedToken();
    // TODO: Implement actual push notification sending via FCM/APNS
    // When implementing, use: const token = (device as any).getDecryptedToken();
    // For now, just log it (don't log the actual token in production)
    /* istanbul ignore next */
    cov_243kf9kfl9().s[111]++;
    this.logger.log(`Test notification would be sent to ${device.platform} device`);
  }
  // Actual notification delivery (called by queue processor)
  async deliverNotification(notificationId) {
    /* istanbul ignore next */
    cov_243kf9kfl9().f[21]++;
    const notification =
    /* istanbul ignore next */
    (cov_243kf9kfl9().s[112]++, await this.notificationModel.findById(notificationId));
    /* istanbul ignore next */
    cov_243kf9kfl9().s[113]++;
    if (!notification) {
      /* istanbul ignore next */
      cov_243kf9kfl9().b[43][0]++;
      cov_243kf9kfl9().s[114]++;
      throw new common_1.NotFoundException(`Notification ${notificationId} not found`);
    } else
    /* istanbul ignore next */
    {
      cov_243kf9kfl9().b[43][1]++;
    }
    // Update status to sending
    cov_243kf9kfl9().s[115]++;
    notification.status = notification_schema_1.NotificationStatus.SENDING;
    /* istanbul ignore next */
    cov_243kf9kfl9().s[116]++;
    await notification.save();
    /* istanbul ignore next */
    cov_243kf9kfl9().s[117]++;
    try {
      // Get all active device tokens
      const devices =
      /* istanbul ignore next */
      (cov_243kf9kfl9().s[118]++, await this.deviceTokenModel.find({
        isTestDevice: false
      }));
      let delivered =
      /* istanbul ignore next */
      (cov_243kf9kfl9().s[119]++, 0);
      let failed =
      /* istanbul ignore next */
      (cov_243kf9kfl9().s[120]++, 0);
      // TODO: Implement actual FCM/APNS sending logic
      // For now, simulate delivery
      /* istanbul ignore next */
      cov_243kf9kfl9().s[121]++;
      for (const device of devices) {
        /* istanbul ignore next */
        cov_243kf9kfl9().s[122]++;
        try {
          /* istanbul ignore next */
          cov_243kf9kfl9().s[123]++;
          this.logger.log(`Sending to ${device.platform} device: ${device.token.substring(0, 20)}...`);
          /* istanbul ignore next */
          cov_243kf9kfl9().s[124]++;
          delivered++;
        } catch (error) {
          const errorMessage =
          /* istanbul ignore next */
          (cov_243kf9kfl9().s[125]++, error instanceof Error ?
          /* istanbul ignore next */
          (cov_243kf9kfl9().b[44][0]++, error.message) :
          /* istanbul ignore next */
          (cov_243kf9kfl9().b[44][1]++, 'Unknown error'));
          /* istanbul ignore next */
          cov_243kf9kfl9().s[126]++;
          this.logger.error(`Failed to send to device ${device._id}: ${errorMessage}`);
          /* istanbul ignore next */
          cov_243kf9kfl9().s[127]++;
          failed++;
        }
      }
      // Update notification with delivery stats
      /* istanbul ignore next */
      cov_243kf9kfl9().s[128]++;
      notification.status = notification_schema_1.NotificationStatus.SENT;
      /* istanbul ignore next */
      cov_243kf9kfl9().s[129]++;
      notification.sentAt = new Date();
      /* istanbul ignore next */
      cov_243kf9kfl9().s[130]++;
      notification.deliveredCount = delivered;
      /* istanbul ignore next */
      cov_243kf9kfl9().s[131]++;
      notification.failedCount = failed;
      /* istanbul ignore next */
      cov_243kf9kfl9().s[132]++;
      await notification.save();
      /* istanbul ignore next */
      cov_243kf9kfl9().s[133]++;
      this.logger.log(`Notification ${notificationId} delivered: ${delivered} succeeded, ${failed} failed`);
    } catch (error) {
      /* istanbul ignore next */
      cov_243kf9kfl9().s[134]++;
      notification.status = notification_schema_1.NotificationStatus.FAILED;
      /* istanbul ignore next */
      cov_243kf9kfl9().s[135]++;
      await notification.save();
      const errorMessage =
      /* istanbul ignore next */
      (cov_243kf9kfl9().s[136]++, error instanceof Error ?
      /* istanbul ignore next */
      (cov_243kf9kfl9().b[45][0]++, error.message) :
      /* istanbul ignore next */
      (cov_243kf9kfl9().b[45][1]++, 'Unknown error'));
      /* istanbul ignore next */
      cov_243kf9kfl9().s[137]++;
      this.logger.error(`Failed to deliver notification ${notificationId}: ${errorMessage}`);
      /* istanbul ignore next */
      cov_243kf9kfl9().s[138]++;
      throw error;
    }
  }
});
/* istanbul ignore next */
cov_243kf9kfl9().s[139]++;
exports.NotificationsService = NotificationsService;
/* istanbul ignore next */
cov_243kf9kfl9().s[140]++;
exports.NotificationsService = NotificationsService = NotificationsService_1 = __decorate([(0, common_1.Injectable)(), __param(0, (0, mongoose_1.InjectModel)(notification_schema_1.Notification.name)), __param(1, (0, mongoose_1.InjectModel)(device_token_schema_1.DeviceToken.name)), __param(2, (0, bull_1.InjectQueue)('notifications')), __metadata("design:paramtypes", [mongoose_2.Model, mongoose_2.Model, Object])], NotificationsService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,