{"file":"/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/tests/integration/speakers-upload.integration.spec.ts","mappings":"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","names":[],"sources":["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/tests/integration/speakers-upload.integration.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { INestApplication, ValidationPipe } from '@nestjs/common';\nimport { MongooseModule, getModelToken } from '@nestjs/mongoose';\nimport request from 'supertest';\nimport { JwtService } from '@nestjs/jwt';\nimport { ThrottlerModule, ThrottlerGuard } from '@nestjs/throttler';\nimport { SpeakersModule } from '../../src/modules/speakers/speakers.module';\nimport { AuthModule } from '../../src/modules/auth/auth.module';\nimport { StorageService } from '../../src/modules/storage/services/storage.service';\nimport { Speaker } from '../../src/modules/speakers/schemas/speaker.schema';\nimport { Model } from 'mongoose';\n\ndescribe('Speakers Photo Upload Integration Tests', () => {\n  let app: INestApplication;\n  let jwtService: JwtService;\n  let authToken: string;\n  let producerToken: string;\n  let userToken: string;\n  let speakerModel: Model<Speaker>;\n  let testSpeakerId: string;\n\n  const testAdminUser = {\n    _id: '507f1f77bcf86cd799439020',\n    email: 'admin@vtexday.com',\n    role: 'super_admin',\n  };\n\n  const testProducerUser = {\n    _id: '507f1f77bcf86cd799439021',\n    email: 'producer@vtexday.com',\n    role: 'producer',\n  };\n\n  const testRegularUser = {\n    _id: '507f1f77bcf86cd799439022',\n    email: 'user@vtexday.com',\n    role: 'user',\n  };\n\n  // Mock StorageService\n  const mockStorageService = {\n    uploadFile: jest.fn().mockResolvedValue({\n      key: 'speaker-photos/12345-67890.jpg',\n      url: 'https://test-bucket.s3.us-east-1.amazonaws.com/speaker-photos/12345-67890.jpg',\n    }),\n  };\n\n  beforeAll(async () => {\n    const moduleFixture: TestingModule = await Test.createTestingModule({\n      imports: [\n        MongooseModule.forRoot(\n          process.env['MONGODB_TEST_URI'] || 'mongodb://localhost:27017/vtex-day-test-upload',\n        ),\n        ThrottlerModule.forRoot([\n          {\n            ttl: 60000,\n            limit: 10,\n          },\n        ]),\n        AuthModule,\n        SpeakersModule,\n      ],\n    })\n      .overrideProvider(StorageService)\n      .useValue(mockStorageService)\n      .overrideGuard(ThrottlerGuard)\n      .useValue({ canActivate: () => true }) // Disable throttling for tests\n      .compile();\n\n    app = moduleFixture.createNestApplication();\n    app.useGlobalPipes(new ValidationPipe({ whitelist: true, transform: true }));\n\n    jwtService = moduleFixture.get<JwtService>(JwtService);\n    speakerModel = moduleFixture.get<Model<Speaker>>(getModelToken(Speaker.name));\n\n    // Generate auth tokens\n    authToken = jwtService.sign({\n      sub: testAdminUser._id,\n      email: testAdminUser.email,\n      role: testAdminUser.role,\n    });\n\n    producerToken = jwtService.sign({\n      sub: testProducerUser._id,\n      email: testProducerUser.email,\n      role: testProducerUser.role,\n    });\n\n    userToken = jwtService.sign({\n      sub: testRegularUser._id,\n      email: testRegularUser.email,\n      role: testRegularUser.role,\n    });\n\n    await app.init();\n\n    // Create a test speaker\n    const speaker = await speakerModel.create({\n      name: 'Test Speaker',\n      bio: {\n        'pt-BR':\n          'Biografia em português do palestrante com mais de cem caracteres para atender ao requisito mínimo de comprimento',\n        en: 'Speaker biography in English with more than one hundred characters to meet the minimum length requirement',\n      },\n      company: 'Test Corp',\n      position: {\n        'pt-BR': 'Diretor',\n        en: 'Director',\n      },\n      isVisible: true,\n      priority: 100,\n    });\n\n    testSpeakerId = speaker._id.toString();\n  });\n\n  afterAll(async () => {\n    // Clean up test data\n    await speakerModel.deleteMany({});\n    await app.close();\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('POST /speakers/:id/upload-photo', () => {\n    it('should successfully upload a speaker photo as super admin', async () => {\n      // Create a mock JPEG file\n      const jpegBuffer = Buffer.concat([Buffer.from([0xff, 0xd8, 0xff]), Buffer.alloc(1000, 'a')]);\n\n      const response = await request(app.getHttpServer())\n        .post(`/speakers/${testSpeakerId}/upload-photo`)\n        .set('Authorization', `Bearer ${authToken}`)\n        .attach('file', jpegBuffer, 'test.jpg')\n        .expect(201);\n\n      expect(response.body).toHaveProperty('success', true);\n      expect(response.body.data).toHaveProperty('photoUrl');\n      expect(response.body.data.photoUrl).toContain('speaker-photos/');\n      expect(mockStorageService.uploadFile).toHaveBeenCalled();\n\n      // Verify speaker was updated in database\n      const updatedSpeaker = await speakerModel.findById(testSpeakerId);\n      expect(updatedSpeaker?.photoUrl).toContain('speaker-photos/');\n    });\n\n    it('should successfully upload a speaker photo as producer', async () => {\n      const jpegBuffer = Buffer.concat([Buffer.from([0xff, 0xd8, 0xff]), Buffer.alloc(1000, 'a')]);\n\n      const response = await request(app.getHttpServer())\n        .post(`/speakers/${testSpeakerId}/upload-photo`)\n        .set('Authorization', `Bearer ${producerToken}`)\n        .attach('file', jpegBuffer, 'test.jpg')\n        .expect(201);\n\n      expect(response.body.success).toBe(true);\n      expect(response.body.data.photoUrl).toBeDefined();\n    });\n\n    it('should reject upload without authentication', async () => {\n      const jpegBuffer = Buffer.concat([Buffer.from([0xff, 0xd8, 0xff]), Buffer.alloc(1000, 'a')]);\n\n      await request(app.getHttpServer())\n        .post(`/speakers/${testSpeakerId}/upload-photo`)\n        .attach('file', jpegBuffer, 'test.jpg')\n        .expect(401);\n\n      expect(mockStorageService.uploadFile).not.toHaveBeenCalled();\n    });\n\n    it('should reject upload with insufficient role (regular user)', async () => {\n      const jpegBuffer = Buffer.concat([Buffer.from([0xff, 0xd8, 0xff]), Buffer.alloc(1000, 'a')]);\n\n      await request(app.getHttpServer())\n        .post(`/speakers/${testSpeakerId}/upload-photo`)\n        .set('Authorization', `Bearer ${userToken}`)\n        .attach('file', jpegBuffer, 'test.jpg')\n        .expect(403);\n\n      expect(mockStorageService.uploadFile).not.toHaveBeenCalled();\n    });\n\n    it('should reject upload without file', async () => {\n      const response = await request(app.getHttpServer())\n        .post(`/speakers/${testSpeakerId}/upload-photo`)\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(400);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.error).toContain('No file provided');\n    });\n\n    it('should reject upload for non-existent speaker', async () => {\n      const jpegBuffer = Buffer.concat([Buffer.from([0xff, 0xd8, 0xff]), Buffer.alloc(1000, 'a')]);\n\n      const fakeId = '507f1f77bcf86cd799439999';\n\n      const response = await request(app.getHttpServer())\n        .post(`/speakers/${fakeId}/upload-photo`)\n        .set('Authorization', `Bearer ${authToken}`)\n        .attach('file', jpegBuffer, 'test.jpg')\n        .expect(404);\n\n      expect(response.body.success).toBe(false);\n      expect(response.body.error).toContain('not found');\n    });\n\n    it('should reject upload with invalid file type', async () => {\n      // Mock StorageService to throw validation error\n      mockStorageService.uploadFile.mockRejectedValueOnce(\n        new Error('Invalid file type. Only JPEG, PNG, WEBP files are allowed.'),\n      );\n\n      const pdfBuffer = Buffer.concat([\n        Buffer.from([0x25, 0x50, 0x44, 0x46]),\n        Buffer.alloc(1000, 'a'),\n      ]);\n\n      await request(app.getHttpServer())\n        .post(`/speakers/${testSpeakerId}/upload-photo`)\n        .set('Authorization', `Bearer ${authToken}`)\n        .attach('file', pdfBuffer, 'test.pdf')\n        .expect(500); // Will be 500 because StorageService throws generic Error, not BadRequestException\n\n      // Reset mock\n      mockStorageService.uploadFile.mockResolvedValue({\n        key: 'speaker-photos/12345-67890.jpg',\n        url: 'https://test-bucket.s3.us-east-1.amazonaws.com/speaker-photos/12345-67890.jpg',\n      });\n    });\n\n    it('should handle invalid speaker ID format gracefully', async () => {\n      const jpegBuffer = Buffer.concat([Buffer.from([0xff, 0xd8, 0xff]), Buffer.alloc(1000, 'a')]);\n\n      await request(app.getHttpServer())\n        .post('/speakers/invalid-id/upload-photo')\n        .set('Authorization', `Bearer ${authToken}`)\n        .attach('file', jpegBuffer, 'test.jpg')\n        .expect(500); // MongoDB will throw on invalid ObjectId format\n    });\n  });\n\n  describe('File Upload Validation Edge Cases', () => {\n    it('should accept PNG files', async () => {\n      const pngBuffer = Buffer.concat([\n        Buffer.from([0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a]),\n        Buffer.alloc(1000, 'b'),\n      ]);\n\n      const response = await request(app.getHttpServer())\n        .post(`/speakers/${testSpeakerId}/upload-photo`)\n        .set('Authorization', `Bearer ${authToken}`)\n        .attach('file', pngBuffer, 'test.png')\n        .expect(201);\n\n      expect(response.body.success).toBe(true);\n    });\n\n    it('should accept WebP files', async () => {\n      const webpBuffer = Buffer.concat([\n        Buffer.from([0x52, 0x49, 0x46, 0x46]),\n        Buffer.alloc(4, 0),\n        Buffer.from('WEBP', 'ascii'),\n        Buffer.alloc(1000, 'c'),\n      ]);\n\n      const response = await request(app.getHttpServer())\n        .post(`/speakers/${testSpeakerId}/upload-photo`)\n        .set('Authorization', `Bearer ${authToken}`)\n        .attach('file', webpBuffer, 'test.webp')\n        .expect(201);\n\n      expect(response.body.success).toBe(true);\n    });\n  });\n});\n"],"version":3}