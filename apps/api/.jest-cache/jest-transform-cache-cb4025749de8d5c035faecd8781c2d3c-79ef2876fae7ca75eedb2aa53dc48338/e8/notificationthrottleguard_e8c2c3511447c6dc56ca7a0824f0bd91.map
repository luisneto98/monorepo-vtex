{"version":3,"names":["cov_nptuhzwfi","actualCoverage","common_1","s","require","core_1","notification_throttle_decorator_1","NotificationThrottleGuard","reflector","throttleStore","Map","constructor","f","setInterval","cleanupExpiredEntries","canActivate","context","throttleOptions","get","NOTIFICATION_THROTTLE_KEY","getHandler","b","request","switchToHttp","getRequest","userId","HttpException","HttpStatus","UNAUTHORIZED","key","ttl","limit","now","Date","record","resetTime","count","set","remainingTime","Math","ceil","TOO_MANY_REQUESTS","entries","delete","exports","__decorate","Injectable","Reflector"],"sources":["/home/luisneto98/Documentos/Code/monorepo-vtex/apps/api/src/common/guards/notification-throttle.guard.ts"],"sourcesContent":["import {\n  Injectable,\n  ExecutionContext,\n  HttpException,\n  HttpStatus,\n  CanActivate,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport {\n  NOTIFICATION_THROTTLE_KEY,\n  NotificationThrottleOptions,\n} from '../decorators/notification-throttle.decorator';\n\ninterface ThrottleRecord {\n  count: number;\n  resetTime: number;\n}\n\n@Injectable()\nexport class NotificationThrottleGuard implements CanActivate {\n  private readonly throttleStore = new Map<string, ThrottleRecord>();\n\n  constructor(private readonly reflector: Reflector) {\n    // Clean up expired entries every 5 minutes\n    setInterval(() => this.cleanupExpiredEntries(), 5 * 60 * 1000);\n  }\n\n  async canActivate(context: ExecutionContext): Promise<boolean> {\n    const throttleOptions = this.reflector.get<NotificationThrottleOptions>(\n      NOTIFICATION_THROTTLE_KEY,\n      context.getHandler(),\n    );\n\n    if (!throttleOptions) {\n      // No notification throttle decorator, skip this guard\n      return true;\n    }\n\n    const request = context.switchToHttp().getRequest();\n    const userId = request['user']?.userId;\n\n    if (!userId) {\n      throw new HttpException('User not authenticated', HttpStatus.UNAUTHORIZED);\n    }\n\n    const key = `notification_throttle:${userId}`;\n    const { ttl, limit } = throttleOptions;\n    const now = Date.now();\n\n    let record = this.throttleStore.get(key);\n\n    // Initialize or reset if expired\n    if (!record || now > record.resetTime) {\n      record = {\n        count: 0,\n        resetTime: now + ttl,\n      };\n      this.throttleStore.set(key, record);\n    }\n\n    // Check if limit exceeded\n    if (record.count >= limit) {\n      const remainingTime = Math.ceil((record.resetTime - now) / 1000);\n      throw new HttpException(\n        `Notification rate limit exceeded. Try again in ${remainingTime} seconds.`,\n        HttpStatus.TOO_MANY_REQUESTS,\n      );\n    }\n\n    // Increment count\n    record.count++;\n    this.throttleStore.set(key, record);\n\n    return true;\n  }\n\n  private cleanupExpiredEntries(): void {\n    const now = Date.now();\n    for (const [key, record] of this.throttleStore.entries()) {\n      if (now > record.resetTime) {\n        this.throttleStore.delete(key);\n      }\n    }\n  }\n}\n"],"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","ignoreList":[]}